{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { map, finalize, catchError } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/accounts`;\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.refreshingToken = false;\n      this.accountSubject = new BehaviorSubject(null);\n      this.account = this.accountSubject.asObservable();\n      this.loadStoredAccount();\n    }\n    loadStoredAccount() {\n      try {\n        const storedAccount = localStorage.getItem('account');\n        if (storedAccount) {\n          const account = JSON.parse(storedAccount);\n          this.accountSubject.next(account);\n          // Start refresh token timer\n          this.startRefreshTokenTimer();\n        }\n      } catch (error) {\n        console.error('Error loading stored account:', error);\n        localStorage.removeItem('account');\n      }\n    }\n    get accountValue() {\n      return this.accountSubject.value;\n    }\n    get userValue() {\n      return this.accountValue;\n    }\n    get isAdmin() {\n      return this.accountValue?.role === Role.Admin;\n    }\n    login(email, password) {\n      return this.http.post(`${baseUrl}/authenticate`, {\n        email,\n        password\n      }, {\n        withCredentials: true\n      }).pipe(map(account => {\n        this.storeAccount(account);\n        this.startRefreshTokenTimer();\n        return account;\n      }), catchError(error => {\n        console.error('Login error:', error);\n        return throwError(() => error);\n      }));\n    }\n    storeAccount(account) {\n      localStorage.setItem('account', JSON.stringify(account));\n      this.accountSubject.next(account);\n    }\n    logout() {\n      this.http.post(`${baseUrl}/revoke-token`, {}, {\n        withCredentials: true\n      }).pipe(finalize(() => {\n        this.clearAccountData();\n      })).subscribe();\n    }\n    clearAccountData() {\n      localStorage.removeItem('account');\n      this.stopRefreshTokenTimer();\n      this.accountSubject.next(null);\n      this.router.navigate(['/account/login']);\n    }\n    refreshToken() {\n      if (this.refreshingToken) {\n        return this.account;\n      }\n      this.refreshingToken = true;\n      return this.http.post(`${baseUrl}/refresh-token`, {}, {\n        withCredentials: true\n      }).pipe(map(account => {\n        this.storeAccount(account);\n        this.startRefreshTokenTimer();\n        this.refreshingToken = false;\n        return account;\n      }), catchError(error => {\n        console.error('Token refresh failed:', error);\n        this.clearAccountData();\n        this.refreshingToken = false;\n        return throwError(() => error);\n      }));\n    }\n    register(account) {\n      return this.http.post(`${baseUrl}/register`, account, {\n        observe: 'response'\n      });\n    }\n    verifyEmail(token) {\n      return this.http.post(`${baseUrl}/verify-email`, {\n        token\n      });\n    }\n    forgotPassword(email) {\n      return this.http.post(`${baseUrl}/forgot-password`, {\n        email\n      });\n    }\n    validateResetToken(token) {\n      return this.http.post(`${baseUrl}/validate-reset-token`, {\n        token\n      });\n    }\n    resetPassword(token, password, confirmPassword) {\n      return this.http.post(`${baseUrl}/reset-password`, {\n        token,\n        password,\n        confirmPassword\n      });\n    }\n    getAll() {\n      return this.http.get(baseUrl);\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n    create(params) {\n      return this.http.post(baseUrl, params);\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params).pipe(map(account => {\n        // update the current account if it was updated\n        if (account.id === this.accountValue?.id) {\n          // publish updated account to subscribers\n          account = {\n            ...this.accountValue,\n            ...account\n          };\n          this.accountSubject.next(account);\n        }\n        return account;\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`).pipe(map(x => {\n        // auto logout if the logged in account was deleted\n        if (id === this.accountValue?.id) {\n          this.logout();\n        }\n        return x;\n      }));\n    }\n    startRefreshTokenTimer() {\n      if (this.accountValue?.jwtToken) {\n        try {\n          // parse json object from base64 encoded jwt token\n          const jwtBase64 = this.accountValue.jwtToken.split('.')[1];\n          const jwtToken = JSON.parse(atob(jwtBase64));\n          // set a timeout to refresh the token a minute before it expires\n          const expires = new Date(jwtToken.exp * 1000);\n          const timeout = expires.getTime() - Date.now() - 60 * 1000;\n          this.stopRefreshTokenTimer();\n          this.refreshTokenTimeout = setTimeout(() => {\n            console.log('Refreshing token...');\n            this.refreshToken().subscribe();\n          }, Math.max(0, timeout));\n        } catch (error) {\n          console.error('Error starting refresh token timer:', error);\n          this.clearAccountData();\n        }\n      }\n    }\n    stopRefreshTokenTimer() {\n      if (this.refreshTokenTimeout) {\n        clearTimeout(this.refreshTokenTimeout);\n      }\n    }\n    static {\n      this.ɵfac = function AccountService_Factory(t) {\n        return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AccountService,\n        factory: AccountService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}