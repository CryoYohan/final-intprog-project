{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, finalize } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.employeeSubject = new BehaviorSubject(null);\n      this.employee = this.employeeSubject.asObservable();\n    }\n    get employeeValue() {\n      return this.employeeSubject.value;\n    }\n    getAll() {\n      return this.http.get(`${environment.apiUrl}/employees`);\n    }\n    getById(id) {\n      return this.http.get(`${environment.apiUrl}/employees/${id}`);\n    }\n    getByAccountId(accountId) {\n      return this.http.get(`${environment.apiUrl}/employees/account/${accountId}`);\n    }\n    create(employee) {\n      return this.http.post(`${environment.apiUrl}/employees`, employee);\n    }\n    update(id, params) {\n      return this.http.put(`${environment.apiUrl}/employees/${id}`, params).pipe(map(employee => {\n        // update employee if it's the current employee\n        if (employee.id === this.employeeValue?.id) {\n          // publish updated employee to subscribers\n          employee = {\n            ...this.employeeValue,\n            ...employee\n          };\n          this.employeeSubject.next(employee);\n        }\n        return employee;\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${environment.apiUrl}/employees/${id}`).pipe(finalize(() => {\n        // auto logout if the logged in employee was deleted\n        if (id === this.employeeValue?.id) this.employeeSubject.next(null);\n      }));\n    }\n    static {\n      this.ɵfac = function EmployeeService_Factory(t) {\n        return new (t || EmployeeService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: EmployeeService,\n        factory: EmployeeService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return EmployeeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}