{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services\";\nimport * as i4 from \"@angular/common\";\nfunction AddEditComponent_div_17_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Type is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, AddEditComponent_div_17_div_1_Template, 2, 0, \"div\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f.type.errors.required);\n  }\n}\nfunction AddEditComponent_div_22_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Details are required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, AddEditComponent_div_22_div_1_Template, 2, 0, \"div\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.description.errors.required);\n  }\n}\nfunction AddEditComponent_div_23_div_4_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_23_div_4_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, AddEditComponent_div_23_div_4_div_3_div_1_Template, 2, 0, \"div\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r7 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r7.get(\"name\").errors.required);\n  }\n}\nfunction AddEditComponent_div_23_div_4_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Quantity is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_23_div_4_div_6_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Quantity must be at least 1\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_23_div_4_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, AddEditComponent_div_23_div_4_div_6_div_1_Template, 2, 0, \"div\", 19);\n    i0.ɵɵtemplate(2, AddEditComponent_div_23_div_4_div_6_div_2_Template, 2, 0, \"div\", 19);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r7 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r7.get(\"quantity\").errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r7.get(\"quantity\").errors.min);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nfunction AddEditComponent_div_23_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 23)(1, \"div\", 24);\n    i0.ɵɵelement(2, \"input\", 25);\n    i0.ɵɵtemplate(3, AddEditComponent_div_23_div_4_div_3_Template, 2, 1, \"div\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 24);\n    i0.ɵɵelement(5, \"input\", 26);\n    i0.ɵɵtemplate(6, AddEditComponent_div_23_div_4_div_6_Template, 3, 2, \"div\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 27)(8, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function AddEditComponent_div_23_div_4_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const i_r8 = restoredCtx.index;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.removeItem(i_r8));\n    });\n    i0.ɵɵelement(9, \"i\", 29);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const item_r7 = ctx.$implicit;\n    const i_r8 = ctx.index;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"formGroupName\", i_r8);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c0, ctx_r6.submitted && item_r7.get(\"name\").errors));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.submitted && item_r7.get(\"name\").errors);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx_r6.submitted && item_r7.get(\"quantity\").errors));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.submitted && item_r7.get(\"quantity\").errors);\n  }\n}\nfunction AddEditComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"label\", 5);\n    i0.ɵɵtext(2, \"Items\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 20);\n    i0.ɵɵtemplate(4, AddEditComponent_div_23_div_4_Template, 10, 9, \"div\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function AddEditComponent_div_23_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.addItem());\n    });\n    i0.ɵɵtext(6, \" Add Item \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.items.controls);\n  }\n}\nfunction AddEditComponent_span_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 30);\n  }\n}\nexport let AddEditComponent = /*#__PURE__*/(() => {\n  class AddEditComponent {\n    // Getter for checking if items section should be shown\n    get showItemsSection() {\n      var _a, _b;\n      const type = (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('type')) === null || _b === void 0 ? void 0 : _b.value;\n      return type === 'Equipment' || type === 'Resources';\n    }\n    constructor(formBuilder, route, router, requestService, alertService, accountService) {\n      var _a;\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.requestService = requestService;\n      this.alertService = alertService;\n      this.accountService = accountService;\n      this.loading = false;\n      this.submitted = false;\n      this.employeeId = null;\n      this.isAdmin = false;\n      this.isAdmin = ((_a = this.accountService.accountValue) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n      // Get employeeId from query params\n      this.route.queryParams.subscribe(params => {\n        this.employeeId = params['employeeId'];\n        // If no employeeId is provided, redirect back to requests list\n        if (!this.employeeId) {\n          this.alertService.error('Employee ID is required');\n          this.router.navigate(['/requests']);\n        }\n      });\n    }\n    ngOnInit() {\n      var _a;\n      this.id = this.route.snapshot.params['id'];\n      this.isAddMode = !this.id;\n      // Create base form\n      const formGroup = {\n        type: ['', Validators.required],\n        description: ['', Validators.required],\n        items: this.formBuilder.array([])\n      };\n      // Add status field for admin users\n      if (this.isAdmin) {\n        formGroup['status'] = ['Approved', Validators.required];\n      }\n      this.form = this.formBuilder.group(formGroup);\n      // Subscribe to type changes to handle items validation\n      (_a = this.form.get('type')) === null || _a === void 0 ? void 0 : _a.valueChanges.subscribe(type => {\n        const itemsArray = this.form.get('items');\n        if (type === 'Equipment' || type === 'Resources') {\n          // Add at least one item if none exist\n          if (itemsArray.length === 0) {\n            this.addItem();\n          }\n        } else {\n          // Clear items if type is Leave\n          while (itemsArray.length !== 0) {\n            itemsArray.removeAt(0);\n          }\n        }\n      });\n      if (!this.isAddMode) {\n        this.requestService.getById(this.id).pipe(first()).subscribe(x => {\n          // Map backend fields to form fields\n          const formData = {\n            type: x.type,\n            description: x.description\n          };\n          this.form.patchValue(formData);\n          // Load items only if type requires them\n          if (x.items && this.showItemsSection) {\n            x.items.forEach(item => {\n              this.addItem(item);\n            });\n          }\n        });\n      }\n    }\n    // convenience getter for easy access to form fields\n    get f() {\n      return this.form.controls;\n    }\n    get items() {\n      return this.form.get('items');\n    }\n    addItem(item = null) {\n      const itemForm = this.formBuilder.group({\n        name: [item ? item.name : '', Validators.required],\n        quantity: [item ? item.quantity : '', [Validators.required, Validators.min(1)]]\n      });\n      this.items.push(itemForm);\n    }\n    removeItem(index) {\n      if (this.items.length > 1 && this.showItemsSection) {\n        this.items.removeAt(index);\n      } else {\n        this.alertService.warn('At least one item is required for equipment and resource requests');\n      }\n    }\n    onSubmit() {\n      this.submitted = true;\n      this.alertService.clear();\n      // Validate items if required\n      if (this.showItemsSection && this.items.length === 0) {\n        this.alertService.error('At least one item is required for Equipment or Resources requests');\n        return;\n      }\n      // stop here if form is invalid\n      if (this.form.invalid) {\n        return;\n      }\n      // Check if employeeId is available\n      if (!this.employeeId) {\n        this.alertService.error('Employee ID is required');\n        this.router.navigate(['/requests']);\n        return;\n      }\n      this.loading = true;\n      // Get the form value and map fields to match backend\n      const formValue = this.form.getRawValue();\n      const requestData = {\n        type: formValue.type,\n        description: formValue.description,\n        employeeId: Number(this.employeeId),\n        status: this.isAdmin ? formValue.status || 'Approved' : 'Pending',\n        items: this.showItemsSection ? formValue.items.filter(item => item.name && item.quantity) : [] // Empty array for Leave type\n      };\n\n      if (this.isAddMode) {\n        this.createRequest(requestData);\n      } else {\n        this.updateRequest(requestData);\n      }\n    }\n    createRequest(formValue) {\n      this.requestService.create(formValue).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Request created successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['../'], {\n            relativeTo: this.route,\n            queryParams: {\n              employeeId: this.employeeId\n            }\n          });\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    updateRequest(formValue) {\n      this.requestService.update(this.id, formValue).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Request updated successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['../../'], {\n            relativeTo: this.route,\n            queryParams: {\n              employeeId: this.employeeId\n            }\n          });\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    submitRequest() {\n      this.requestService.changeStatus(this.id, 'Submitted', 'Request submitted by employee').pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Request submitted successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['../../'], {\n            relativeTo: this.route\n          });\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n  }\n  AddEditComponent.ɵfac = function AddEditComponent_Factory(t) {\n    return new (t || AddEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.RequestService), i0.ɵɵdirectiveInject(i3.AlertService), i0.ɵɵdirectiveInject(i3.AccountService));\n  };\n  AddEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddEditComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 30,\n    vars: 13,\n    consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [1, \"form-label\"], [\"formControlName\", \"type\", 1, \"form-select\", 3, \"ngClass\"], [\"value\", \"\"], [\"value\", \"Equipment\"], [\"value\", \"Leave\"], [\"value\", \"Resources\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"formControlName\", \"description\", \"rows\", \"3\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"mb-3\", 4, \"ngIf\"], [1, \"mt-4\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-1\", 4, \"ngIf\"], [\"routerLink\", \"/requests\", 1, \"btn\", \"btn-link\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [\"formArrayName\", \"items\"], [\"class\", \"row mb-2\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"mt-2\", 3, \"click\"], [1, \"row\", \"mb-2\", 3, \"formGroupName\"], [1, \"col-5\"], [\"type\", \"text\", \"formControlName\", \"name\", \"placeholder\", \"Item name\", 1, \"form-control\", 3, \"ngClass\"], [\"type\", \"number\", \"formControlName\", \"quantity\", \"placeholder\", \"Quantity\", 1, \"form-control\", 3, \"ngClass\"], [1, \"col-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"], [1, \"fas\", \"fa-trash\"], [1, \"spinner-border\", \"spinner-border-sm\", \"me-1\"]],\n    template: function AddEditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function AddEditComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n        i0.ɵɵtext(7, \"Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"select\", 6)(9, \"option\", 7);\n        i0.ɵɵtext(10, \"Choose type...\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"option\", 8);\n        i0.ɵɵtext(12, \"Equipment\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"option\", 9);\n        i0.ɵɵtext(14, \"Leave\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"option\", 10);\n        i0.ɵɵtext(16, \"Resources\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(17, AddEditComponent_div_17_Template, 2, 1, \"div\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 4)(19, \"label\", 5);\n        i0.ɵɵtext(20, \"Details\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"textarea\", 12);\n        i0.ɵɵtemplate(22, AddEditComponent_div_22_Template, 2, 1, \"div\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(23, AddEditComponent_div_23_Template, 7, 1, \"div\", 13);\n        i0.ɵɵelementStart(24, \"div\", 14)(25, \"button\", 15);\n        i0.ɵɵtemplate(26, AddEditComponent_span_26_Template, 1, 0, \"span\", 16);\n        i0.ɵɵtext(27, \" Save Request \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(28, \"a\", 17);\n        i0.ɵɵtext(29, \"Cancel\");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.isAddMode ? \"Add Request\" : \"Edit Request\", \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.submitted && ctx.f.type.errors));\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.type.errors);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx.submitted && ctx.f.description.errors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.description.errors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showItemsSection);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n      }\n    },\n    dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName, i2.RouterLink],\n    encapsulation: 2\n  });\n  return AddEditComponent;\n})();","map":{"version":3,"mappings":"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","names":["Validators","first","Role","i0","AddEditComponent","showItemsSection","type","form","get","value","constructor","formBuilder","route","router","requestService","alertService","accountService","isAdmin","accountValue","role","Admin","queryParams","subscribe","params","employeeId","error","navigate","ngOnInit","id","snapshot","isAddMode","formGroup","required","description","items","array","group","valueChanges","itemsArray","length","addItem","removeAt","getById","pipe","x","formData","patchValue","forEach","item","f","controls","itemForm","name","quantity","min","push","removeItem","index","warn","onSubmit","submitted","clear","invalid","loading","formValue","getRawValue","requestData","Number","status","filter","createRequest","updateRequest","create","next","success","keepAfterRouteChange","relativeTo","update","submitRequest","changeStatus","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\requests\\add-edit.component.ts","D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\requests\\add-edit.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { RequestService, AlertService, AccountService } from '@app/_services';\r\nimport { Role, RequestType, RequestStatus } from '@app/_models';\r\n\r\n@Component({ templateUrl: 'add-edit.component.html' })\r\nexport class AddEditComponent implements OnInit {\r\n    form: FormGroup;\r\n    id: string;\r\n    isAddMode: boolean;\r\n    loading = false;\r\n    submitted = false;\r\n    employeeId: string | null = null;\r\n    isAdmin = false;\r\n\r\n    // Getter for checking if items section should be shown\r\n    get showItemsSection(): boolean {\r\n        const type = this.form?.get('type')?.value;\r\n        return type === 'Equipment' || type === 'Resources';\r\n    }\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private requestService: RequestService,\r\n        private alertService: AlertService,\r\n        private accountService: AccountService\r\n    ) {\r\n        this.isAdmin = this.accountService.accountValue?.role === Role.Admin;\r\n        \r\n        // Get employeeId from query params\r\n        this.route.queryParams.subscribe(params => {\r\n            this.employeeId = params['employeeId'];\r\n            \r\n            // If no employeeId is provided, redirect back to requests list\r\n            if (!this.employeeId) {\r\n                this.alertService.error('Employee ID is required');\r\n                this.router.navigate(['/requests']);\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.id = this.route.snapshot.params['id'];\r\n        this.isAddMode = !this.id;\r\n\r\n        // Create base form\r\n        const formGroup = {\r\n            type: ['', Validators.required],  // This will be mapped to requestType in onSubmit\r\n            description: ['', Validators.required],\r\n            items: this.formBuilder.array([])\r\n        };\r\n\r\n        // Add status field for admin users\r\n        if (this.isAdmin) {\r\n            formGroup['status'] = ['Approved', Validators.required];\r\n        }\r\n\r\n        this.form = this.formBuilder.group(formGroup);\r\n\r\n        // Subscribe to type changes to handle items validation\r\n        this.form.get('type')?.valueChanges.subscribe(type => {\r\n            const itemsArray = this.form.get('items') as FormArray;\r\n            \r\n            if (type === 'Equipment' || type === 'Resources') {\r\n                // Add at least one item if none exist\r\n                if (itemsArray.length === 0) {\r\n                    this.addItem();\r\n                }\r\n            } else {\r\n                // Clear items if type is Leave\r\n                while (itemsArray.length !== 0) {\r\n                    itemsArray.removeAt(0);\r\n                }\r\n            }\r\n        });\r\n\r\n        if (!this.isAddMode) {\r\n            this.requestService.getById(this.id)\r\n                .pipe(first())\r\n                .subscribe(x => {\r\n                    // Map backend fields to form fields\r\n                    const formData = {\r\n                        type: x.type,  // Use type instead of requestType\r\n                        description: x.description,\r\n                    };\r\n                    this.form.patchValue(formData);\r\n                    \r\n                    // Load items only if type requires them\r\n                    if (x.items && this.showItemsSection) {\r\n                        x.items.forEach(item => {\r\n                            this.addItem(item);\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n    get items() { return this.form.get('items') as FormArray; }\r\n\r\n    addItem(item: any = null) {\r\n        const itemForm = this.formBuilder.group({\r\n            name: [item ? item.name : '', Validators.required],\r\n            quantity: [item ? item.quantity : '', [Validators.required, Validators.min(1)]]\r\n        });\r\n\r\n        this.items.push(itemForm);\r\n    }\r\n\r\n    removeItem(index: number) {\r\n        if (this.items.length > 1 && this.showItemsSection) {\r\n            this.items.removeAt(index);\r\n        } else {\r\n            this.alertService.warn('At least one item is required for equipment and resource requests');\r\n        }\r\n    }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n        this.alertService.clear();\r\n\r\n        // Validate items if required\r\n        if (this.showItemsSection && this.items.length === 0) {\r\n            this.alertService.error('At least one item is required for Equipment or Resources requests');\r\n            return;\r\n        }\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        // Check if employeeId is available\r\n        if (!this.employeeId) {\r\n            this.alertService.error('Employee ID is required');\r\n            this.router.navigate(['/requests']);\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n\r\n        // Get the form value and map fields to match backend\r\n        const formValue = this.form.getRawValue();\r\n        const requestData = {\r\n            type: formValue.type,\r\n            description: formValue.description,\r\n            employeeId: Number(this.employeeId),\r\n            status: this.isAdmin ? (formValue.status || 'Approved') : 'Pending',\r\n            items: this.showItemsSection \r\n                ? formValue.items.filter(item => item.name && item.quantity)\r\n                : []  // Empty array for Leave type\r\n        };\r\n\r\n        if (this.isAddMode) {\r\n            this.createRequest(requestData);\r\n        } else {\r\n            this.updateRequest(requestData);\r\n        }\r\n    }\r\n\r\n    private createRequest(formValue: any) {\r\n        this.requestService.create(formValue)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Request created successfully', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../'], { \r\n                        relativeTo: this.route,\r\n                        queryParams: { employeeId: this.employeeId }\r\n                    });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    private updateRequest(formValue: any) {\r\n        this.requestService.update(this.id, formValue)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Request updated successfully', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../../'], { \r\n                        relativeTo: this.route,\r\n                        queryParams: { employeeId: this.employeeId }\r\n                    });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    submitRequest() {\r\n        this.requestService.changeStatus(this.id, 'Submitted', 'Request submitted by employee')\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Request submitted successfully', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../../'], { relativeTo: this.route });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n} ","<div class=\"card\">\r\n    <h4 class=\"card-header\">\r\n        {{isAddMode ? 'Add Request' : 'Edit Request'}}\r\n    </h4>\r\n    <div class=\"card-body\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"mb-3\">\r\n                <label class=\"form-label\">Type</label>\r\n                <select formControlName=\"type\" class=\"form-select\" [ngClass]=\"{ 'is-invalid': submitted && f.type.errors }\">\r\n                    <option value=\"\">Choose type...</option>\r\n                    <option value=\"Equipment\">Equipment</option>\r\n                    <option value=\"Leave\">Leave</option>\r\n                    <option value=\"Resources\">Resources</option>\r\n                </select>\r\n                <div *ngIf=\"submitted && f.type.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.type.errors.required\">Type is required</div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"mb-3\">\r\n                <label class=\"form-label\">Details</label>\r\n                <textarea formControlName=\"description\" class=\"form-control\" rows=\"3\" \r\n                    [ngClass]=\"{ 'is-invalid': submitted && f.description.errors }\"></textarea>\r\n                <div *ngIf=\"submitted && f.description.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.description.errors.required\">Details are required</div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Items section only for Equipment and Resources -->\r\n            <div *ngIf=\"showItemsSection\" class=\"mb-3\">\r\n                <label class=\"form-label\">Items</label>\r\n                <div formArrayName=\"items\">\r\n                    <div *ngFor=\"let item of items.controls; let i=index\" [formGroupName]=\"i\" class=\"row mb-2\">\r\n                        <div class=\"col-5\">\r\n                            <input type=\"text\" formControlName=\"name\" class=\"form-control\" placeholder=\"Item name\"\r\n                                [ngClass]=\"{ 'is-invalid': submitted && item.get('name').errors }\">\r\n                            <div *ngIf=\"submitted && item.get('name').errors\" class=\"invalid-feedback\">\r\n                                <div *ngIf=\"item.get('name').errors.required\">Name is required</div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-5\">\r\n                            <input type=\"number\" formControlName=\"quantity\" class=\"form-control\" placeholder=\"Quantity\"\r\n                                [ngClass]=\"{ 'is-invalid': submitted && item.get('quantity').errors }\">\r\n                            <div *ngIf=\"submitted && item.get('quantity').errors\" class=\"invalid-feedback\">\r\n                                <div *ngIf=\"item.get('quantity').errors.required\">Quantity is required</div>\r\n                                <div *ngIf=\"item.get('quantity').errors.min\">Quantity must be at least 1</div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-2\">\r\n                            <button type=\"button\" class=\"btn btn-danger\" (click)=\"removeItem(i)\">\r\n                                <i class=\"fas fa-trash\"></i>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button type=\"button\" class=\"btn btn-secondary mt-2\" (click)=\"addItem()\">\r\n                    Add Item\r\n                </button>\r\n            </div>\r\n\r\n            <div class=\"mt-4\">\r\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm me-1\"></span>\r\n                    Save Request\r\n                </button>\r\n                <a routerLink=\"/requests\" class=\"btn btn-link\">Cancel</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div> "]},"metadata":{},"sourceType":"module","externalDependencies":[]}