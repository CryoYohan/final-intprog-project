{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = 'angular-10-registration-login-example-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n// array in local storage for employees\nconst employeesKey = 'angular-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n// array in local storage for departments\nconst departmentsKey = 'angular-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [{\n  id: 1,\n  name: 'HR',\n  description: 'Human Resources'\n}, {\n  id: 2,\n  name: 'IT',\n  description: 'Information Technology'\n}, {\n  id: 3,\n  name: 'Finance',\n  description: 'Finance Department'\n}, {\n  id: 4,\n  name: 'Marketing',\n  description: 'Marketing Department'\n}];\n// array in local storage for requests\nconst requestsKey = 'angular-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n// array in local storage for workflows\nconst workflowsKey = 'angular-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      return handleRoute();\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case url.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case url.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case url.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case url.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case url.endsWith('/accounts/forgot-password') && method === 'POST':\n            return forgotPassword();\n          case url.endsWith('/accounts/validate-reset-token') && method === 'POST':\n            return validateResetToken();\n          case url.endsWith('/accounts/reset-password') && method === 'POST':\n            return resetPassword();\n          case url.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          case url.endsWith('/accounts') && method === 'POST':\n            return createAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n            return updateAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n            return deleteAccount();\n          // employee routes\n          case url.endsWith('/employees') && method === 'GET':\n            return getEmployees();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n            return getEmployeeById();\n          case url.match(/\\/employees\\/account\\/\\d+$/) && method === 'GET':\n            return getEmployeeByAccountId();\n          case url.endsWith('/employees') && method === 'POST':\n            return createEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n            return updateEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n            return deleteEmployee();\n          // department routes\n          case url.endsWith('/departments') && method === 'GET':\n            return getDepartments();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n            return getDepartmentById();\n          case url.endsWith('/departments') && method === 'POST':\n            return createDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n            return updateDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n            return deleteDepartment();\n          // request routes\n          case url.endsWith('/requests') && method === 'GET':\n            return getRequests();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return getRequestById();\n          case url.endsWith('/requests/my-requests') && method === 'GET':\n            return getMyRequests();\n          case url.endsWith('/requests/assigned-to-me') && method === 'GET':\n            return getAssignedToMe();\n          case url.endsWith('/requests') && method === 'POST':\n            return createRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return updateRequest();\n          case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n            return changeRequestStatus();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n            return deleteRequest();\n          default:\n            // pass through any requests not handled above\n            return next.handle(request);\n        }\n      }\n      // route functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) {\n          return error('Email does not exist');\n        }\n        if (!account.isVerified) {\n          // Display verification email alert\n          setTimeout(() => {\n            const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n            alertService.info(`\n                        <h4>Verification Email</h4>\n                        <p>Please click the below link to verify your email address:</p>\n                        <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    `, {\n              autoClose: false\n            });\n          }, 1000);\n          return error('Email is not yet verified');\n        }\n        if (account.password !== password) {\n          return error('Incorrect password');\n        }\n        if (account.status !== 'Active') {\n          return error('Account is inactive. Please contact support.');\n        }\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return unauthorized();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        if (!account) return unauthorized();\n        // replace old refresh token with a new one and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // display email already registered message in alert\n          setTimeout(() => {\n            alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, {\n              autoclose: false\n            });\n          }, 1000);\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // first registered account is an admin\n          account.role = Role.Admin;\n          account.status = 'Active'; // Admin accounts get active status\n        } else {\n          account.role = Role.User;\n          account.status = 'Inactive'; // User accounts get inacitve status upon creation\n        }\n\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display verification email in alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoclose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function forgotPassword() {\n        const {\n          email\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        // always return ok() response to prevent email enumeration\n        if (!account) return ok();\n        // create reset token that expires after 24 hours\n        account.resetToken = new Date().getTime().toString();\n        account.resetTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display password reset email in alert\n        setTimeout(() => {\n          const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;\n          alertService.info(`\n                    <h4>Reset Password Email</h4>\n                    <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>\n                    <p><a href=\"${resetUrl}\">${resetUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoClose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function validateResetToken() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.resetToken && x.resetToken === token && new Date() < new Date(x.resetTokenExpires));\n        if (!account) return error(\"Invalid token\");\n        return ok();\n      }\n      function resetPassword() {\n        const {\n          token,\n          password\n        } = body;\n        const account = accounts.find(x => !!x.resetToken && x.resetToken === token && new Date() < new Date(x.resetTokenExpires));\n        if (!account) return error('Invalid token');\n        // update password and remove reset token\n        account.password = password;\n        account.isVerified = true;\n        delete account.resetToken;\n        delete account.resetTokenExpires;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can get own profile and admin accounts can get all profiles\n        if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      function createAccount() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          return error(`Email ${account.email} is already registered`);\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        account.status = 'Inactive';\n        account.dateCreated = new Date().toISOString();\n        account.isVerified = true;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function updateAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        let params = body;\n        let account = accounts.find(x => x.id == idFromUrl());\n        // user accounts can update own profile and admin accounts can update all profiles\n        if (account.id != currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        // only update password if included\n        if (!params.password) {\n          delete params.password;\n        }\n        // don't save confirm password\n        delete params.confirmPassword;\n        // update and save account\n        Object.assign(account, params);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      function deleteAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can delete own account and admin accounts can delete any account\n        if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n        // delete account then save\n        accounts = accounts.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      // employee functions\n      function getEmployees() {\n        if (!isAuthenticated()) return unauthorized();\n        if (!isAdmin() && !isModerator()) return unauthorized();\n        return ok(employees.map(x => {\n          const account = accounts.find(a => a.id === x.accountId);\n          return Object.assign(Object.assign({}, x), {\n            account: account ? basicDetails(account) : null\n          });\n        }));\n      }\n      function getEmployeeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const employee = employees.find(x => x.id === idFromUrl());\n        if (!employee) return notFound();\n        // users can get their own employee record and admins/moderators can get any\n        const account = accounts.find(a => a.id === employee.accountId);\n        const accountId = account ? account.id : null;\n        if (accountId !== currentAccount().id && !isAdmin() && !isModerator()) return unauthorized();\n        return ok(Object.assign(Object.assign({}, employee), {\n          account: account ? basicDetails(account) : null\n        }));\n      }\n      function getEmployeeByAccountId() {\n        if (!isAuthenticated()) return unauthorized();\n        const accountId = parseInt(url.split('/').pop());\n        const employee = employees.find(x => x.accountId === accountId);\n        if (!employee) return notFound();\n        // users can get their own employee record and admins/moderators can get any\n        if (accountId !== currentAccount().id && !isAdmin() && !isModerator()) return unauthorized();\n        const account = accounts.find(a => a.id === employee.accountId);\n        return ok(Object.assign(Object.assign({}, employee), {\n          account: account ? basicDetails(account) : null\n        }));\n      }\n      function createEmployee() {\n        if (!isAuthenticated()) return unauthorized();\n        if (!isAdmin()) return unauthorized();\n        const employee = body;\n        if (employees.find(x => x.accountId === employee.accountId)) return error('Employee already exists for this account');\n        // assign employee id and other properties\n        employee.id = newEmployeeId();\n        employee.created = new Date().toISOString();\n        employee.status = employee.status || 'Active';\n        employees.push(employee);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(employee);\n      }\n      function updateEmployee() {\n        if (!isAuthenticated()) return unauthorized();\n        const employee = employees.find(x => x.id === idFromUrl());\n        if (!employee) return notFound();\n        const account = accounts.find(a => a.id === employee.accountId);\n        const accountId = account ? account.id : null;\n        // users can update their own employee record and admins can update any\n        if (accountId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // only allow admins to update accountId\n        if (body.accountId !== employee.accountId && !isAdmin()) return unauthorized();\n        // copy body properties to employee\n        Object.assign(employee, body);\n        employee.updated = new Date().toISOString();\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(Object.assign(Object.assign({}, employee), {\n          account: account ? basicDetails(account) : null\n        }));\n      }\n      function deleteEmployee() {\n        if (!isAuthenticated()) return unauthorized();\n        if (!isAdmin()) return unauthorized();\n        employees = employees.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok();\n      }\n      // department functions\n      function getDepartments() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(departments);\n      }\n      function getDepartmentById() {\n        if (!isAuthenticated()) return unauthorized();\n        const department = departments.find(x => x.id === idFromUrl());\n        if (!department) return notFound();\n        return ok(department);\n      }\n      function createDepartment() {\n        if (!isAuthenticated()) return unauthorized();\n        if (!isAdmin()) return unauthorized();\n        const department = body;\n        if (departments.find(x => x.name === department.name)) return error('Department with this name already exists');\n        // assign department id\n        department.id = newDepartmentId();\n        departments.push(department);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(department);\n      }\n      function updateDepartment() {\n        if (!isAuthenticated()) return unauthorized();\n        if (!isAdmin()) return unauthorized();\n        const department = departments.find(x => x.id === idFromUrl());\n        if (!department) return notFound();\n        // copy body properties to department\n        Object.assign(department, body);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(department);\n      }\n      function deleteDepartment() {\n        if (!isAuthenticated()) return unauthorized();\n        if (!isAdmin()) return unauthorized();\n        departments = departments.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok();\n      }\n      // request functions\n      function getRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        if (!isAdmin() && !isModerator()) return unauthorized();\n        return ok(requests.map(x => {\n          const requester = employees.find(e => e.id === x.requesterId);\n          const requesterAccount = requester ? accounts.find(a => a.id === requester.accountId) : null;\n          const assignee = x.assignedTo ? employees.find(e => e.id === x.assignedTo) : null;\n          const assigneeAccount = assignee ? accounts.find(a => a.id === assignee.accountId) : null;\n          return Object.assign(Object.assign({}, x), {\n            requester: requester ? Object.assign(Object.assign({}, requester), {\n              account: requesterAccount ? basicDetails(requesterAccount) : null\n            }) : null,\n            assignee: assignee ? Object.assign(Object.assign({}, assignee), {\n              account: assigneeAccount ? basicDetails(assigneeAccount) : null\n            }) : null,\n            workflows: workflows.filter(w => w.requestId === x.id)\n          });\n        }));\n      }\n      function getRequestById() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        const requester = employees.find(e => e.id === request.requesterId);\n        const requesterAccount = requester ? accounts.find(a => a.id === requester.accountId) : null;\n        const requesterAccountId = requesterAccount ? requesterAccount.id : null;\n        const assignee = request.assignedTo ? employees.find(e => e.id === request.assignedTo) : null;\n        const assigneeAccount = assignee ? accounts.find(a => a.id === assignee.accountId) : null;\n        const assigneeAccountId = assigneeAccount ? assigneeAccount.id : null;\n        // users can only view their own requests or requests assigned to them\n        // admins and moderators can view all requests\n        if (!isAdmin() && !isModerator() && currentAccount().id !== requesterAccountId && currentAccount().id !== assigneeAccountId) {\n          return unauthorized();\n        }\n        return ok(Object.assign(Object.assign({}, request), {\n          requester: requester ? Object.assign(Object.assign({}, requester), {\n            account: requesterAccount ? basicDetails(requesterAccount) : null\n          }) : null,\n          assignee: assignee ? Object.assign(Object.assign({}, assignee), {\n            account: assigneeAccount ? basicDetails(assigneeAccount) : null\n          }) : null,\n          workflows: workflows.filter(w => w.requestId === request.id)\n        }));\n      }\n      function getMyRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        // find employee for current account\n        const employee = employees.find(x => {\n          const account = accounts.find(a => a.id === x.accountId);\n          return account && account.id === currentAccount().id;\n        });\n        if (!employee) return ok([]);\n        const myRequests = requests.filter(x => x.requesterId === employee.id);\n        return ok(myRequests.map(x => {\n          const assignee = x.assignedTo ? employees.find(e => e.id === x.assignedTo) : null;\n          const assigneeAccount = assignee ? accounts.find(a => a.id === assignee.accountId) : null;\n          return Object.assign(Object.assign({}, x), {\n            assignee: assignee ? Object.assign(Object.assign({}, assignee), {\n              account: assigneeAccount ? basicDetails(assigneeAccount) : null\n            }) : null\n          });\n        }));\n      }\n      function getAssignedToMe() {\n        if (!isAuthenticated()) return unauthorized();\n        // find employee for current account\n        const employee = employees.find(x => {\n          const account = accounts.find(a => a.id === x.accountId);\n          return account && account.id === currentAccount().id;\n        });\n        if (!employee) return ok([]);\n        const assignedRequests = requests.filter(x => x.assignedTo === employee.id);\n        return ok(assignedRequests.map(x => {\n          const requester = employees.find(e => e.id === x.requesterId);\n          const requesterAccount = requester ? accounts.find(a => a.id === requester.accountId) : null;\n          return Object.assign(Object.assign({}, x), {\n            requester: requester ? Object.assign(Object.assign({}, requester), {\n              account: requesterAccount ? basicDetails(requesterAccount) : null\n            }) : null\n          });\n        }));\n      }\n      function createRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = body;\n        // ensure requester is the current user or user is admin\n        const employee = employees.find(x => {\n          const account = accounts.find(a => a.id === x.accountId);\n          return account && account.id === currentAccount().id;\n        });\n        if (!employee && !isAdmin()) return unauthorized();\n        if (request.requesterId !== employee.id && !isAdmin()) return unauthorized();\n        // assign request id and other properties\n        request.id = newRequestId();\n        request.status = 'Pending';\n        request.created = new Date().toISOString();\n        requests.push(request);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // create initial workflow stage\n        const initialWorkflow = {\n          id: newWorkflowId(),\n          requestId: request.id,\n          stage: 'Submission',\n          status: 'Completed',\n          handledBy: currentAccount().id,\n          comments: 'Request submitted',\n          created: new Date().toISOString(),\n          completedAt: new Date().toISOString()\n        };\n        workflows.push(initialWorkflow);\n        // create next workflow stage\n        const nextWorkflow = {\n          id: newWorkflowId(),\n          requestId: request.id,\n          stage: 'Review',\n          status: 'Pending',\n          comments: 'Pending review',\n          created: new Date().toISOString()\n        };\n        workflows.push(nextWorkflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(request);\n      }\n      function updateRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        const requester = employees.find(e => e.id === request.requesterId);\n        const requesterAccount = requester ? accounts.find(a => a.id === requester.accountId) : null;\n        const requesterAccountId = requesterAccount ? requesterAccount.id : null;\n        // check if user is authorized to update this request\n        if (!isAdmin() && !isModerator() && currentAccount().id !== requesterAccountId) return unauthorized();\n        // regular users cannot assign requests\n        if (body.assignedTo && body.assignedTo !== request.assignedTo && !isAdmin() && !isModerator()) return unauthorized();\n        // copy body properties to request\n        Object.assign(request, body);\n        request.updated = new Date().toISOString();\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        return ok(request);\n      }\n      function changeRequestStatus() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        const requester = employees.find(e => e.id === request.requesterId);\n        const requesterAccount = requester ? accounts.find(a => a.id === requester.accountId) : null;\n        const requesterAccountId = requesterAccount ? requesterAccount.id : null;\n        const assignee = request.assignedTo ? employees.find(e => e.id === request.assignedTo) : null;\n        const assigneeAccount = assignee ? accounts.find(a => a.id === assignee.accountId) : null;\n        const assigneeAccountId = assigneeAccount ? assigneeAccount.id : null;\n        // check if user is authorized to change status\n        if (!isAdmin() && !isModerator() && currentAccount().id !== requesterAccountId && currentAccount().id !== assigneeAccountId) return unauthorized();\n        // regular users can only cancel their own requests\n        if (!isAdmin() && !isModerator() && currentAccount().id === requesterAccountId && body.status !== 'Cancelled') return unauthorized();\n        // only assignees, moderators, and admins can change to statuses other than 'Cancelled'\n        if (!isAdmin() && !isModerator() && currentAccount().id !== assigneeAccountId && body.status !== 'Cancelled') return unauthorized();\n        const oldStatus = request.status;\n        // update request status\n        request.status = body.status;\n        request.updated = new Date().toISOString();\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // find current workflow stage\n        const currentWorkflow = workflows.find(x => x.requestId === request.id && x.status === 'Pending');\n        if (currentWorkflow) {\n          // update current workflow stage\n          currentWorkflow.status = 'Completed';\n          currentWorkflow.handledBy = currentAccount().id;\n          currentWorkflow.comments = body.comments;\n          currentWorkflow.completedAt = new Date().toISOString();\n          currentWorkflow.updated = new Date().toISOString();\n          // create next workflow stage if needed\n          if (body.status !== 'Completed' && body.status !== 'Rejected' && body.status !== 'Cancelled') {\n            let nextStage;\n            switch (currentWorkflow.stage) {\n              case 'Review':\n                nextStage = 'Processing';\n                break;\n              case 'Processing':\n                nextStage = 'Approval';\n                break;\n              case 'Approval':\n                nextStage = 'Implementation';\n                break;\n              case 'Implementation':\n                nextStage = 'Verification';\n                break;\n              default:\n                nextStage = 'Completion';\n            }\n            const nextWorkflow = {\n              id: newWorkflowId(),\n              requestId: request.id,\n              stage: nextStage,\n              status: 'Pending',\n              comments: `Pending ${nextStage.toLowerCase()}`,\n              created: new Date().toISOString()\n            };\n            workflows.push(nextWorkflow);\n          }\n          localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        }\n        return ok({\n          request,\n          statusChanged: oldStatus !== body.status\n        });\n      }\n      function deleteRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        if (!isAdmin() && !isModerator()) return unauthorized();\n        requests = requests.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // delete associated workflows\n        workflows = workflows.filter(x => x.requestId !== idFromUrl());\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok();\n      }\n      // helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        })).pipe(delay(500)); // delay observable to simulate server api call\n      }\n\n      function error(message) {\n        return throwError({\n          error: {\n            message\n          }\n        }).pipe(materialize(), delay(500), dematerialize()); // call materialize and dematerialize to ensure delay even if an error is thrown\n      }\n\n      function unauthorized() {\n        return throwError({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }).pipe(materialize(), delay(500), dematerialize());\n      }\n      function notFound() {\n        return throwError({\n          status: 404,\n          error: {\n            message: 'Not Found'\n          }\n        }).pipe(materialize(), delay(500), dematerialize());\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          created,\n          updated,\n          isVerified,\n          status\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          created,\n          updated,\n          isVerified,\n          status\n        };\n      }\n      function isAuthenticated() {\n        return !!currentAccount();\n      }\n      function isAdmin() {\n        const account = currentAccount();\n        return account && account.role === Role.Admin;\n      }\n      function isModerator() {\n        const account = currentAccount();\n        return account && account.role === Role.Moderator;\n      }\n      function isAuthorized(role) {\n        const account = currentAccount();\n        return account && account.role === role;\n      }\n      function currentAccount() {\n        // check if jwt token exists and is valid\n        if (!headers.get('Authorization')) return;\n        // check if jwt token is valid\n        const jwtToken = JSON.parse(atob(headers.get('Authorization').split('.')[1]));\n        const tokenExpired = Date.now() > jwtToken.exp * 1000;\n        if (tokenExpired) return;\n        // check if user still exists\n        const id = parseInt(jwtToken.id);\n        return accounts.find(x => x.id === id);\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function newAccountId() {\n        return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n      }\n      function newEmployeeId() {\n        return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n      }\n      function newDepartmentId() {\n        return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n      }\n      function newRequestId() {\n        return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n      }\n      function newWorkflowId() {\n        return workflows.length ? Math.max(...workflows.map(x => x.id)) + 1 : 1;\n      }\n      function generateJwtToken(account) {\n        // create token that expires in 15 minutes\n        const tokenPayload = {\n          exp: Math.round(new Date(Date.now() + 15 * 60 * 1000).getTime() / 1000),\n          id: account.id\n        };\n        return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;\n      }\n      function generateRefreshToken() {\n        const token = new Date().getTime().toString();\n        // add token cookie that expires in 7 days\n        const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString();\n        document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/`;\n        return token;\n      }\n      function getRefreshToken() {\n        var _a;\n        // get refresh token from cookie\n        return (_a = document.cookie.split(';').find(x => x.includes('fakeRefreshToken'))) === null || _a === void 0 ? void 0 : _a.split('=')[1];\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","materialize","dematerialize","Role","accountsKey","accounts","JSON","parse","localStorage","getItem","employeesKey","employees","departmentsKey","departments","id","name","description","requestsKey","requests","workflowsKey","workflows","FakeBackendInterceptor","constructor","alertService","intercept","request","next","url","method","headers","body","handleRoute","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","forgotPassword","validateResetToken","resetPassword","getAccounts","match","getAccountById","createAccount","updateAccount","deleteAccount","getEmployees","getEmployeeById","getEmployeeByAccountId","createEmployee","updateEmployee","deleteEmployee","getDepartments","getDepartmentById","createDepartment","updateDepartment","deleteDepartment","getRequests","getRequestById","getMyRequests","getAssignedToMe","createRequest","updateRequest","changeRequestStatus","deleteRequest","handle","email","password","account","find","x","error","isVerified","setTimeout","verifyUrl","location","origin","verificationToken","info","autoClose","status","refreshTokens","push","generateRefreshToken","setItem","stringify","ok","basicDetails","jwtToken","generateJwtToken","getRefreshToken","unauthorized","includes","filter","isAuthenticated","autoclose","newAccountId","role","Admin","User","dateCreated","Date","toISOString","getTime","toString","confirmPassword","token","resetToken","resetTokenExpires","now","resetUrl","map","idFromUrl","currentAccount","isAuthorized","params","Object","assign","isAdmin","isModerator","a","accountId","employee","notFound","parseInt","split","pop","newEmployeeId","created","updated","department","newDepartmentId","requester","e","requesterId","requesterAccount","assignee","assignedTo","assigneeAccount","w","requestId","requesterAccountId","assigneeAccountId","myRequests","assignedRequests","newRequestId","initialWorkflow","newWorkflowId","stage","handledBy","comments","completedAt","nextWorkflow","oldStatus","currentWorkflow","nextStage","toLowerCase","statusChanged","pipe","message","title","firstName","lastName","Moderator","get","atob","tokenExpired","exp","urlParts","length","Math","max","tokenPayload","round","btoa","expires","toUTCString","document","cookie","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\n\nimport { AlertService } from '@app/_services';\nimport { Role } from '@app/_models';\n\n// array in local storage for accounts\nconst accountsKey = 'angular-10-registration-login-example-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n\n// array in local storage for employees\nconst employeesKey = 'angular-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n\n// array in local storage for departments\nconst departmentsKey = 'angular-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [\n    { id: 1, name: 'HR', description: 'Human Resources' },\n    { id: 2, name: 'IT', description: 'Information Technology' },\n    { id: 3, name: 'Finance', description: 'Finance Department' },\n    { id: 4, name: 'Marketing', description: 'Marketing Department' }\n];\n\n// array in local storage for requests\nconst requestsKey = 'angular-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n\n// array in local storage for workflows\nconst workflowsKey = 'angular-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n\n@Injectable()\nexport class FakeBackendInterceptor implements HttpInterceptor {\n    constructor(private alertService: AlertService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { url, method, headers, body } = request;\n        const alertService = this.alertService;\n\n        return handleRoute();\n\n        function handleRoute() {\n            switch (true) {\n                case url.endsWith('/accounts/authenticate') && method === 'POST':\n                    return authenticate();\n                case url.endsWith('/accounts/refresh-token') && method === 'POST':\n                    return refreshToken();\n                case url.endsWith('/accounts/revoke-token') && method === 'POST':\n                    return revokeToken();\n                case url.endsWith('/accounts/register') && method === 'POST':\n                    return register();\n                case url.endsWith('/accounts/verify-email') && method === 'POST':\n                    return verifyEmail();\n                case url.endsWith('/accounts/forgot-password') && method === 'POST':\n                    return forgotPassword();\n                case url.endsWith('/accounts/validate-reset-token') && method === 'POST':\n                    return validateResetToken();\n                case url.endsWith('/accounts/reset-password') && method === 'POST':\n                    return resetPassword();\n                case url.endsWith('/accounts') && method === 'GET':\n                    return getAccounts();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n                    return getAccountById();\n                case url.endsWith('/accounts') && method === 'POST':\n                    return createAccount();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n                    return updateAccount();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n                    return deleteAccount();\n                    \n                // employee routes\n                case url.endsWith('/employees') && method === 'GET':\n                    return getEmployees();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n                    return getEmployeeById();\n                case url.match(/\\/employees\\/account\\/\\d+$/) && method === 'GET':\n                    return getEmployeeByAccountId();\n                case url.endsWith('/employees') && method === 'POST':\n                    return createEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n                    return updateEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n                    return deleteEmployee();\n                    \n                // department routes\n                case url.endsWith('/departments') && method === 'GET':\n                    return getDepartments();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n                    return getDepartmentById();\n                case url.endsWith('/departments') && method === 'POST':\n                    return createDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n                    return updateDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n                    return deleteDepartment();\n                    \n                // request routes\n                case url.endsWith('/requests') && method === 'GET':\n                    return getRequests();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n                    return getRequestById();\n                case url.endsWith('/requests/my-requests') && method === 'GET':\n                    return getMyRequests();\n                case url.endsWith('/requests/assigned-to-me') && method === 'GET':\n                    return getAssignedToMe();\n                case url.endsWith('/requests') && method === 'POST':\n                    return createRequest();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n                    return updateRequest();\n                case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n                    return changeRequestStatus();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequest();\n                    \n                default:\n                    // pass through any requests not handled above\n                    return next.handle(request);\n            }\n        }\n\n        // route functions\n        function authenticate() {\n            const { email, password } = body;\n            const account = accounts.find(x => x.email === email);\n        \n            if (!account) {\n                return error('Email does not exist');\n            }\n        \n            if (!account.isVerified) {\n                // Display verification email alert\n                setTimeout(() => {\n                    const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                    alertService.info(`\n                        <h4>Verification Email</h4>\n                        <p>Please click the below link to verify your email address:</p>\n                        <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    `, { autoClose: false });\n                }, 1000);\n        \n                return error('Email is not yet verified');\n            }\n        \n            if (account.password !== password) {\n                return error('Incorrect password');\n            }\n        \n            if (account.status !== 'Active') {\n                return error('Account is inactive. Please contact support.');\n            }\n        \n            account.refreshTokens.push(generateRefreshToken());\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        \n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account)\n            });\n        }\n        \n        \n\n        function refreshToken() {\n            const refreshToken = getRefreshToken();\n\n            if (!refreshToken) return unauthorized();\n\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n\n            if (!account) return unauthorized();\n\n            // replace old refresh token with a new one and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            account.refreshTokens.push(generateRefreshToken());\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account)\n            });\n        }\n\n        function revokeToken() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const refreshToken = getRefreshToken();\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n\n            // revoke token and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function register() {\n            const account = body;\n\n            if (accounts.find(x => x.email === account.email)) {\n                // display email already registered message in alert\n                setTimeout(() => {\n                    alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, { autoclose: false });\n                }, 1000);\n\n                // always return ok() response to prevent email enumeration\n                return ok();\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            if (account.id === 1) {\n                // first registered account is an admin\n                account.role = Role.Admin;\n                account.status = 'Active'; // Admin accounts get active status\n            } else {\n                account.role = Role.User;\n                account.status = 'Inactive'; // User accounts get inacitve status upon creation\n            }\n            account.dateCreated = new Date().toISOString();\n            account.verificationToken = new Date().getTime().toString();\n            account.isVerified = false;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // display verification email in alert\n            setTimeout(() => {\n                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, { autoclose: false });\n            }, 1000);\n\n            return ok();\n        }\n\n        function verifyEmail() {\n            const { token } = body;\n            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n\n            if (!account) return error('Verification failed');\n\n            // set is verified flag to true if token is valid\n            account.isVerified = true;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function forgotPassword() {\n            const { email } = body;\n            const account = accounts.find(x => x.email === email);\n\n            // always return ok() response to prevent email enumeration\n            if (!account) return ok();\n\n            // create reset token that expires after 24 hours\n            account.resetToken = new Date().getTime().toString();\n            account.resetTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString();\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // display password reset email in alert\n            setTimeout(() => {\n                const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;\n                alertService.info(`\n                    <h4>Reset Password Email</h4>\n                    <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>\n                    <p><a href=\"${resetUrl}\">${resetUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, { autoClose: false });\n            }, 1000);\n\n            return ok();\n        }\n\n        function validateResetToken() {\n            const { token } = body;\n            const account = accounts.find(x =>\n                !!x.resetToken &&\n                x.resetToken === token &&\n                new Date() < new Date(x.resetTokenExpires)\n            );\n\n            if (!account) return error(\"Invalid token\");\n\n            return ok();\n        }\n\n        function resetPassword() {\n            const { token, password } = body;\n            const account = accounts.find(x =>\n                !!x.resetToken && x.resetToken === token &&\n                new Date() < new Date(x.resetTokenExpires)\n            );\n\n            if (!account) return error('Invalid token');\n\n            // update password and remove reset token\n            account.password = password;\n            account.isVerified = true;\n            delete account.resetToken;\n            delete account.resetTokenExpires;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function getAccounts() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(accounts.map(x => basicDetails(x)));\n        }\n\n        function getAccountById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let account = accounts.find(x => x.id === idFromUrl());\n\n            // user accounts can get own profile and admin accounts can get all profiles\n            if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n                return unauthorized();\n            }\n\n            return ok(basicDetails(account));\n\n        }\n\n        function createAccount() {\n            if (!isAuthorized(Role.Admin)) return unauthorized();\n\n            const account = body;\n            if (accounts.find(x => x.email === account.email)) {\n                return error(`Email ${account.email} is already registered`);\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            account.status = 'Inactive';\n            account.dateCreated = new Date().toISOString();\n            account.isVerified = true;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function updateAccount() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let params = body;\n            let account = accounts.find(x => x.id == idFromUrl());\n\n            // user accounts can update own profile and admin accounts can update all profiles\n            if (account.id != currentAccount().id && !isAuthorized(Role.Admin)) {\n                return unauthorized();\n            }\n\n            // only update password if included\n            if (!params.password) {\n                delete params.password;\n            }\n            // don't save confirm password\n            delete params.confirmPassword;\n\n            // update and save account\n            Object.assign(account, params);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok(basicDetails(account));\n        }\n\n        function deleteAccount() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let account = accounts.find(x => x.id === idFromUrl());\n\n            // user accounts can delete own account and admin accounts can delete any account\n            if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {\n                return unauthorized();\n            }\n\n            // delete account then save\n            accounts = accounts.filter(x => x.id !== idFromUrl());\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        // employee functions\n        function getEmployees() {\n            if (!isAuthenticated()) return unauthorized();\n            if (!isAdmin() && !isModerator()) return unauthorized();\n            \n            return ok(employees.map(x => {\n                const account = accounts.find(a => a.id === x.accountId);\n                return {\n                    ...x,\n                    account: account ? basicDetails(account) : null\n                };\n            }));\n        }\n        \n        function getEmployeeById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const employee = employees.find(x => x.id === idFromUrl());\n            if (!employee) return notFound();\n            \n            // users can get their own employee record and admins/moderators can get any\n            const account = accounts.find(a => a.id === employee.accountId);\n            const accountId = account ? account.id : null;\n            \n            if (accountId !== currentAccount().id && !isAdmin() && !isModerator()) \n                return unauthorized();\n                \n            return ok({\n                ...employee,\n                account: account ? basicDetails(account) : null\n            });\n        }\n        \n        function getEmployeeByAccountId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const accountId = parseInt(url.split('/').pop());\n            const employee = employees.find(x => x.accountId === accountId);\n            if (!employee) return notFound();\n            \n            // users can get their own employee record and admins/moderators can get any\n            if (accountId !== currentAccount().id && !isAdmin() && !isModerator()) \n                return unauthorized();\n                \n            const account = accounts.find(a => a.id === employee.accountId);\n            return ok({\n                ...employee,\n                account: account ? basicDetails(account) : null\n            });\n        }\n        \n        function createEmployee() {\n            if (!isAuthenticated()) return unauthorized();\n            if (!isAdmin()) return unauthorized();\n            \n            const employee = body;\n            \n            if (employees.find(x => x.accountId === employee.accountId))\n                return error('Employee already exists for this account');\n                \n            // assign employee id and other properties\n            employee.id = newEmployeeId();\n            employee.created = new Date().toISOString();\n            employee.status = employee.status || 'Active';\n            \n            employees.push(employee);\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            \n            return ok(employee);\n        }\n        \n        function updateEmployee() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const employee = employees.find(x => x.id === idFromUrl());\n            if (!employee) return notFound();\n            \n            const account = accounts.find(a => a.id === employee.accountId);\n            const accountId = account ? account.id : null;\n            \n            // users can update their own employee record and admins can update any\n            if (accountId !== currentAccount().id && !isAdmin()) \n                return unauthorized();\n                \n            // only allow admins to update accountId\n            if (body.accountId !== employee.accountId && !isAdmin())\n                return unauthorized();\n                \n            // copy body properties to employee\n            Object.assign(employee, body);\n            employee.updated = new Date().toISOString();\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            \n            return ok({\n                ...employee,\n                account: account ? basicDetails(account) : null\n            });\n        }\n        \n        function deleteEmployee() {\n            if (!isAuthenticated()) return unauthorized();\n            if (!isAdmin()) return unauthorized();\n            \n            employees = employees.filter(x => x.id !== idFromUrl());\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            \n            return ok();\n        }\n        \n        // department functions\n        function getDepartments() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(departments);\n        }\n        \n        function getDepartmentById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const department = departments.find(x => x.id === idFromUrl());\n            if (!department) return notFound();\n            \n            return ok(department);\n        }\n        \n        function createDepartment() {\n            if (!isAuthenticated()) return unauthorized();\n            if (!isAdmin()) return unauthorized();\n            \n            const department = body;\n            \n            if (departments.find(x => x.name === department.name))\n                return error('Department with this name already exists');\n                \n            // assign department id\n            department.id = newDepartmentId();\n            \n            departments.push(department);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok(department);\n        }\n        \n        function updateDepartment() {\n            if (!isAuthenticated()) return unauthorized();\n            if (!isAdmin()) return unauthorized();\n            \n            const department = departments.find(x => x.id === idFromUrl());\n            if (!department) return notFound();\n            \n            // copy body properties to department\n            Object.assign(department, body);\n            \n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok(department);\n        }\n        \n        function deleteDepartment() {\n            if (!isAuthenticated()) return unauthorized();\n            if (!isAdmin()) return unauthorized();\n            \n            departments = departments.filter(x => x.id !== idFromUrl());\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok();\n        }\n        \n        // request functions\n        function getRequests() {\n            if (!isAuthenticated()) return unauthorized();\n            if (!isAdmin() && !isModerator()) return unauthorized();\n            \n            return ok(requests.map(x => {\n                const requester = employees.find(e => e.id === x.requesterId);\n                const requesterAccount = requester ? accounts.find(a => a.id === requester.accountId) : null;\n                \n                const assignee = x.assignedTo ? employees.find(e => e.id === x.assignedTo) : null;\n                const assigneeAccount = assignee ? accounts.find(a => a.id === assignee.accountId) : null;\n                \n                return {\n                    ...x,\n                    requester: requester ? {\n                        ...requester,\n                        account: requesterAccount ? basicDetails(requesterAccount) : null\n                    } : null,\n                    assignee: assignee ? {\n                        ...assignee,\n                        account: assigneeAccount ? basicDetails(assigneeAccount) : null\n                    } : null,\n                    workflows: workflows.filter(w => w.requestId === x.id)\n                };\n            }));\n        }\n        \n        function getRequestById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n            \n            const requester = employees.find(e => e.id === request.requesterId);\n            const requesterAccount = requester ? accounts.find(a => a.id === requester.accountId) : null;\n            const requesterAccountId = requesterAccount ? requesterAccount.id : null;\n            \n            const assignee = request.assignedTo ? employees.find(e => e.id === request.assignedTo) : null;\n            const assigneeAccount = assignee ? accounts.find(a => a.id === assignee.accountId) : null;\n            const assigneeAccountId = assigneeAccount ? assigneeAccount.id : null;\n            \n            // users can only view their own requests or requests assigned to them\n            // admins and moderators can view all requests\n            if (!isAdmin() && !isModerator() && \n                currentAccount().id !== requesterAccountId && \n                currentAccount().id !== assigneeAccountId) {\n                return unauthorized();\n            }\n            \n            return ok({\n                ...request,\n                requester: requester ? {\n                    ...requester,\n                    account: requesterAccount ? basicDetails(requesterAccount) : null\n                } : null,\n                assignee: assignee ? {\n                    ...assignee,\n                    account: assigneeAccount ? basicDetails(assigneeAccount) : null\n                } : null,\n                workflows: workflows.filter(w => w.requestId === request.id)\n            });\n        }\n        \n        function getMyRequests() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            // find employee for current account\n            const employee = employees.find(x => {\n                const account = accounts.find(a => a.id === x.accountId);\n                return account && account.id === currentAccount().id;\n            });\n            \n            if (!employee) return ok([]);\n            \n            const myRequests = requests.filter(x => x.requesterId === employee.id);\n            \n            return ok(myRequests.map(x => {\n                const assignee = x.assignedTo ? employees.find(e => e.id === x.assignedTo) : null;\n                const assigneeAccount = assignee ? accounts.find(a => a.id === assignee.accountId) : null;\n                \n                return {\n                    ...x,\n                    assignee: assignee ? {\n                        ...assignee,\n                        account: assigneeAccount ? basicDetails(assigneeAccount) : null\n                    } : null\n                };\n            }));\n        }\n        \n        function getAssignedToMe() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            // find employee for current account\n            const employee = employees.find(x => {\n                const account = accounts.find(a => a.id === x.accountId);\n                return account && account.id === currentAccount().id;\n            });\n            \n            if (!employee) return ok([]);\n            \n            const assignedRequests = requests.filter(x => x.assignedTo === employee.id);\n            \n            return ok(assignedRequests.map(x => {\n                const requester = employees.find(e => e.id === x.requesterId);\n                const requesterAccount = requester ? accounts.find(a => a.id === requester.accountId) : null;\n                \n                return {\n                    ...x,\n                    requester: requester ? {\n                        ...requester,\n                        account: requesterAccount ? basicDetails(requesterAccount) : null\n                    } : null\n                };\n            }));\n        }\n        \n        function createRequest() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const request = body;\n            \n            // ensure requester is the current user or user is admin\n            const employee = employees.find(x => {\n                const account = accounts.find(a => a.id === x.accountId);\n                return account && account.id === currentAccount().id;\n            });\n            \n            if (!employee && !isAdmin())\n                return unauthorized();\n                \n            if (request.requesterId !== employee.id && !isAdmin())\n                return unauthorized();\n                \n            // assign request id and other properties\n            request.id = newRequestId();\n            request.status = 'Pending';\n            request.created = new Date().toISOString();\n            \n            requests.push(request);\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            \n            // create initial workflow stage\n            const initialWorkflow = {\n                id: newWorkflowId(),\n                requestId: request.id,\n                stage: 'Submission',\n                status: 'Completed',\n                handledBy: currentAccount().id,\n                comments: 'Request submitted',\n                created: new Date().toISOString(),\n                completedAt: new Date().toISOString()\n            };\n            workflows.push(initialWorkflow);\n            \n            // create next workflow stage\n            const nextWorkflow = {\n                id: newWorkflowId(),\n                requestId: request.id,\n                stage: 'Review',\n                status: 'Pending',\n                comments: 'Pending review',\n                created: new Date().toISOString()\n            };\n            workflows.push(nextWorkflow);\n            \n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok(request);\n        }\n        \n        function updateRequest() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n            \n            const requester = employees.find(e => e.id === request.requesterId);\n            const requesterAccount = requester ? accounts.find(a => a.id === requester.accountId) : null;\n            const requesterAccountId = requesterAccount ? requesterAccount.id : null;\n            \n            // check if user is authorized to update this request\n            if (!isAdmin() && !isModerator() && currentAccount().id !== requesterAccountId)\n                return unauthorized();\n                \n            // regular users cannot assign requests\n            if (body.assignedTo && body.assignedTo !== request.assignedTo && !isAdmin() && !isModerator())\n                return unauthorized();\n                \n            // copy body properties to request\n            Object.assign(request, body);\n            request.updated = new Date().toISOString();\n            \n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            \n            return ok(request);\n        }\n        \n        function changeRequestStatus() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n            \n            const requester = employees.find(e => e.id === request.requesterId);\n            const requesterAccount = requester ? accounts.find(a => a.id === requester.accountId) : null;\n            const requesterAccountId = requesterAccount ? requesterAccount.id : null;\n            \n            const assignee = request.assignedTo ? employees.find(e => e.id === request.assignedTo) : null;\n            const assigneeAccount = assignee ? accounts.find(a => a.id === assignee.accountId) : null;\n            const assigneeAccountId = assigneeAccount ? assigneeAccount.id : null;\n            \n            // check if user is authorized to change status\n            if (!isAdmin() && !isModerator() && \n                currentAccount().id !== requesterAccountId && \n                currentAccount().id !== assigneeAccountId)\n                return unauthorized();\n                \n            // regular users can only cancel their own requests\n            if (!isAdmin() && !isModerator() && \n                currentAccount().id === requesterAccountId && \n                body.status !== 'Cancelled')\n                return unauthorized();\n                \n            // only assignees, moderators, and admins can change to statuses other than 'Cancelled'\n            if (!isAdmin() && !isModerator() && \n                currentAccount().id !== assigneeAccountId && \n                body.status !== 'Cancelled')\n                return unauthorized();\n                \n            const oldStatus = request.status;\n            \n            // update request status\n            request.status = body.status;\n            request.updated = new Date().toISOString();\n            \n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            \n            // find current workflow stage\n            const currentWorkflow = workflows.find(x => \n                x.requestId === request.id && x.status === 'Pending');\n                \n            if (currentWorkflow) {\n                // update current workflow stage\n                currentWorkflow.status = 'Completed';\n                currentWorkflow.handledBy = currentAccount().id;\n                currentWorkflow.comments = body.comments;\n                currentWorkflow.completedAt = new Date().toISOString();\n                currentWorkflow.updated = new Date().toISOString();\n                \n                // create next workflow stage if needed\n                if (body.status !== 'Completed' && body.status !== 'Rejected' && body.status !== 'Cancelled') {\n                    let nextStage;\n                    switch (currentWorkflow.stage) {\n                        case 'Review':\n                            nextStage = 'Processing';\n                            break;\n                        case 'Processing':\n                            nextStage = 'Approval';\n                            break;\n                        case 'Approval':\n                            nextStage = 'Implementation';\n                            break;\n                        case 'Implementation':\n                            nextStage = 'Verification';\n                            break;\n                        default:\n                            nextStage = 'Completion';\n                    }\n                    \n                    const nextWorkflow = {\n                        id: newWorkflowId(),\n                        requestId: request.id,\n                        stage: nextStage,\n                        status: 'Pending',\n                        comments: `Pending ${nextStage.toLowerCase()}`,\n                        created: new Date().toISOString()\n                    };\n                    workflows.push(nextWorkflow);\n                }\n                \n                localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            }\n            \n            return ok({\n                request,\n                statusChanged: oldStatus !== body.status\n            });\n        }\n        \n        function deleteRequest() {\n            if (!isAuthenticated()) return unauthorized();\n            if (!isAdmin() && !isModerator()) return unauthorized();\n            \n            requests = requests.filter(x => x.id !== idFromUrl());\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            \n            // delete associated workflows\n            workflows = workflows.filter(x => x.requestId !== idFromUrl());\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok();\n        }\n\n        // helper functions\n        function ok(body?) {\n            return of(new HttpResponse({ status: 200, body }))\n                .pipe(delay(500)); // delay observable to simulate server api call\n        }\n\n        function error(message) {\n            return throwError({ error: { message } })\n                .pipe(materialize(), delay(500), dematerialize()); // call materialize and dematerialize to ensure delay even if an error is thrown\n        }\n\n        function unauthorized() {\n            return throwError({ status: 401, error: { message: 'Unauthorized' } })\n                .pipe(materialize(), delay(500), dematerialize());\n        }\n        \n        function notFound() {\n            return throwError({ status: 404, error: { message: 'Not Found' } })\n                .pipe(materialize(), delay(500), dematerialize());\n        }\n\n        function basicDetails(account) {\n            const { id, title, firstName, lastName, email, role, created, updated, isVerified, status } = account;\n            return { id, title, firstName, lastName, email, role, created, updated, isVerified, status };\n        }\n\n        function isAuthenticated() {\n            return !!currentAccount();\n        }\n\n        function isAdmin() {\n            const account = currentAccount();\n            return account && account.role === Role.Admin;\n        }\n        \n        function isModerator() {\n            const account = currentAccount();\n            return account && account.role === Role.Moderator;\n        }\n        \n        function isAuthorized(role) {\n            const account = currentAccount();\n            return account && account.role === role;\n        }\n\n        function currentAccount() {\n            // check if jwt token exists and is valid\n            if (!headers.get('Authorization')) return;\n            \n            // check if jwt token is valid\n            const jwtToken = JSON.parse(atob(headers.get('Authorization').split('.')[1]));\n            const tokenExpired = Date.now() > (jwtToken.exp * 1000);\n            if (tokenExpired) return;\n\n            // check if user still exists\n            const id = parseInt(jwtToken.id);\n            return accounts.find(x => x.id === id);\n        }\n\n        function idFromUrl() {\n            const urlParts = url.split('/');\n            return parseInt(urlParts[urlParts.length - 1]);\n        }\n\n        function newAccountId() {\n            return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n        }\n        \n        function newEmployeeId() {\n            return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n        }\n        \n        function newDepartmentId() {\n            return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n        }\n        \n        function newRequestId() {\n            return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n        }\n        \n        function newWorkflowId() {\n            return workflows.length ? Math.max(...workflows.map(x => x.id)) + 1 : 1;\n        }\n\n        function generateJwtToken(account) {\n            // create token that expires in 15 minutes\n            const tokenPayload = { \n                exp: Math.round(new Date(Date.now() + 15 * 60 * 1000).getTime() / 1000),\n                id: account.id\n            }\n            return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;\n        }\n\n        function generateRefreshToken() {\n            const token = new Date().getTime().toString();\n\n            // add token cookie that expires in 7 days\n            const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString();\n            document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/`;\n\n            return token;\n        }\n\n        function getRefreshToken() {\n            // get refresh token from cookie\n            return document.cookie.split(';').find(x => x.includes('fakeRefreshToken'))?.split('=')[1];\n        }\n    }\n}\n\nexport const fakeBackendProvider = {\n    // use fake backend in place of Http service for backend-less development\n    provide: HTTP_INTERCEPTORS,\n    useClass: FakeBackendInterceptor,\n    multi: true\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}