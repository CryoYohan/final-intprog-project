{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [{\n  id: 1,\n  name: 'HR',\n  description: 'Human Resources'\n}, {\n  id: 2,\n  name: 'IT',\n  description: 'Information Technology'\n}, {\n  id: 3,\n  name: 'Finance',\n  description: 'Finance Department'\n}, {\n  id: 4,\n  name: 'Marketing',\n  description: 'Marketing Department'\n}];\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [{\n  id: 1,\n  name: 'Manager',\n  description: 'Department Manager'\n}, {\n  id: 2,\n  name: 'Team Lead',\n  description: 'Team Leader'\n}, {\n  id: 3,\n  name: 'Senior Staff',\n  description: 'Senior Level Staff'\n}, {\n  id: 4,\n  name: 'Junior Staff',\n  description: 'Junior Level Staff'\n}];\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [{\n  id: 1,\n  name: 'Leave Request',\n  description: 'Request for leave or time off'\n}, {\n  id: 2,\n  name: 'Equipment Request',\n  description: 'Request for office equipment'\n}, {\n  id: 3,\n  name: 'Training Request',\n  description: 'Request for training or workshops'\n}, {\n  id: 4,\n  name: 'Other',\n  description: 'Other types of requests'\n}];\n// Helper functions for generating IDs\nfunction newAccountId() {\n  return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n}\nfunction newRequestId() {\n  return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n}\nfunction newRequestItemId() {\n  return requestItems.length ? Math.max(...requestItems.map(x => x.id)) + 1 : 1;\n}\nfunction newEmployeeId() {\n  return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n}\nfunction newWorkflowId() {\n  return workflows.length ? Math.max(...workflows.map(x => x.id)) + 1 : 1;\n}\nfunction newDepartmentId() {\n  return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n}\nfunction newPositionId() {\n  return positions.length ? Math.max(...positions.map(x => x.id)) + 1 : 1;\n}\nfunction newRequestTypeId() {\n  return requestTypes.length ? Math.max(...requestTypes.map(x => x.id)) + 1 : 1;\n}\n// Helper functions for JWT and refresh tokens\nfunction generateJwtToken(account) {\n  const header = btoa(JSON.stringify({\n    alg: 'HS256',\n    typ: 'JWT'\n  }));\n  const now = new Date().getTime();\n  const payload = btoa(JSON.stringify({\n    id: account.id,\n    role: account.role,\n    email: account.email,\n    iat: now,\n    exp: now + 15 * 60 * 1000 // 15 minutes expiry\n  }));\n\n  const signature = btoa('fake-jwt-secret-key');\n  return `${header}.${payload}.${signature}`;\n}\nfunction generateRefreshToken() {\n  const header = btoa(JSON.stringify({\n    alg: 'HS256',\n    typ: 'JWT'\n  }));\n  const now = new Date().getTime();\n  const payload = btoa(JSON.stringify({\n    id: Math.random().toString(36).substr(2),\n    iat: now,\n    exp: now + 7 * 24 * 60 * 60 * 1000 // 7 days expiry\n  }));\n\n  const signature = btoa('fake-refresh-secret-key');\n  return `${header}.${payload}.${signature}`;\n}\nfunction isTokenExpired(token) {\n  try {\n    const parts = token.split('.');\n    if (parts.length !== 3) return true;\n    const payload = JSON.parse(atob(parts[1]));\n    if (!payload || !payload.exp) return true;\n    return payload.exp < new Date().getTime();\n  } catch (_a) {\n    return true;\n  }\n}\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      // Helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        }));\n      }\n      function error(message) {\n        return throwError(() => ({\n          error: {\n            message\n          }\n        }));\n      }\n      function unauthorized() {\n        return throwError(() => ({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }));\n      }\n      function notFound() {\n        return throwError(() => ({\n          status: 404,\n          error: {\n            message: 'Not Found'\n          }\n        }));\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status,\n          isVerified\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status,\n          isVerified\n        };\n      }\n      function isAuthenticated() {\n        const authHeader = headers.get('Authorization');\n        if (!(authHeader === null || authHeader === void 0 ? void 0 : authHeader.startsWith('Bearer '))) return false;\n        try {\n          const token = authHeader.split(' ')[1];\n          if (isTokenExpired(token)) return false;\n          const parts = token.split('.');\n          const payload = JSON.parse(atob(parts[1]));\n          return !!accounts.find(x => x.id === payload.id);\n        } catch (_a) {\n          return false;\n        }\n      }\n      function isAdmin() {\n        var _a;\n        return ((_a = currentAccount()) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n      }\n      function currentAccount() {\n        if (!isAuthenticated()) return null;\n        try {\n          const token = headers.get('Authorization').split(' ')[1];\n          const parts = token.split('.');\n          const payload = JSON.parse(atob(parts[1]));\n          return accounts.find(x => x.id === payload.id);\n        } catch (_a) {\n          return null;\n        }\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function getRefreshToken(headers) {\n        try {\n          const authHeader = headers.get('Authorization');\n          if (!(authHeader === null || authHeader === void 0 ? void 0 : authHeader.startsWith('Bearer '))) return null;\n          return authHeader.split(' ')[1];\n        } catch (_a) {\n          return null;\n        }\n      }\n      function getWorkflowsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const internalId = parseInt(url.split('/').pop());\n        console.log('Looking for requests with employeeId:', internalId);\n        const employee = employees.find(e => e.id === internalId);\n        if (!employee) {\n          console.log('Employee not found with internal id:', internalId);\n          return notFound();\n        }\n        const employeeRequests = requests.filter(x => x.employeeId === employee.id);\n        console.log('Found requests:', employeeRequests.length);\n        // Sort requests in descending order by creation date\n        const sortedRequests = [...employeeRequests].sort((a, b) => {\n          const dateA = new Date(a.createdDate);\n          const dateB = new Date(b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          const account = accounts.find(a => a.id === employee.accountId);\n          // Format employee name with proper capitalization\n          const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n          const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n          const fullName = `${firstName} ${lastName}`.trim();\n          return {\n            id: request.id,\n            type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type,\n            status: request.status,\n            createdDate: request.createdDate,\n            items: items,\n            employee: {\n              id: employee.id,\n              employeeId: employee.employeeId,\n              fullName: fullName\n            }\n          };\n        }));\n      }\n      return handleRoute().pipe(delay(500), materialize(), dematerialize());\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case url.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case url.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case url.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case url.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case url.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          case url.endsWith('/accounts') && method === 'POST':\n            return createAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n            return updateAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n            return deleteAccount();\n          // request routes\n          case url.endsWith('/requests') && method === 'GET':\n            return getRequests();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return getRequestById();\n          case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n            return getRequestsByEmployeeId();\n          case url.endsWith('/requests/my-requests') && method === 'GET':\n            return getMyRequests();\n          case url.endsWith('/requests') && method === 'POST':\n            return createRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return updateRequest();\n          case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n            return changeRequestStatus();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n            return deleteRequest();\n          // employee routes\n          case url.endsWith('/employees') && method === 'GET':\n            return getEmployees();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n            return getEmployeeById();\n          case url.endsWith('/employees') && method === 'POST':\n            return createEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n            return updateEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n            return deleteEmployee();\n          case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n            return transferEmployee();\n          // department routes\n          case url.endsWith('/departments') && method === 'GET':\n            return getDepartments();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n            return getDepartmentById();\n          case url.endsWith('/departments') && method === 'POST':\n            return createDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n            return updateDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n            return deleteDepartment();\n          // position routes\n          case url.endsWith('/positions') && method === 'GET':\n            return getPositions();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n            return getPositionById();\n          case url.endsWith('/positions') && method === 'POST':\n            return createPosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n            return updatePosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n            return deletePosition();\n          // request type routes\n          case url.endsWith('/request-types') && method === 'GET':\n            return getRequestTypes();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n            return getRequestTypeById();\n          case url.endsWith('/request-types') && method === 'POST':\n            return createRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n            return updateRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n            return deleteRequestType();\n          // workflow routes\n          case url.endsWith('/workflows') && method === 'GET':\n            return getWorkflows();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n            return getWorkflowById();\n          case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByEmployeeId();\n          case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByRequestId();\n          case url.endsWith('/workflows') && method === 'POST':\n            return createWorkflow();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n            return updateWorkflow();\n          case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n            return updateWorkflowStatus();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflow();\n          case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflowItem();\n          default:\n            return next.handle(request);\n        }\n      }\n      // Authentication functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) return error('Email or password is incorrect');\n        if (password !== account.password) return error('Email or password is incorrect');\n        if (!account.isVerified) return error('Please verify your email before logging in');\n        // Generate refresh token that expires in 7 days\n        const refreshToken = generateRefreshToken();\n        account.refreshTokens = account.refreshTokens || [];\n        // Remove any expired refresh tokens\n        account.refreshTokens = account.refreshTokens.filter(rt => !isTokenExpired(rt));\n        account.refreshTokens.push(refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account),\n          refreshToken\n        }));\n      }\n      function refreshToken() {\n        try {\n          const refreshToken = getRefreshToken(headers);\n          if (!refreshToken) return unauthorized();\n          const account = accounts.find(x => {\n            var _a;\n            return (_a = x.refreshTokens) === null || _a === void 0 ? void 0 : _a.includes(refreshToken);\n          });\n          if (!account) return unauthorized();\n          // Verify refresh token hasn't expired\n          if (isTokenExpired(refreshToken)) {\n            // Remove expired refresh token\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n            return unauthorized();\n          }\n          // Generate new tokens\n          const newRefreshToken = generateRefreshToken();\n          account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n          account.refreshTokens.push(newRefreshToken);\n          localStorage.setItem(accountsKey, JSON.stringify(accounts));\n          return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n            jwtToken: generateJwtToken(account),\n            refreshToken: newRefreshToken\n          }));\n        } catch (error) {\n          console.error('Refresh token error:', error);\n          return unauthorized();\n        }\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken(headers);\n        const account = accounts.find(x => {\n          var _a;\n          return (_a = x.refreshTokens) === null || _a === void 0 ? void 0 : _a.includes(refreshToken);\n        });\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // display email already registered message in alert\n          setTimeout(() => {\n            alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, {\n              autoclose: false\n            });\n          }, 1000);\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // first registered account is an admin\n          account.role = Role.Admin;\n          account.status = 'Active'; // Admin accounts get active status\n        } else {\n          account.role = Role.User;\n          account.status = 'Inactive'; // User accounts get inacitve status upon creation\n        }\n\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display verification email in alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoclose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can get own profile and admin accounts can get all profiles\n        if (account.id !== currentAccount().id && !isAdmin()) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      // Request functions\n      function getRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        // Return all requests for admins, or filtered for regular users\n        let filteredRequests = [...requests];\n        if (!isAdmin()) {\n          const currentUserId = currentAccount().id;\n          filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n        }\n        return ok(filteredRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const requestEmployee = employees.find(e => e.id === request.employeeId);\n          const requestAccount = accounts.find(a => a.id === (requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.accountId));\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return {\n            id: request.id,\n            employeeId: (requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.employeeId) || '',\n            type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type || '',\n            status: request.status,\n            createdDate: request.createdDate,\n            items: items,\n            employee: {\n              id: requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.id,\n              employeeId: requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.employeeId,\n              fullName: requestAccount ? `${requestAccount.firstName} ${requestAccount.lastName}`.trim() : ''\n            }\n          };\n        }));\n      }\n      function getRequestById() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        // Check authorization\n        if (!isAdmin() && request.employeeId !== currentAccount().id) {\n          return unauthorized();\n        }\n        // Add related data\n        const items = requestItems.filter(item => item.requestId === request.id);\n        const employee = employees.find(e => e.id === request.employeeId);\n        const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        // Format employee name with proper capitalization\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: items.map(item => ({\n            id: item.id,\n            name: item.name,\n            quantity: item.quantity\n          })),\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            fullName: fullName,\n            employeeId: employee.employeeId\n          }) : null,\n          type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type\n        }));\n      }\n      function getRequestsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const internalId = parseInt(url.split('/').pop());\n        console.log('Looking for requests with employeeId:', internalId);\n        const employee = employees.find(e => e.id === internalId);\n        if (!employee) {\n          console.log('Employee not found with internal id:', internalId);\n          return notFound();\n        }\n        const employeeRequests = requests.filter(x => x.employeeId === employee.id);\n        console.log('Found requests:', employeeRequests.length);\n        // Sort requests in descending order by creation date\n        const sortedRequests = [...employeeRequests].sort((a, b) => {\n          const dateA = new Date(a.createdDate);\n          const dateB = new Date(b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          const account = accounts.find(a => a.id === employee.accountId);\n          // Format employee name with proper capitalization\n          const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n          const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n          const fullName = `${firstName} ${lastName}`.trim();\n          return {\n            id: request.id,\n            type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type,\n            status: request.status,\n            createdDate: request.createdDate,\n            items: items,\n            employee: {\n              id: employee.id,\n              employeeId: employee.employeeId,\n              fullName: fullName\n            }\n          };\n        }));\n      }\n      function getMyRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        const currentUserId = currentAccount().id;\n        const myRequests = requests.filter(x => x.employeeId === currentUserId);\n        return ok(myRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const employee = employees.find(e => e.id === request.employeeId);\n          const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return Object.assign(Object.assign({}, request), {\n            items,\n            employee: employee ? Object.assign(Object.assign({}, employee), {\n              fullName: `${(account === null || account === void 0 ? void 0 : account.firstName) || ''} ${(account === null || account === void 0 ? void 0 : account.lastName) || ''}`.trim(),\n              employeeId: employee.employeeId\n            }) : null,\n            type: requestType ? requestType.name : request.type\n          });\n        }));\n      }\n      function createRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        console.log('Received request data:', body);\n        // Find employee by employeeId\n        let targetEmployee;\n        if (body.employeeId) {\n          // Try to find by internal ID first\n          targetEmployee = employees.find(e => e.id === Number(body.employeeId));\n          // If not found by internal ID, try to find by employee ID string\n          if (!targetEmployee) {\n            targetEmployee = employees.find(e => e.employeeId === body.employeeId);\n          }\n          if (!targetEmployee) {\n            console.log('Employee not found for ID:', body.employeeId);\n            return error('Employee not found');\n          }\n        } else {\n          // If no employeeId provided, use current user\n          const currentUser = currentAccount();\n          targetEmployee = employees.find(e => e.accountId === currentUser.id);\n          if (!targetEmployee) {\n            console.log('No employee found for current user');\n            return error('Current user is not an employee');\n          }\n        }\n        console.log('Target employee found:', targetEmployee);\n        const request = {\n          id: newRequestId(),\n          employeeId: targetEmployee.id,\n          typeId: body.typeId ? Number(body.typeId) : null,\n          type: body.type,\n          description: body.description || '',\n          status: 'Pending',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Validate required fields\n        if (!request.type && !request.typeId) {\n          return error('Request type is required');\n        }\n        // Validate and process items if present\n        let requestItemsList = [];\n        if (body.items && Array.isArray(body.items)) {\n          try {\n            requestItemsList = body.items.map(item => {\n              if (!item.name || !item.quantity) {\n                throw new Error('Invalid item data');\n              }\n              return {\n                id: newRequestItemId(),\n                requestId: request.id,\n                name: item.name,\n                quantity: Number(item.quantity)\n              };\n            });\n          } catch (error) {\n            return error('Invalid item data provided');\n          }\n        }\n        // Save request and items\n        requests.push(request);\n        if (requestItemsList.length > 0) {\n          requestItems.push(...requestItemsList);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        const account = accounts.find(a => a.id === targetEmployee.accountId);\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        console.log('Created request:', Object.assign(Object.assign({}, request), {\n          employee: {\n            id: targetEmployee.id,\n            employeeId: targetEmployee.employeeId,\n            fullName: fullName\n          }\n        }));\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItemsList,\n          employee: {\n            id: targetEmployee.id,\n            employeeId: targetEmployee.employeeId,\n            fullName: fullName\n          }\n        }));\n      }\n      function updateRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        console.log('Received update data:', body);\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Update basic request fields\n        Object.assign(request, {\n          type: body.type,\n          description: body.description || request.description,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Handle item changes\n        if (body.items) {\n          // Remove all existing items for this request\n          requestItems = requestItems.filter(item => item.requestId !== requestId);\n          // Add new/updated items\n          const newItems = body.items.map(item => ({\n            id: item.id || newRequestItemId(),\n            requestId: requestId,\n            name: item.name,\n            quantity: Number(item.quantity)\n          }));\n          requestItems.push(...newItems);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // Get related data for response\n        const employee = employees.find(e => e.id === request.employeeId);\n        const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === requestId),\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            fullName: fullName,\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function changeRequestStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        const newStatus = body.status;\n        if (!newStatus) return error('Status is required');\n        // Update request\n        request.status = newStatus;\n        request.lastModifiedDate = new Date().toISOString();\n        // Update requests array\n        const requestIndex = requests.findIndex(x => x.id === requestId);\n        requests[requestIndex] = request;\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // Get related data for response\n        const employee = employees.find(e => e.id === request.employeeId);\n        const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        const items = requestItems.filter(item => item.requestId === request.id);\n        // Format employee name\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type,\n          items: items,\n          employee: employee ? {\n            id: employee.id,\n            employeeId: employee.employeeId,\n            fullName: fullName\n          } : null\n        }));\n      }\n      function deleteRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Delete request and its items\n        requests = requests.filter(x => x.id !== requestId);\n        requestItems = requestItems.filter(x => x.requestId !== requestId);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        return ok();\n      }\n      // Employee functions\n      function getEmployees() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(employees.map(employee => {\n          const department = departments.find(d => d.id === employee.departmentId);\n          const account = accounts.find(a => a.id === employee.accountId);\n          // Format names with proper capitalization\n          const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n          const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n          return Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId,\n            fullName: `${firstName} ${lastName}`.trim(),\n            departmentName: (department === null || department === void 0 ? void 0 : department.name) || '',\n            department: department ? {\n              id: department.id,\n              name: department.name,\n              description: department.description\n            } : null,\n            account: account ? basicDetails(account) : null\n          });\n        }));\n      }\n      function getEmployeeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employee = employees.find(x => x.id === employeeId);\n        if (!employee) return notFound();\n        // Get fresh department data\n        const department = departments.find(d => d.id === employee.departmentId);\n        if (!department) return error('Department not found');\n        const account = accounts.find(a => a.id === employee.accountId);\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        // Return complete employee data with fresh relations\n        return ok(Object.assign(Object.assign({}, employee), {\n          employeeId: employee.employeeId,\n          fullName: `${firstName} ${lastName}`.trim(),\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function createEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        // Log the received data for debugging\n        console.log('Received employee data:', body);\n        // Check if employee ID already exists\n        if (employees.find(x => x.employeeId === body.employeeId)) {\n          return error('Employee ID already exists');\n        }\n        // Validate department exists\n        const department = departments.find(d => d.id === Number(body.departmentId));\n        if (!department) return error('Department not found');\n        // Validate account exists and isn't already assigned to an employee\n        const account = accounts.find(a => a.id === Number(body.accountId));\n        if (!account) return error('Account not found');\n        if (employees.find(e => e.accountId === Number(body.accountId))) {\n          return error('Account is already assigned to another employee');\n        }\n        const employee = {\n          id: newEmployeeId(),\n          accountId: Number(body.accountId),\n          employeeId: body.employeeId,\n          departmentId: Number(body.departmentId),\n          position: body.position,\n          hireDate: body.hireDate,\n          salary: Number(body.salary),\n          status: body.status || 'Active',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Check each required field individually and log the result\n        const requiredFields = {\n          accountId: !!employee.accountId,\n          employeeId: !!employee.employeeId,\n          departmentId: !!employee.departmentId,\n          position: !!employee.position,\n          hireDate: !!employee.hireDate,\n          salary: !!employee.salary\n        };\n        console.log('Field validation results:', requiredFields);\n        // Check if any required field is missing\n        const missingFields = Object.entries(requiredFields).filter(([_, isValid]) => !isValid).map(([fieldName]) => fieldName);\n        if (missingFields.length > 0) {\n          return error(`Required fields are missing: ${missingFields.join(', ')}`);\n        }\n        // Format names\n        const firstName = account.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = account.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        // Create workflow entry for new employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employee.id,\n          type: 'Added',\n          details: {\n            task: `New employee ${employee.employeeId} was added`,\n            additionalInfo: `Added to ${department.name} department as ${employee.position}`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(employee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employee), {\n          fullName: `${firstName} ${lastName}`.trim(),\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          }\n        }));\n      }\n      function updateEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const oldEmployee = employees[employeeIndex];\n        const updatedEmployee = Object.assign(Object.assign(Object.assign({}, oldEmployee), body), {\n          id: employeeId,\n          accountId: body.accountId ? Number(body.accountId) : oldEmployee.accountId,\n          departmentId: body.departmentId ? Number(body.departmentId) : oldEmployee.departmentId,\n          position: body.position || oldEmployee.position,\n          salary: body.salary ? Number(body.salary) : oldEmployee.salary,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department exists if changed\n        if (body.departmentId) {\n          const department = departments.find(d => d.id === updatedEmployee.departmentId);\n          if (!department) return error('Department not found');\n        }\n        // Validate account exists if changed\n        if (body.accountId) {\n          const account = accounts.find(a => a.id === updatedEmployee.accountId);\n          if (!account) return error('Account not found');\n        }\n        const department = departments.find(d => d.id === updatedEmployee.departmentId);\n        const account = accounts.find(a => a.id === updatedEmployee.accountId);\n        // Create workflow entry for updated employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Updated',\n          details: {\n            task: `Employee ${employeeId} was updated`,\n            additionalInfo: `Updated in ${department.name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(updatedEmployee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedEmployee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function deleteEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const employee = employees[employeeIndex];\n        // Delete employee\n        employees = employees.filter(x => x.id !== employeeId);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(Object.assign(Object.assign({}, employee), {\n          status: 'Deleted'\n        }));\n      }\n      function transferEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        // Find the employee and their index\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const employee = employees[employeeIndex];\n        const oldDepartmentId = employee.departmentId;\n        const newDepartmentId = Number(body.departmentId);\n        // Validate departments exist\n        const oldDepartment = departments.find(d => d.id === oldDepartmentId);\n        const newDepartment = departments.find(d => d.id === newDepartmentId);\n        if (!oldDepartment || !newDepartment) return error('Department not found');\n        // Don't do anything if the department hasn't changed\n        if (oldDepartmentId === newDepartmentId) {\n          return error('Employee is already in this department');\n        }\n        // Create updated employee object\n        const updatedEmployee = Object.assign(Object.assign({}, employee), {\n          departmentId: newDepartmentId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Update the employees array by replacing the old employee with the updated one\n        employees.splice(employeeIndex, 1, updatedEmployee);\n        // Get employee account for name\n        const account = accounts.find(a => a.id === employee.accountId);\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        // Create workflow entry for transfer\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Transferred',\n          details: {\n            task: `Employee ${employee.employeeId} was transferred`,\n            additionalInfo: `From ${oldDepartment.name} to ${newDepartment.name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        workflows.push(workflow);\n        // Save changes\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedEmployee), {\n          fullName: `${firstName} ${lastName}`.trim(),\n          departmentName: newDepartment.name,\n          department: {\n            id: newDepartment.id,\n            name: newDepartment.name,\n            description: newDepartment.description\n          }\n        }));\n      }\n      // Department functions\n      function getDepartments() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(departments.map(department => {\n          return Object.assign(Object.assign({}, department), {\n            id: department.id.toString(),\n            name: department.name,\n            description: department.description\n          });\n        }));\n      }\n      function getDepartmentById() {\n        if (!isAuthenticated()) return unauthorized();\n        const departmentId = idFromUrl();\n        const department = departments.find(x => x.id === departmentId);\n        if (!department) return notFound();\n        return ok(Object.assign(Object.assign({}, department), {\n          id: department.id.toString(),\n          name: department.name,\n          description: department.description\n        }));\n      }\n      function createDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const department = body;\n        // Validate department name is unique\n        if (departments.find(x => x.name === department.name)) {\n          return error('Department name already exists');\n        }\n        // Assign department id and save\n        department.id = newDepartmentId();\n        departments.push(department);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, department), {\n          id: department.id.toString()\n        }));\n      }\n      function updateDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        const oldDepartment = departments[departmentIndex];\n        const updatedDepartment = Object.assign(Object.assign(Object.assign({}, oldDepartment), body), {\n          id: departmentId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department name is unique\n        if (departments.find(x => x.name === updatedDepartment.name && x.id !== updatedDepartment.id)) {\n          return error('Department name already exists');\n        }\n        departments.push(updatedDepartment);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, updatedDepartment), {\n          id: updatedDepartment.id.toString()\n        }));\n      }\n      function deleteDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        const department = departments[departmentIndex];\n        // Delete department\n        departments = departments.filter(x => x.id !== departmentId);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, department), {\n          status: 'Deleted'\n        }));\n      }\n      // Position functions\n      function getPositions() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(positions.map(position => {\n          return Object.assign(Object.assign({}, position), {\n            id: position.id.toString(),\n            name: position.name,\n            description: position.description\n          });\n        }));\n      }\n      function getPositionById() {\n        if (!isAuthenticated()) return unauthorized();\n        const positionId = idFromUrl();\n        const position = positions.find(x => x.id === positionId);\n        if (!position) return notFound();\n        return ok(Object.assign(Object.assign({}, position), {\n          id: position.id.toString(),\n          name: position.name,\n          description: position.description\n        }));\n      }\n      function createPosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const position = body;\n        // Validate position name is unique\n        if (positions.find(x => x.name === position.name)) {\n          return error('Position name already exists');\n        }\n        // Assign position id and save\n        position.id = newPositionId();\n        positions.push(position);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, position), {\n          id: position.id.toString()\n        }));\n      }\n      function updatePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        const oldPosition = positions[positionIndex];\n        const updatedPosition = Object.assign(Object.assign(Object.assign({}, oldPosition), body), {\n          id: positionId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate position name is unique\n        if (positions.find(x => x.name === updatedPosition.name && x.id !== updatedPosition.id)) {\n          return error('Position name already exists');\n        }\n        positions.push(updatedPosition);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, updatedPosition), {\n          id: updatedPosition.id.toString()\n        }));\n      }\n      function deletePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        const position = positions[positionIndex];\n        // Delete position\n        positions = positions.filter(x => x.id !== positionId);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, position), {\n          status: 'Deleted'\n        }));\n      }\n      // Request type functions\n      function getRequestTypes() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(requestTypes.map(type => {\n          return Object.assign(Object.assign({}, type), {\n            id: type.id.toString(),\n            name: type.name,\n            description: type.description\n          });\n        }));\n      }\n      function getRequestTypeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const typeId = idFromUrl();\n        const type = requestTypes.find(x => x.id === typeId);\n        if (!type) return notFound();\n        return ok(Object.assign(Object.assign({}, type), {\n          id: type.id.toString(),\n          name: type.name,\n          description: type.description\n        }));\n      }\n      function createRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const type = body;\n        // Validate request type name is unique\n        if (requestTypes.find(x => x.name === type.name)) {\n          return error('Request type name already exists');\n        }\n        // Assign request type id and save\n        type.id = newRequestTypeId();\n        requestTypes.push(type);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, type), {\n          id: type.id.toString()\n        }));\n      }\n      function updateRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const typeId = idFromUrl();\n        const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n        if (typeIndex === -1) return notFound();\n        const oldType = requestTypes[typeIndex];\n        const updatedType = Object.assign(Object.assign(Object.assign({}, oldType), body), {\n          id: typeId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate request type name is unique\n        if (requestTypes.find(x => x.name === updatedType.name && x.id !== updatedType.id)) {\n          return error('Request type name already exists');\n        }\n        requestTypes.push(updatedType);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, updatedType), {\n          id: updatedType.id.toString()\n        }));\n      }\n      function deleteRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const typeId = idFromUrl();\n        const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n        if (typeIndex === -1) return notFound();\n        const type = requestTypes[typeIndex];\n        // Delete request type\n        requestTypes = requestTypes.filter(x => x.id !== typeId);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, type), {\n          status: 'Deleted'\n        }));\n      }\n      // Workflow functions\n      function getWorkflows() {\n        if (!isAuthenticated()) return unauthorized();\n        // Sort workflows in descending order by creation date\n        const sortedWorkflows = [...workflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function getWorkflowById() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflow = workflows.find(x => x.id === idFromUrl());\n        if (!workflow) return notFound();\n        const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n        return ok({\n          id: workflow.id.toString(),\n          type: workflow.type,\n          details: details,\n          status: workflow.status,\n          datetimecreated: workflow.datetimecreated || workflow.createdDate\n        });\n      }\n      function getWorkflowsByRequestId() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        console.log('Looking for workflows with requestId:', requestId);\n        const request = requests.find(x => x.id === requestId);\n        if (!request) {\n          console.log('Request not found with id:', requestId);\n          return notFound();\n        }\n        const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n        console.log('Found workflows:', requestWorkflows.length);\n        // Sort workflows in descending order\n        const sortedWorkflows = [...requestWorkflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function createWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        console.log('Received workflow data:', body);\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: body.employeeId,\n          type: body.type,\n          details: body.details,\n          status: body.status,\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Validate required fields\n        const requiredFields = {\n          employeeId: !!workflow.employeeId,\n          type: !!workflow.type,\n          details: !!workflow.details,\n          status: !!workflow.status\n        };\n        console.log('Field validation results:', requiredFields);\n        // Check if any required field is missing\n        const missingFields = Object.entries(requiredFields).filter(([_, isValid]) => !isValid).map(([fieldName]) => fieldName);\n        if (missingFields.length > 0) {\n          return error(`Required fields are missing: ${missingFields.join(', ')}`);\n        }\n        // Validate employee exists\n        const employee = employees.find(e => e.id === workflow.employeeId);\n        if (!employee) return error('Employee not found');\n        employees.push(workflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function updateWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        const oldWorkflow = workflows[workflowIndex];\n        const updatedWorkflow = Object.assign(Object.assign(Object.assign({}, oldWorkflow), body), {\n          id: workflowId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate employee exists\n        const employee = employees.find(e => e.id === updatedWorkflow.employeeId);\n        if (!employee) return error('Employee not found');\n        employees.push(updatedWorkflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedWorkflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function updateWorkflowStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        const newStatus = body.status;\n        Object.assign(workflow, {\n          status: newStatus,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          status: newStatus\n        }));\n      }\n      function deleteWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        const workflow = workflows[workflowIndex];\n        const employee = employees.find(e => e.id === workflow.employeeId);\n        // Delete workflow\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function deleteWorkflowItem() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        // Delete workflow item\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          status: 'Deleted'\n        }));\n      }\n      function createAccount() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          return error('Email already exists');\n        }\n        account.id = newAccountId();\n        account.dateCreated = new Date().toISOString();\n        account.isVerified = true;\n        account.refreshTokens = [];\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      function updateAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        const accountId = idFromUrl();\n        const account = accounts.find(x => x.id === accountId);\n        if (!account) return notFound();\n        if (account.id !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Only allow admins to update role\n        if (!isAdmin()) {\n          delete body.role;\n        }\n        // If email is being changed, make sure it's not already taken\n        if (body.email && body.email !== account.email && accounts.find(x => x.email === body.email)) {\n          return error('Email already exists');\n        }\n        Object.assign(account, body);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      function deleteAccount() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const accountId = idFromUrl();\n        const account = accounts.find(x => x.id === accountId);\n        if (!account) return notFound();\n        if (account.id === currentAccount().id) return error('You cannot delete your own account');\n        accounts = accounts.filter(x => x.id !== accountId);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","materialize","dematerialize","Role","accountsKey","accounts","JSON","parse","localStorage","getItem","employeesKey","employees","departmentsKey","departments","id","name","description","requestsKey","requests","requestItemsKey","requestItems","workflowsKey","workflows","positionsKey","positions","requestTypesKey","requestTypes","newAccountId","length","Math","max","map","x","newRequestId","newRequestItemId","newEmployeeId","newWorkflowId","newDepartmentId","newPositionId","newRequestTypeId","generateJwtToken","account","header","btoa","stringify","alg","typ","now","Date","getTime","payload","role","email","iat","exp","signature","generateRefreshToken","random","toString","substr","isTokenExpired","token","parts","split","atob","FakeBackendInterceptor","constructor","alertService","intercept","request","next","url","method","headers","body","ok","status","error","message","unauthorized","notFound","basicDetails","title","firstName","lastName","isVerified","isAuthenticated","authHeader","get","startsWith","find","isAdmin","Admin","currentAccount","idFromUrl","urlParts","parseInt","getRefreshToken","getWorkflowsByEmployeeId","internalId","pop","console","log","employee","e","employeeRequests","filter","employeeId","sortedRequests","sort","a","b","dateA","createdDate","dateB","items","item","requestId","requestType","t","typeId","accountId","charAt","toUpperCase","slice","toLowerCase","fullName","trim","type","handleRoute","pipe","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","getAccounts","match","getAccountById","createAccount","updateAccount","deleteAccount","getRequests","getRequestById","getRequestsByEmployeeId","getMyRequests","createRequest","updateRequest","changeRequestStatus","deleteRequest","getEmployees","getEmployeeById","createEmployee","updateEmployee","deleteEmployee","transferEmployee","getDepartments","getDepartmentById","createDepartment","updateDepartment","deleteDepartment","getPositions","getPositionById","createPosition","updatePosition","deletePosition","getRequestTypes","getRequestTypeById","createRequestType","updateRequestType","deleteRequestType","getWorkflows","getWorkflowById","getWorkflowsByRequestId","createWorkflow","updateWorkflow","updateWorkflowStatus","deleteWorkflow","deleteWorkflowItem","handle","password","refreshTokens","rt","push","setItem","jwtToken","includes","newRefreshToken","setTimeout","info","location","origin","autoclose","User","dateCreated","toISOString","verificationToken","confirmPassword","verifyUrl","filteredRequests","currentUserId","requestEmployee","requestAccount","quantity","Object","myRequests","targetEmployee","Number","currentUser","lastModifiedDate","requestItemsList","Array","isArray","Error","assign","newItems","newStatus","requestIndex","findIndex","department","d","departmentId","departmentName","position","hireDate","salary","requiredFields","missingFields","entries","_","isValid","fieldName","join","workflow","details","task","additionalInfo","employeeIndex","oldEmployee","updatedEmployee","oldDepartmentId","oldDepartment","newDepartment","splice","departmentIndex","updatedDepartment","positionId","positionIndex","oldPosition","updatedPosition","typeIndex","oldType","updatedType","sortedWorkflows","datetimecreated","requestWorkflows","workflowId","workflowIndex","oldWorkflow","updatedWorkflow","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\n\nimport { AlertService } from '@app/_services';\nimport { Role } from '@app/_models';\n\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [\n    { id: 1, name: 'HR', description: 'Human Resources' },\n    { id: 2, name: 'IT', description: 'Information Technology' },\n    { id: 3, name: 'Finance', description: 'Finance Department' },\n    { id: 4, name: 'Marketing', description: 'Marketing Department' }\n];\n\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [\n    { id: 1, name: 'Manager', description: 'Department Manager' },\n    { id: 2, name: 'Team Lead', description: 'Team Leader' },\n    { id: 3, name: 'Senior Staff', description: 'Senior Level Staff' },\n    { id: 4, name: 'Junior Staff', description: 'Junior Level Staff' }\n];\n\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [\n    { id: 1, name: 'Leave Request', description: 'Request for leave or time off' },\n    { id: 2, name: 'Equipment Request', description: 'Request for office equipment' },\n    { id: 3, name: 'Training Request', description: 'Request for training or workshops' },\n    { id: 4, name: 'Other', description: 'Other types of requests' }\n];\n\n// Helper functions for generating IDs\nfunction newAccountId(): number {\n    return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n}\n\nfunction newRequestId(): number {\n    return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n}\n\nfunction newRequestItemId(): number {\n    return requestItems.length ? Math.max(...requestItems.map(x => x.id)) + 1 : 1;\n}\n\nfunction newEmployeeId(): number {\n    return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n}\n\nfunction newWorkflowId(): number {\n    return workflows.length ? Math.max(...workflows.map(x => x.id)) + 1 : 1;\n}\n\nfunction newDepartmentId(): number {\n    return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n}\n\nfunction newPositionId(): number {\n    return positions.length ? Math.max(...positions.map(x => x.id)) + 1 : 1;\n}\n\nfunction newRequestTypeId(): number {\n    return requestTypes.length ? Math.max(...requestTypes.map(x => x.id)) + 1 : 1;\n}\n\n// Helper functions for JWT and refresh tokens\nfunction generateJwtToken(account: any): string {\n    const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));\n    const now = new Date().getTime();\n    const payload = btoa(JSON.stringify({\n        id: account.id,\n        role: account.role,\n        email: account.email,\n        iat: now,\n        exp: now + (15 * 60 * 1000) // 15 minutes expiry\n    }));\n    const signature = btoa('fake-jwt-secret-key');\n    return `${header}.${payload}.${signature}`;\n}\n\nfunction generateRefreshToken(): string {\n    const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));\n    const now = new Date().getTime();\n    const payload = btoa(JSON.stringify({\n        id: Math.random().toString(36).substr(2),\n        iat: now,\n        exp: now + (7 * 24 * 60 * 60 * 1000) // 7 days expiry\n    }));\n    const signature = btoa('fake-refresh-secret-key');\n    return `${header}.${payload}.${signature}`;\n}\n\nfunction isTokenExpired(token: string): boolean {\n    try {\n        const parts = token.split('.');\n        if (parts.length !== 3) return true;\n        \n        const payload = JSON.parse(atob(parts[1]));\n        if (!payload || !payload.exp) return true;\n        \n        return payload.exp < new Date().getTime();\n    } catch {\n        return true;\n    }\n}\n\n@Injectable()\nexport class FakeBackendInterceptor implements HttpInterceptor {\n    constructor(private alertService: AlertService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { url, method, headers, body } = request;\n        const alertService = this.alertService;\n\n        // Helper functions\n        function ok(body?: any) {\n            return of(new HttpResponse({ status: 200, body }));\n        }\n\n        function error(message: string) {\n            return throwError(() => ({ error: { message } }));\n        }\n\n        function unauthorized() {\n            return throwError(() => ({ status: 401, error: { message: 'Unauthorized' } }));\n        }\n\n        function notFound() {\n            return throwError(() => ({ status: 404, error: { message: 'Not Found' } }));\n        }\n\n        function basicDetails(account: any) {\n            const { id, title, firstName, lastName, email, role, status, isVerified } = account;\n            return { id, title, firstName, lastName, email, role, status, isVerified };\n        }\n\n        function isAuthenticated() {\n            const authHeader = headers.get('Authorization');\n            if (!authHeader?.startsWith('Bearer ')) return false;\n            \n            try {\n                const token = authHeader.split(' ')[1];\n                if (isTokenExpired(token)) return false;\n                \n                const parts = token.split('.');\n                const payload = JSON.parse(atob(parts[1]));\n                return !!accounts.find(x => x.id === payload.id);\n            } catch {\n                return false;\n            }\n        }\n\n        function isAdmin() {\n            return currentAccount()?.role === Role.Admin;\n        }\n\n        function currentAccount() {\n            if (!isAuthenticated()) return null;\n            \n            try {\n                const token = headers.get('Authorization').split(' ')[1];\n                const parts = token.split('.');\n                const payload = JSON.parse(atob(parts[1]));\n                return accounts.find(x => x.id === payload.id);\n            } catch {\n                return null;\n            }\n        }\n\n        function idFromUrl() {\n            const urlParts = url.split('/');\n            return parseInt(urlParts[urlParts.length - 1]);\n        }\n\n        function getRefreshToken(headers: any): string | null {\n            try {\n                const authHeader = headers.get('Authorization');\n                if (!authHeader?.startsWith('Bearer ')) return null;\n                return authHeader.split(' ')[1];\n            } catch {\n                return null;\n            }\n        }\n\n        function getWorkflowsByEmployeeId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const internalId = parseInt(url.split('/').pop());\n            console.log('Looking for requests with employeeId:', internalId);\n\n            const employee = employees.find(e => e.id === internalId);\n            if (!employee) {\n                console.log('Employee not found with internal id:', internalId);\n                return notFound();\n            }\n            \n            const employeeRequests = requests.filter(x => x.employeeId === employee.id);\n            console.log('Found requests:', employeeRequests.length);\n\n            // Sort requests in descending order by creation date\n            const sortedRequests = [...employeeRequests].sort((a, b) => {\n                const dateA = new Date(a.createdDate);\n                const dateB = new Date(b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                const account = accounts.find(a => a.id === employee.accountId);\n                \n                // Format employee name with proper capitalization\n                const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n                const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n                const fullName = `${firstName} ${lastName}`.trim();\n\n                return {\n                    id: request.id,\n                    type: requestType?.name || request.type,\n                    status: request.status,\n                    createdDate: request.createdDate,\n                    items: items,\n                    employee: {\n                        id: employee.id,\n                        employeeId: employee.employeeId,\n                        fullName: fullName\n                    }\n                };\n            }));\n        }\n\n        return handleRoute().pipe(\n            delay(500),\n            materialize(),\n            dematerialize()\n        );\n\n        function handleRoute() {\n            switch (true) {\n                case url.endsWith('/accounts/authenticate') && method === 'POST':\n                    return authenticate();\n                case url.endsWith('/accounts/refresh-token') && method === 'POST':\n                    return refreshToken();\n                case url.endsWith('/accounts/revoke-token') && method === 'POST':\n                    return revokeToken();\n                case url.endsWith('/accounts/register') && method === 'POST':\n                    return register();\n                case url.endsWith('/accounts/verify-email') && method === 'POST':\n                    return verifyEmail();\n                case url.endsWith('/accounts') && method === 'GET':\n                    return getAccounts();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n                    return getAccountById();\n                case url.endsWith('/accounts') && method === 'POST':\n                    return createAccount();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n                    return updateAccount();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n                    return deleteAccount();\n                    \n                // request routes\n                case url.endsWith('/requests') && method === 'GET':\n                    return getRequests();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n                    return getRequestById();\n                case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n                    return getRequestsByEmployeeId();\n                case url.endsWith('/requests/my-requests') && method === 'GET':\n                    return getMyRequests();\n                case url.endsWith('/requests') && method === 'POST':\n                    return createRequest();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n                    return updateRequest();\n                case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n                    return changeRequestStatus();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequest();\n                    \n                // employee routes\n                case url.endsWith('/employees') && method === 'GET':\n                    return getEmployees();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n                    return getEmployeeById();\n                case url.endsWith('/employees') && method === 'POST':\n                    return createEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n                    return updateEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n                    return deleteEmployee();\n                case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n                    return transferEmployee();\n\n                // department routes\n                case url.endsWith('/departments') && method === 'GET':\n                    return getDepartments();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n                    return getDepartmentById();\n                case url.endsWith('/departments') && method === 'POST':\n                    return createDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n                    return updateDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n                    return deleteDepartment();\n                    \n                // position routes\n                case url.endsWith('/positions') && method === 'GET':\n                    return getPositions();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n                    return getPositionById();\n                case url.endsWith('/positions') && method === 'POST':\n                    return createPosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n                    return updatePosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n                    return deletePosition();\n\n                // request type routes\n                case url.endsWith('/request-types') && method === 'GET':\n                    return getRequestTypes();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n                    return getRequestTypeById();\n                case url.endsWith('/request-types') && method === 'POST':\n                    return createRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n                    return updateRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequestType();\n\n                // workflow routes\n                case url.endsWith('/workflows') && method === 'GET':\n                    return getWorkflows();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n                    return getWorkflowById();\n                case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByEmployeeId();\n                case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByRequestId();\n                case url.endsWith('/workflows') && method === 'POST':\n                    return createWorkflow();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n                    return updateWorkflow();\n                case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n                    return updateWorkflowStatus();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflow();\n                case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflowItem();\n                    \n                default:\n                    return next.handle(request);\n            }\n        }\n\n        // Authentication functions\n        function authenticate() {\n            const { email, password } = body;\n            const account = accounts.find(x => x.email === email);\n        \n            if (!account) return error('Email or password is incorrect');\n            if (password !== account.password) return error('Email or password is incorrect');\n            if (!account.isVerified) return error('Please verify your email before logging in');\n\n            // Generate refresh token that expires in 7 days\n            const refreshToken = generateRefreshToken();\n            account.refreshTokens = account.refreshTokens || [];\n            \n            // Remove any expired refresh tokens\n            account.refreshTokens = account.refreshTokens.filter(rt => !isTokenExpired(rt));\n            \n            account.refreshTokens.push(refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account),\n                refreshToken\n            });\n        }\n\n        function refreshToken() {\n            try {\n                const refreshToken = getRefreshToken(headers);\n                if (!refreshToken) return unauthorized();\n\n                const account = accounts.find(x => x.refreshTokens?.includes(refreshToken));\n                if (!account) return unauthorized();\n\n                // Verify refresh token hasn't expired\n                if (isTokenExpired(refreshToken)) {\n                    // Remove expired refresh token\n                    account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n                    localStorage.setItem(accountsKey, JSON.stringify(accounts));\n                    return unauthorized();\n                }\n\n                // Generate new tokens\n                const newRefreshToken = generateRefreshToken();\n                account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n                account.refreshTokens.push(newRefreshToken);\n                localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n                return ok({\n                    ...basicDetails(account),\n                    jwtToken: generateJwtToken(account),\n                    refreshToken: newRefreshToken\n                });\n            } catch (error) {\n                console.error('Refresh token error:', error);\n                return unauthorized();\n            }\n        }\n\n        function revokeToken() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const refreshToken = getRefreshToken(headers);\n            const account = accounts.find(x => x.refreshTokens?.includes(refreshToken));\n\n            // revoke token and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function register() {\n            const account = body;\n\n            if (accounts.find(x => x.email === account.email)) {\n                // display email already registered message in alert\n                setTimeout(() => {\n                    alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, { autoclose: false });\n                }, 1000);\n\n                // always return ok() response to prevent email enumeration\n                return ok();\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            if (account.id === 1) {\n                // first registered account is an admin\n                account.role = Role.Admin;\n                account.status = 'Active'; // Admin accounts get active status\n            } else {\n                account.role = Role.User;\n                account.status = 'Inactive'; // User accounts get inacitve status upon creation\n            }\n            account.dateCreated = new Date().toISOString();\n            account.verificationToken = new Date().getTime().toString();\n            account.isVerified = false;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // display verification email in alert\n            setTimeout(() => {\n                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, { autoclose: false });\n            }, 1000);\n\n            return ok();\n        }\n\n        function verifyEmail() {\n            const { token } = body;\n            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n\n            if (!account) return error('Verification failed');\n\n            // set is verified flag to true if token is valid\n            account.isVerified = true;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function getAccounts() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(accounts.map(x => basicDetails(x)));\n        }\n\n        function getAccountById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let account = accounts.find(x => x.id === idFromUrl());\n\n            // user accounts can get own profile and admin accounts can get all profiles\n            if (account.id !== currentAccount().id && !isAdmin()) {\n                return unauthorized();\n            }\n\n            return ok(basicDetails(account));\n        }\n\n        // Request functions\n        function getRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            // Return all requests for admins, or filtered for regular users\n            let filteredRequests = [...requests];\n            if (!isAdmin()) {\n                const currentUserId = currentAccount().id;\n                filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n            }\n\n            return ok(filteredRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const requestEmployee = employees.find(e => e.id === request.employeeId);\n                const requestAccount = accounts.find(a => a.id === requestEmployee?.accountId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n\n                return {\n                    id: request.id,\n                    employeeId: requestEmployee?.employeeId || '',\n                    type: requestType?.name || request.type || '',\n                    status: request.status,\n                    createdDate: request.createdDate,\n                    items: items,\n                    employee: {\n                        id: requestEmployee?.id,\n                        employeeId: requestEmployee?.employeeId,\n                        fullName: requestAccount ? `${requestAccount.firstName} ${requestAccount.lastName}`.trim() : ''\n                    }\n                };\n            }));\n        }\n\n        function getRequestById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            // Check authorization\n            if (!isAdmin() && request.employeeId !== currentAccount().id) {\n                return unauthorized();\n            }\n\n            // Add related data\n            const items = requestItems.filter(item => item.requestId === request.id);\n            const employee = employees.find(e => e.id === request.employeeId);\n            const account = accounts.find(a => a.id === employee?.accountId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n\n            // Format employee name with proper capitalization\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                items: items.map(item => ({\n                    id: item.id,\n                    name: item.name,\n                    quantity: item.quantity\n                })),\n                employee: employee ? {\n                    ...employee,\n                    fullName: fullName,\n                    employeeId: employee.employeeId\n                } : null,\n                type: requestType?.name || request.type\n            });\n        }\n\n        function getRequestsByEmployeeId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const internalId = parseInt(url.split('/').pop());\n            console.log('Looking for requests with employeeId:', internalId);\n\n            const employee = employees.find(e => e.id === internalId);\n            if (!employee) {\n                console.log('Employee not found with internal id:', internalId);\n                return notFound();\n            }\n            \n            const employeeRequests = requests.filter(x => x.employeeId === employee.id);\n            console.log('Found requests:', employeeRequests.length);\n\n            // Sort requests in descending order by creation date\n            const sortedRequests = [...employeeRequests].sort((a, b) => {\n                const dateA = new Date(a.createdDate);\n                const dateB = new Date(b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                const account = accounts.find(a => a.id === employee.accountId);\n                \n                // Format employee name with proper capitalization\n                const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n                const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n                const fullName = `${firstName} ${lastName}`.trim();\n\n                return {\n                    id: request.id,\n                    type: requestType?.name || request.type,\n                    status: request.status,\n                    createdDate: request.createdDate,\n                    items: items,\n                    employee: {\n                        id: employee.id,\n                        employeeId: employee.employeeId,\n                        fullName: fullName\n                    }\n                };\n            }));\n        }\n\n        function getMyRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const currentUserId = currentAccount().id;\n            const myRequests = requests.filter(x => x.employeeId === currentUserId);\n\n            return ok(myRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const employee = employees.find(e => e.id === request.employeeId);\n                const account = accounts.find(a => a.id === employee?.accountId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                return {\n                    ...request,\n                    items,\n                    employee: employee ? {\n                        ...employee,\n                        fullName: `${account?.firstName || ''} ${account?.lastName || ''}`.trim(),\n                        employeeId: employee.employeeId\n                    } : null,\n                    type: requestType ? requestType.name : request.type\n                };\n            }));\n        }\n\n        function createRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            console.log('Received request data:', body);\n\n            // Find employee by employeeId\n            let targetEmployee;\n            if (body.employeeId) {\n                // Try to find by internal ID first\n                targetEmployee = employees.find(e => e.id === Number(body.employeeId));\n                \n                // If not found by internal ID, try to find by employee ID string\n                if (!targetEmployee) {\n                    targetEmployee = employees.find(e => e.employeeId === body.employeeId);\n                }\n                \n                if (!targetEmployee) {\n                    console.log('Employee not found for ID:', body.employeeId);\n                    return error('Employee not found');\n                }\n            } else {\n                // If no employeeId provided, use current user\n                const currentUser = currentAccount();\n                targetEmployee = employees.find(e => e.accountId === currentUser.id);\n                if (!targetEmployee) {\n                    console.log('No employee found for current user');\n                    return error('Current user is not an employee');\n                }\n            }\n\n            console.log('Target employee found:', targetEmployee);\n\n            const request = {\n                id: newRequestId(),\n                employeeId: targetEmployee.id,\n                typeId: body.typeId ? Number(body.typeId) : null,\n                type: body.type,\n                description: body.description || '',\n                status: 'Pending',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            // Validate required fields\n            if (!request.type && !request.typeId) {\n                return error('Request type is required');\n            }\n\n            // Validate and process items if present\n            let requestItemsList = [];\n            if (body.items && Array.isArray(body.items)) {\n                try {\n                    requestItemsList = body.items.map(item => {\n                        if (!item.name || !item.quantity) {\n                            throw new Error('Invalid item data');\n                        }\n                        return {\n                            id: newRequestItemId(),\n                            requestId: request.id,\n                            name: item.name,\n                            quantity: Number(item.quantity)\n                        };\n                    });\n                } catch (error) {\n                    return error('Invalid item data provided');\n                }\n            }\n\n            // Save request and items\n            requests.push(request);\n            if (requestItemsList.length > 0) {\n                requestItems.push(...requestItemsList);\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n            }\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            const account = accounts.find(a => a.id === targetEmployee.accountId);\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            console.log('Created request:', {\n                ...request,\n                employee: {\n                    id: targetEmployee.id,\n                    employeeId: targetEmployee.employeeId,\n                    fullName: fullName\n                }\n            });\n\n            return ok({\n                ...request,\n                items: requestItemsList,\n                employee: {\n                    id: targetEmployee.id,\n                    employeeId: targetEmployee.employeeId,\n                    fullName: fullName\n                }\n            });\n        }\n\n        function updateRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            console.log('Received update data:', body);\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Update basic request fields\n            Object.assign(request, {\n                type: body.type,\n                description: body.description || request.description,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            // Handle item changes\n            if (body.items) {\n                // Remove all existing items for this request\n                requestItems = requestItems.filter(item => item.requestId !== requestId);\n\n                // Add new/updated items\n                const newItems = body.items.map(item => ({\n                    id: item.id || newRequestItemId(),\n                    requestId: requestId,\n                    name: item.name,\n                    quantity: Number(item.quantity)\n                }));\n\n                requestItems.push(...newItems);\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n            }\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            // Get related data for response\n            const employee = employees.find(e => e.id === request.employeeId);\n            const account = accounts.find(a => a.id === employee?.accountId);\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                items: requestItems.filter(item => item.requestId === requestId),\n                employee: employee ? {\n                    ...employee,\n                    fullName: fullName,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function changeRequestStatus() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n            \n            if (!request) return notFound();\n\n            const newStatus = body.status;\n            if (!newStatus) return error('Status is required');\n\n            // Update request\n            request.status = newStatus;\n            request.lastModifiedDate = new Date().toISOString();\n\n            // Update requests array\n            const requestIndex = requests.findIndex(x => x.id === requestId);\n            requests[requestIndex] = request;\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            // Get related data for response\n            const employee = employees.find(e => e.id === request.employeeId);\n            const account = accounts.find(a => a.id === employee?.accountId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n            const items = requestItems.filter(item => item.requestId === request.id);\n\n            // Format employee name\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                type: requestType?.name || request.type,\n                items: items,\n                employee: employee ? {\n                    id: employee.id,\n                    employeeId: employee.employeeId,\n                    fullName: fullName\n                } : null\n            });\n        }\n\n        function deleteRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Delete request and its items\n            requests = requests.filter(x => x.id !== requestId);\n            requestItems = requestItems.filter(x => x.requestId !== requestId);\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n\n            return ok();\n        }\n\n        // Employee functions\n        function getEmployees() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(employees.map(employee => {\n                const department = departments.find(d => d.id === employee.departmentId);\n                const account = accounts.find(a => a.id === employee.accountId);\n                \n                // Format names with proper capitalization\n                const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n                const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n                \n                return {\n                    ...employee,\n                    employeeId: employee.employeeId,\n                    fullName: `${firstName} ${lastName}`.trim(),\n                    departmentName: department?.name || '',\n                    department: department ? {\n                        id: department.id,\n                        name: department.name,\n                        description: department.description\n                    } : null,\n                    account: account ? basicDetails(account) : null\n                };\n            }));\n        }\n\n        function getEmployeeById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employee = employees.find(x => x.id === employeeId);\n            \n            if (!employee) return notFound();\n            \n            // Get fresh department data\n            const department = departments.find(d => d.id === employee.departmentId);\n            if (!department) return error('Department not found');\n            \n            const account = accounts.find(a => a.id === employee.accountId);\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            \n            // Return complete employee data with fresh relations\n            return ok({\n                ...employee,\n                employeeId: employee.employeeId,\n                fullName: `${firstName} ${lastName}`.trim(),\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function createEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            // Log the received data for debugging\n            console.log('Received employee data:', body);\n\n            // Check if employee ID already exists\n            if (employees.find(x => x.employeeId === body.employeeId)) {\n                return error('Employee ID already exists');\n            }\n\n            // Validate department exists\n            const department = departments.find(d => d.id === Number(body.departmentId));\n            if (!department) return error('Department not found');\n\n            // Validate account exists and isn't already assigned to an employee\n            const account = accounts.find(a => a.id === Number(body.accountId));\n            if (!account) return error('Account not found');\n            if (employees.find(e => e.accountId === Number(body.accountId))) {\n                return error('Account is already assigned to another employee');\n            }\n\n            const employee = {\n                id: newEmployeeId(),\n                accountId: Number(body.accountId),\n                employeeId: body.employeeId,\n                departmentId: Number(body.departmentId),\n                position: body.position,\n                hireDate: body.hireDate,\n                salary: Number(body.salary),\n                status: body.status || 'Active',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Check each required field individually and log the result\n            const requiredFields = {\n                accountId: !!employee.accountId,\n                employeeId: !!employee.employeeId,\n                departmentId: !!employee.departmentId,\n                position: !!employee.position,\n                hireDate: !!employee.hireDate,\n                salary: !!employee.salary\n            };\n            \n            console.log('Field validation results:', requiredFields);\n            \n            // Check if any required field is missing\n            const missingFields = Object.entries(requiredFields)\n                .filter(([_, isValid]) => !isValid)\n                .map(([fieldName]) => fieldName);\n            \n            if (missingFields.length > 0) {\n                return error(`Required fields are missing: ${missingFields.join(', ')}`);\n            }\n\n            // Format names\n            const firstName = account.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            \n            // Create workflow entry for new employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employee.id,\n                type: 'Added',\n                details: {\n                    task: `New employee ${employee.employeeId} was added`,\n                    additionalInfo: `Added to ${department.name} department as ${employee.position}`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(employee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...employee,\n                fullName: `${firstName} ${lastName}`.trim(),\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                }\n            });\n        }\n\n        function updateEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const oldEmployee = employees[employeeIndex];\n            const updatedEmployee = {\n                ...oldEmployee,\n                ...body,\n                id: employeeId,\n                accountId: body.accountId ? Number(body.accountId) : oldEmployee.accountId,\n                departmentId: body.departmentId ? Number(body.departmentId) : oldEmployee.departmentId,\n                position: body.position || oldEmployee.position,\n                salary: body.salary ? Number(body.salary) : oldEmployee.salary,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate department exists if changed\n            if (body.departmentId) {\n                const department = departments.find(d => d.id === updatedEmployee.departmentId);\n                if (!department) return error('Department not found');\n            }\n\n            // Validate account exists if changed\n            if (body.accountId) {\n                const account = accounts.find(a => a.id === updatedEmployee.accountId);\n                if (!account) return error('Account not found');\n            }\n            \n            const department = departments.find(d => d.id === updatedEmployee.departmentId);\n            const account = accounts.find(a => a.id === updatedEmployee.accountId);\n            \n            // Create workflow entry for updated employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Updated',\n                details: {\n                    task: `Employee ${employeeId} was updated`,\n                    additionalInfo: `Updated in ${department.name} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(updatedEmployee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...updatedEmployee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function deleteEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const employee = employees[employeeIndex];\n            \n            // Delete employee\n            employees = employees.filter(x => x.id !== employeeId);\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            \n            return ok({\n                ...employee,\n                status: 'Deleted'\n            });\n        }\n\n        function transferEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const employeeId = idFromUrl();\n            \n            // Find the employee and their index\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            if (employeeIndex === -1) return notFound();\n            \n            const employee = employees[employeeIndex];\n            const oldDepartmentId = employee.departmentId;\n            const newDepartmentId = Number(body.departmentId);\n            \n            // Validate departments exist\n            const oldDepartment = departments.find(d => d.id === oldDepartmentId);\n            const newDepartment = departments.find(d => d.id === newDepartmentId);\n            if (!oldDepartment || !newDepartment) return error('Department not found');\n\n            // Don't do anything if the department hasn't changed\n            if (oldDepartmentId === newDepartmentId) {\n                return error('Employee is already in this department');\n            }\n\n            // Create updated employee object\n            const updatedEmployee = {\n                ...employee,\n                departmentId: newDepartmentId,\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            // Update the employees array by replacing the old employee with the updated one\n            employees.splice(employeeIndex, 1, updatedEmployee);\n            \n            // Get employee account for name\n            const account = accounts.find(a => a.id === employee.accountId);\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            \n            // Create workflow entry for transfer\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Transferred',\n                details: {\n                    task: `Employee ${employee.employeeId} was transferred`,\n                    additionalInfo: `From ${oldDepartment.name} to ${newDepartment.name} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            workflows.push(workflow);\n            \n            // Save changes\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...updatedEmployee,\n                fullName: `${firstName} ${lastName}`.trim(),\n                departmentName: newDepartment.name,\n                department: {\n                    id: newDepartment.id,\n                    name: newDepartment.name,\n                    description: newDepartment.description\n                }\n            });\n        }\n\n        // Department functions\n        function getDepartments() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(departments.map(department => {\n                return {\n                    ...department,\n                    id: department.id.toString(),\n                    name: department.name,\n                    description: department.description\n                };\n            }));\n        }\n\n        function getDepartmentById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            const department = departments.find(x => x.id === departmentId);\n            \n            if (!department) return notFound();\n            \n            return ok({\n                ...department,\n                id: department.id.toString(),\n                name: department.name,\n                description: department.description\n            });\n        }\n\n        function createDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const department = body;\n            \n            // Validate department name is unique\n            if (departments.find(x => x.name === department.name)) {\n                return error('Department name already exists');\n            }\n            \n            // Assign department id and save\n            department.id = newDepartmentId();\n            departments.push(department);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...department,\n                id: department.id.toString()\n            });\n        }\n\n        function updateDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\n            \n            if (departmentIndex === -1) return notFound();\n            \n            const oldDepartment = departments[departmentIndex];\n            const updatedDepartment = {\n                ...oldDepartment,\n                ...body,\n                id: departmentId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate department name is unique\n            if (departments.find(x => x.name === updatedDepartment.name && x.id !== updatedDepartment.id)) {\n                return error('Department name already exists');\n            }\n\n            departments.push(updatedDepartment);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...updatedDepartment,\n                id: updatedDepartment.id.toString()\n            });\n        }\n\n        function deleteDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const departmentId = idFromUrl();\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\n            \n            if (departmentIndex === -1) return notFound();\n            \n            const department = departments[departmentIndex];\n            \n            // Delete department\n            departments = departments.filter(x => x.id !== departmentId);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...department,\n                status: 'Deleted'\n            });\n        }\n\n        // Position functions\n        function getPositions() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(positions.map(position => {\n                return {\n                    ...position,\n                    id: position.id.toString(),\n                    name: position.name,\n                    description: position.description\n                };\n            }));\n        }\n\n        function getPositionById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            const position = positions.find(x => x.id === positionId);\n            \n            if (!position) return notFound();\n            \n            return ok({\n                ...position,\n                id: position.id.toString(),\n                name: position.name,\n                description: position.description\n            });\n        }\n\n        function createPosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const position = body;\n            \n            // Validate position name is unique\n            if (positions.find(x => x.name === position.name)) {\n                return error('Position name already exists');\n            }\n            \n            // Assign position id and save\n            position.id = newPositionId();\n            positions.push(position);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...position,\n                id: position.id.toString()\n            });\n        }\n\n        function updatePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            const positionIndex = positions.findIndex(x => x.id === positionId);\n            \n            if (positionIndex === -1) return notFound();\n            \n            const oldPosition = positions[positionIndex];\n            const updatedPosition = {\n                ...oldPosition,\n                ...body,\n                id: positionId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate position name is unique\n            if (positions.find(x => x.name === updatedPosition.name && x.id !== updatedPosition.id)) {\n                return error('Position name already exists');\n            }\n\n            positions.push(updatedPosition);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...updatedPosition,\n                id: updatedPosition.id.toString()\n            });\n        }\n\n        function deletePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const positionId = idFromUrl();\n            const positionIndex = positions.findIndex(x => x.id === positionId);\n            \n            if (positionIndex === -1) return notFound();\n            \n            const position = positions[positionIndex];\n            \n            // Delete position\n            positions = positions.filter(x => x.id !== positionId);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...position,\n                status: 'Deleted'\n            });\n        }\n\n        // Request type functions\n        function getRequestTypes() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(requestTypes.map(type => {\n                return {\n                    ...type,\n                    id: type.id.toString(),\n                    name: type.name,\n                    description: type.description\n                };\n            }));\n        }\n\n        function getRequestTypeById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const typeId = idFromUrl();\n            const type = requestTypes.find(x => x.id === typeId);\n            \n            if (!type) return notFound();\n            \n            return ok({\n                ...type,\n                id: type.id.toString(),\n                name: type.name,\n                description: type.description\n            });\n        }\n\n        function createRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const type = body;\n            \n            // Validate request type name is unique\n            if (requestTypes.find(x => x.name === type.name)) {\n                return error('Request type name already exists');\n            }\n            \n            // Assign request type id and save\n            type.id = newRequestTypeId();\n            requestTypes.push(type);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...type,\n                id: type.id.toString()\n            });\n        }\n\n        function updateRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const typeId = idFromUrl();\n            const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n            \n            if (typeIndex === -1) return notFound();\n            \n            const oldType = requestTypes[typeIndex];\n            const updatedType = {\n                ...oldType,\n                ...body,\n                id: typeId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate request type name is unique\n            if (requestTypes.find(x => x.name === updatedType.name && x.id !== updatedType.id)) {\n                return error('Request type name already exists');\n            }\n\n            requestTypes.push(updatedType);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...updatedType,\n                id: updatedType.id.toString()\n            });\n        }\n\n        function deleteRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const typeId = idFromUrl();\n            const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n            \n            if (typeIndex === -1) return notFound();\n            \n            const type = requestTypes[typeIndex];\n            \n            // Delete request type\n            requestTypes = requestTypes.filter(x => x.id !== typeId);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...type,\n                status: 'Deleted'\n            });\n        }\n\n        // Workflow functions\n        function getWorkflows() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            // Sort workflows in descending order by creation date\n            const sortedWorkflows = [...workflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        function getWorkflowById() {\n            if (!isAuthenticated()) return unauthorized();\n            const workflow = workflows.find(x => x.id === idFromUrl());\n            if (!workflow) return notFound();\n            \n            const details = typeof workflow.details === 'object' ? \n                `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                workflow.details || '';\n\n            return ok({\n                id: workflow.id.toString(),\n                type: workflow.type,\n                details: details,\n                status: workflow.status,\n                datetimecreated: workflow.datetimecreated || workflow.createdDate\n            });\n        }\n\n        function getWorkflowsByRequestId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const requestId = idFromUrl();\n            console.log('Looking for workflows with requestId:', requestId);\n\n            const request = requests.find(x => x.id === requestId);\n            if (!request) {\n                console.log('Request not found with id:', requestId);\n                return notFound();\n            }\n            \n            const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n            console.log('Found workflows:', requestWorkflows.length);\n\n            // Sort workflows in descending order\n            const sortedWorkflows = [...requestWorkflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        function createWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            console.log('Received workflow data:', body);\n\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: body.employeeId,\n                type: body.type,\n                details: body.details,\n                status: body.status,\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate required fields\n            const requiredFields = {\n                employeeId: !!workflow.employeeId,\n                type: !!workflow.type,\n                details: !!workflow.details,\n                status: !!workflow.status\n            };\n            \n            console.log('Field validation results:', requiredFields);\n            \n            // Check if any required field is missing\n            const missingFields = Object.entries(requiredFields)\n                .filter(([_, isValid]) => !isValid)\n                .map(([fieldName]) => fieldName);\n            \n            if (missingFields.length > 0) {\n                return error(`Required fields are missing: ${missingFields.join(', ')}`);\n            }\n\n            // Validate employee exists\n            const employee = employees.find(e => e.id === workflow.employeeId);\n            if (!employee) return error('Employee not found');\n            \n            employees.push(workflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function updateWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const workflowId = idFromUrl();\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n            \n            if (workflowIndex === -1) return notFound();\n            \n            const oldWorkflow = workflows[workflowIndex];\n            const updatedWorkflow = {\n                ...oldWorkflow,\n                ...body,\n                id: workflowId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate employee exists\n            const employee = employees.find(e => e.id === updatedWorkflow.employeeId);\n            if (!employee) return error('Employee not found');\n            \n            employees.push(updatedWorkflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...updatedWorkflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function updateWorkflowStatus() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflow = workflows.find(x => x.id === workflowId);\n            \n            if (!workflow) return notFound();\n            \n            const newStatus = body.status;\n\n            Object.assign(workflow, {\n                status: newStatus,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok({\n                ...workflow,\n                status: newStatus\n            });\n        }\n\n        function deleteWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n            \n            if (workflowIndex === -1) return notFound();\n            \n            const workflow = workflows[workflowIndex];\n            const employee = employees.find(e => e.id === workflow.employeeId);\n            \n            // Delete workflow\n            workflows = workflows.filter(x => x.id !== workflowId);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function deleteWorkflowItem() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflow = workflows.find(x => x.id === workflowId);\n            \n            if (!workflow) return notFound();\n            \n            // Delete workflow item\n            workflows = workflows.filter(x => x.id !== workflowId);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                status: 'Deleted'\n            });\n        }\n\n        function createAccount() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const account = body;\n            \n            if (accounts.find(x => x.email === account.email)) {\n                return error('Email already exists');\n            }\n            \n            account.id = newAccountId();\n            account.dateCreated = new Date().toISOString();\n            account.isVerified = true;\n            account.refreshTokens = [];\n            \n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n            \n            return ok(basicDetails(account));\n        }\n\n        function updateAccount() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const accountId = idFromUrl();\n            const account = accounts.find(x => x.id === accountId);\n            \n            if (!account) return notFound();\n            if (account.id !== currentAccount().id && !isAdmin()) return unauthorized();\n            \n            // Only allow admins to update role\n            if (!isAdmin()) {\n                delete body.role;\n            }\n            \n            // If email is being changed, make sure it's not already taken\n            if (body.email && body.email !== account.email && accounts.find(x => x.email === body.email)) {\n                return error('Email already exists');\n            }\n            \n            Object.assign(account, body);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n            \n            return ok(basicDetails(account));\n        }\n\n        function deleteAccount() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const accountId = idFromUrl();\n            const account = accounts.find(x => x.id === accountId);\n            \n            if (!account) return notFound();\n            if (account.id === currentAccount().id) return error('You cannot delete your own account');\n            \n            accounts = accounts.filter(x => x.id !== accountId);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n            \n            return ok();\n        }\n    }\n}\n\nexport const fakeBackendProvider = {\n    // use fake backend in place of Http service for backend-less development\n    provide: HTTP_INTERCEPTORS,\n    useClass: FakeBackendInterceptor,\n    multi: true\n};"]},"metadata":{},"sourceType":"module","externalDependencies":[]}