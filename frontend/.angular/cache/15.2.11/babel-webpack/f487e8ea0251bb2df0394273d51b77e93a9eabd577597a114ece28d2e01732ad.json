{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { map, finalize, catchError } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/accounts`;\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.refreshingToken = false;\n      this.TOKEN_REFRESH_THRESHOLD = 5 * 60 * 1000; // 5 minutes in milliseconds\n      this.accountSubject = new BehaviorSubject(null);\n      this.account = this.accountSubject.asObservable();\n      this.loadStoredAccount();\n    }\n    loadStoredAccount() {\n      try {\n        const storedAccount = localStorage.getItem('account');\n        if (storedAccount) {\n          const account = JSON.parse(storedAccount);\n          if (this.isTokenValid(account)) {\n            this.accountSubject.next(account);\n            this.startRefreshTokenTimer();\n          } else {\n            // Token is expired or invalid, try to refresh\n            this.refreshToken().subscribe();\n          }\n        }\n      } catch (error) {\n        console.error('Error loading stored account:', error);\n        localStorage.removeItem('account');\n      }\n    }\n    isTokenValid(account) {\n      if (!account || !account.jwtToken) return false;\n      try {\n        const token = account.jwtToken;\n        const tokenData = JSON.parse(atob(token.split('.')[1]));\n        const expirationTime = tokenData.exp * 1000; // Convert to milliseconds\n        // Check if token is expired or about to expire\n        return Date.now() < expirationTime - this.TOKEN_REFRESH_THRESHOLD;\n      } catch (_a) {\n        return false;\n      }\n    }\n    get accountValue() {\n      return this.accountSubject.value;\n    }\n    get userValue() {\n      return this.accountValue;\n    }\n    get isAdmin() {\n      var _a;\n      return ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n    }\n    login(email, password) {\n      return this.http.post(`${baseUrl}/authenticate`, {\n        email,\n        password\n      }, {\n        withCredentials: true\n      }).pipe(map(account => {\n        this.storeAccount(account);\n        this.startRefreshTokenTimer();\n        return account;\n      }), catchError(error => {\n        console.error('Login error:', error);\n        return throwError(() => error);\n      }));\n    }\n    storeAccount(account) {\n      localStorage.setItem('account', JSON.stringify(account));\n      this.accountSubject.next(account);\n    }\n    logout() {\n      this.http.post(`${baseUrl}/revoke-token`, {}, {\n        withCredentials: true\n      }).pipe(finalize(() => {\n        this.clearAccountData();\n      })).subscribe();\n    }\n    clearAccountData() {\n      localStorage.removeItem('account');\n      this.stopRefreshTokenTimer();\n      this.accountSubject.next(null);\n      this.router.navigate(['/account/login']);\n    }\n    refreshToken() {\n      if (this.refreshingToken) {\n        return this.account;\n      }\n      this.refreshingToken = true;\n      return this.http.post(`${baseUrl}/refresh-token`, {}, {\n        withCredentials: true,\n        headers: {\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        }\n      }).pipe(map(account => {\n        if (!account || !account.jwtToken) {\n          throw new Error('Invalid refresh token response');\n        }\n        this.storeAccount(account);\n        this.startRefreshTokenTimer();\n        return account;\n      }), catchError(error => {\n        console.error('Token refresh failed:', error);\n        this.clearAccountData();\n        return throwError(() => new Error('Session expired. Please login again.'));\n      }), finalize(() => {\n        this.refreshingToken = false;\n      }));\n    }\n    register(account) {\n      return this.http.post(`${baseUrl}/register`, account, {\n        observe: 'response'\n      });\n    }\n    verifyEmail(token) {\n      return this.http.post(`${baseUrl}/verify-email`, {\n        token\n      });\n    }\n    forgotPassword(email) {\n      return this.http.post(`${baseUrl}/forgot-password`, {\n        email\n      });\n    }\n    validateResetToken(token) {\n      return this.http.post(`${baseUrl}/validate-reset-token`, {\n        token\n      });\n    }\n    resetPassword(token, password, confirmPassword) {\n      return this.http.post(`${baseUrl}/reset-password`, {\n        token,\n        password,\n        confirmPassword\n      });\n    }\n    getAll() {\n      return this.http.get(baseUrl);\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n    create(params) {\n      return this.http.post(baseUrl, params);\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params).pipe(map(account => {\n        var _a;\n        // update the current account if it was updated\n        if (account.id === ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          // publish updated account to subscribers\n          account = Object.assign(Object.assign({}, this.accountValue), account);\n          this.accountSubject.next(account);\n        }\n        return account;\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`).pipe(map(x => {\n        var _a;\n        // auto logout if the logged in account was deleted\n        if (id === ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          this.logout();\n        }\n        return x;\n      }));\n    }\n    startRefreshTokenTimer() {\n      var _a;\n      if (!((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.jwtToken)) return;\n      try {\n        // Parse the JWT token to get expiration time\n        const token = this.accountValue.jwtToken;\n        const tokenData = JSON.parse(atob(token.split('.')[1]));\n        const expires = new Date(tokenData.exp * 1000);\n        const timeout = expires.getTime() - Date.now() - this.TOKEN_REFRESH_THRESHOLD;\n        // Set up refresh timer\n        this.stopRefreshTokenTimer();\n        if (timeout > 0) {\n          this.refreshTokenTimeout = setTimeout(() => {\n            console.log('Token refresh timer triggered');\n            this.refreshToken().subscribe({\n              error: error => {\n                console.error('Auto refresh token failed:', error);\n                this.clearAccountData();\n              }\n            });\n          }, timeout);\n        } else {\n          // Token is already expired or about to expire, refresh immediately\n          this.refreshToken().subscribe({\n            error: error => {\n              console.error('Immediate token refresh failed:', error);\n              this.clearAccountData();\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error starting refresh token timer:', error);\n        this.clearAccountData();\n      }\n    }\n    stopRefreshTokenTimer() {\n      if (this.refreshTokenTimeout) {\n        clearTimeout(this.refreshTokenTimeout);\n      }\n    }\n  }\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}