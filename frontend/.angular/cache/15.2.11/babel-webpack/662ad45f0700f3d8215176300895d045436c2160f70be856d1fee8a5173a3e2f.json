{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [{\n  id: 1,\n  name: 'HR',\n  description: 'Human Resources'\n}, {\n  id: 2,\n  name: 'IT',\n  description: 'Information Technology'\n}, {\n  id: 3,\n  name: 'Finance',\n  description: 'Finance Department'\n}, {\n  id: 4,\n  name: 'Marketing',\n  description: 'Marketing Department'\n}];\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [{\n  id: 1,\n  name: 'Manager',\n  description: 'Department Manager'\n}, {\n  id: 2,\n  name: 'Team Lead',\n  description: 'Team Leader'\n}, {\n  id: 3,\n  name: 'Senior Staff',\n  description: 'Senior Level Staff'\n}, {\n  id: 4,\n  name: 'Junior Staff',\n  description: 'Junior Level Staff'\n}];\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [{\n  id: 1,\n  name: 'Leave Request',\n  description: 'Request for leave or time off'\n}, {\n  id: 2,\n  name: 'Equipment Request',\n  description: 'Request for office equipment'\n}, {\n  id: 3,\n  name: 'Training Request',\n  description: 'Request for training or workshops'\n}, {\n  id: 4,\n  name: 'Other',\n  description: 'Other types of requests'\n}];\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      return handleRoute().pipe(delay(500),\n      // Simulate server delay\n      materialize(), dematerialize());\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case url.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case url.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case url.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case url.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case url.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          // request routes\n          case url.endsWith('/requests') && method === 'GET':\n            return getRequests();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return getRequestById();\n          case url.endsWith('/requests/my-requests') && method === 'GET':\n            return getMyRequests();\n          case url.endsWith('/requests') && method === 'POST':\n            return createRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return updateRequest();\n          case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n            return changeRequestStatus();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n            return deleteRequest();\n          // employee routes\n          case url.endsWith('/employees') && method === 'GET':\n            return getEmployees();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n            return getEmployeeById();\n          case url.endsWith('/employees') && method === 'POST':\n            return createEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n            return updateEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n            return deleteEmployee();\n          case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n            return transferEmployee();\n          // department routes\n          case url.endsWith('/departments') && method === 'GET':\n            return getDepartments();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n            return getDepartmentById();\n          case url.endsWith('/departments') && method === 'POST':\n            return createDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n            return updateDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n            return deleteDepartment();\n          // position routes\n          case url.endsWith('/positions') && method === 'GET':\n            return getPositions();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n            return getPositionById();\n          case url.endsWith('/positions') && method === 'POST':\n            return createPosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n            return updatePosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n            return deletePosition();\n          // request type routes\n          case url.endsWith('/request-types') && method === 'GET':\n            return getRequestTypes();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n            return getRequestTypeById();\n          case url.endsWith('/request-types') && method === 'POST':\n            return createRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n            return updateRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n            return deleteRequestType();\n          // workflow routes\n          case url.endsWith('/workflows') && method === 'GET':\n            return getWorkflows();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n            return getWorkflowById();\n          case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByEmployeeId();\n          case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByRequestId();\n          case url.endsWith('/workflows') && method === 'POST':\n            return createWorkflow();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n            return updateWorkflow();\n          case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n            return updateWorkflowStatus();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflow();\n          case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflowItem();\n          default:\n            return next.handle(request);\n        }\n      }\n      // Authentication functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) return error('Email or password is incorrect');\n        if (password !== account.password) return error('Email or password is incorrect');\n        if (!account.isVerified) return error('Please verify your email before logging in');\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return unauthorized();\n        const account = accounts.find(x => {\n          var _a;\n          return (_a = x.refreshTokens) === null || _a === void 0 ? void 0 : _a.includes(refreshToken);\n        });\n        if (!account) return unauthorized();\n        // replace old refresh token with a new one\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // display email already registered message in alert\n          setTimeout(() => {\n            alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, {\n              autoclose: false\n            });\n          }, 1000);\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // first registered account is an admin\n          account.role = Role.Admin;\n          account.status = 'Active'; // Admin accounts get active status\n        } else {\n          account.role = Role.User;\n          account.status = 'Inactive'; // User accounts get inacitve status upon creation\n        }\n\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display verification email in alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoclose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can get own profile and admin accounts can get all profiles\n        if (account.id !== currentAccount().id && !isAdmin()) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      // Request functions\n      function getRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        // Return all requests for admins, or filtered for regular users\n        let filteredRequests = [...requests];\n        if (!isAdmin()) {\n          const currentUserId = currentAccount().id;\n          filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n        }\n        return ok(filteredRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const employee = employees.find(e => e.id === request.employeeId);\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return Object.assign(Object.assign({}, request), {\n            items,\n            employee,\n            type: requestType\n          });\n        }));\n      }\n      function getRequestById() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        // Check authorization\n        if (!isAdmin() && request.employeeId !== currentAccount().id) {\n          return unauthorized();\n        }\n        // Add related data\n        const items = requestItems.filter(item => item.requestId === request.id);\n        const employee = employees.find(e => e.id === request.employeeId);\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        return ok(Object.assign(Object.assign({}, request), {\n          items,\n          employee,\n          type: requestType\n        }));\n      }\n      function getMyRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        const currentUserId = currentAccount().id;\n        const myRequests = requests.filter(x => x.employeeId === currentUserId);\n        return ok(myRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const employee = employees.find(e => e.id === request.employeeId);\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return Object.assign(Object.assign({}, request), {\n            items,\n            employee,\n            type: requestType\n          });\n        }));\n      }\n      function createRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        // Validate request type\n        if (!body.typeId || !requestTypes.find(t => t.id === body.typeId)) {\n          return error('Invalid request type');\n        }\n        const request = Object.assign(Object.assign({\n          id: newRequestId(),\n          employeeId: currentAccount().id\n        }, body), {\n          status: 'Pending',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate and process items\n        if (body.items) {\n          if (!Array.isArray(body.items)) {\n            return error('Items must be an array');\n          }\n          const items = body.items.map(item => {\n            if (!item.name || !item.quantity) {\n              throw new Error('Invalid item data');\n            }\n            return {\n              id: newRequestItemId(),\n              requestId: request.id,\n              name: item.name,\n              quantity: parseInt(item.quantity)\n            };\n          });\n          requestItems.push(...items);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        // Create workflow entry for new request\n        const employee = employees.find(e => e.id === request.employeeId);\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: request.employeeId,\n          type: 'Request Created',\n          details: {\n            task: `New ${requestType.name} created by ${employee.firstName} ${employee.lastName}`,\n            additionalInfo: `Request Status: ${request.status}`\n          },\n          status: 'ForReviewing',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        delete request.items; // Remove items from main request object\n        requests.push(request);\n        workflows.push(workflow);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, request), {\n          items: body.items,\n          employee,\n          type: requestType\n        }));\n      }\n      function updateRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Validate request type if changed\n        if (body.typeId && !requestTypes.find(t => t.id === body.typeId)) {\n          return error('Invalid request type');\n        }\n        // Update request\n        Object.assign(request, Object.assign(Object.assign({}, body), {\n          lastModifiedDate: new Date().toISOString()\n        }));\n        // Handle item changes\n        if (body.itemChanges) {\n          try {\n            // Delete items\n            if (body.itemChanges.delete) {\n              requestItems = requestItems.filter(item => item.requestId !== requestId || !body.itemChanges.delete.includes(item.id));\n            }\n            // Update items\n            if (body.itemChanges.update) {\n              body.itemChanges.update.forEach(updatedItem => {\n                if (!updatedItem.name || !updatedItem.quantity) {\n                  throw new Error('Invalid item data');\n                }\n                const item = requestItems.find(x => x.id === updatedItem.id);\n                if (item) {\n                  Object.assign(item, Object.assign(Object.assign({}, updatedItem), {\n                    quantity: parseInt(updatedItem.quantity)\n                  }));\n                }\n              });\n            }\n            // Add new items\n            if (body.itemChanges.add) {\n              const newItems = body.itemChanges.add.map(item => {\n                if (!item.name || !item.quantity) {\n                  throw new Error('Invalid item data');\n                }\n                return {\n                  id: newRequestItemId(),\n                  requestId: requestId,\n                  name: item.name,\n                  quantity: parseInt(item.quantity)\n                };\n              });\n              requestItems.push(...newItems);\n            }\n            localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n          } catch (error) {\n            return error('Invalid item data provided');\n          }\n        }\n        // Create workflow entry for updated request\n        const employee = employees.find(e => e.id === request.employeeId);\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: request.employeeId,\n          type: 'Request Updated',\n          details: {\n            task: `${requestType.name} updated by ${employee.firstName} ${employee.lastName}`,\n            additionalInfo: `Request Status: ${request.status}`\n          },\n          status: 'ForReviewing',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        workflows.push(workflow);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === requestId),\n          employee,\n          type: requestType\n        }));\n      }\n      function changeRequestStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        const oldStatus = request.status;\n        const newStatus = body.status;\n        Object.assign(request, {\n          status: newStatus,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Create workflow entry for status change\n        const employee = employees.find(e => e.id === request.employeeId);\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: request.employeeId,\n          type: 'Request Status Changed',\n          details: {\n            task: `${requestType.name} status changed for ${employee.firstName} ${employee.lastName}`,\n            additionalInfo: `Status changed from ${oldStatus} to ${newStatus}`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        workflows.push(workflow);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === request.id),\n          employee,\n          type: requestType\n        }));\n      }\n      function deleteRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Delete request and its items\n        requests = requests.filter(x => x.id !== requestId);\n        requestItems = requestItems.filter(x => x.requestId !== requestId);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        return ok();\n      }\n      // Employee functions\n      function getEmployees() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(employees.map(employee => Object.assign(Object.assign({}, employee), {\n          department: departments.find(d => d.id === employee.departmentId)\n        })));\n      }\n      function getEmployeeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const employee = employees.find(x => x.id === idFromUrl());\n        if (!employee) return notFound();\n        return ok(Object.assign(Object.assign({}, employee), {\n          department: departments.find(d => d.id === employee.departmentId)\n        }));\n      }\n      function createEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employee = Object.assign(Object.assign({}, body), {\n          id: newEmployeeId(),\n          status: 'Active',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate required fields\n        if (!employee.firstName || !employee.lastName || !employee.departmentId || !employee.positionId) {\n          return error('Required fields are missing');\n        }\n        // Validate department exists\n        const department = departments.find(d => d.id === employee.departmentId);\n        if (!department) return error('Department not found');\n        // Validate position exists\n        const position = positions.find(p => p.id === employee.positionId);\n        if (!position) return error('Position not found');\n        // Create workflow entry for new employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employee.id,\n          type: 'Added',\n          details: {\n            task: `The Employee Named ${employee.firstName} ${employee.lastName} was added`,\n            additionalInfo: `Added to ${department.name} department as ${position.name}`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(employee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employee), {\n          department,\n          position\n        }));\n      }\n      function updateEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const oldEmployee = employees[employeeIndex];\n        const updatedEmployee = Object.assign(Object.assign(Object.assign({}, oldEmployee), body), {\n          id: employeeId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department exists if changed\n        if (body.departmentId) {\n          const department = departments.find(d => d.id === body.departmentId);\n          if (!department) return error('Department not found');\n        }\n        // Validate position exists if changed\n        if (body.positionId) {\n          const position = positions.find(p => p.id === body.positionId);\n          if (!position) return error('Position not found');\n        }\n        const department = departments.find(d => d.id === updatedEmployee.departmentId);\n        const position = positions.find(p => p.id === updatedEmployee.positionId);\n        // Create workflow entry for updated employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Updated',\n          details: {\n            task: `The Employee Named ${updatedEmployee.firstName} ${updatedEmployee.lastName} was updated`,\n            additionalInfo: `Updated in ${department.name} department as ${position.name}`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees[employeeIndex] = updatedEmployee;\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedEmployee), {\n          department,\n          position\n        }));\n      }\n      function deleteEmployee() {\n        var _a;\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employee = employees.find(x => x.id === employeeId);\n        if (!employee) return notFound();\n        // Create workflow entry for deleted employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Deleted',\n          details: {\n            task: `The Employee Named ${employee.firstName} ${employee.lastName} was deleted`,\n            additionalInfo: `Deleted from ${((_a = departments.find(d => d.id === employee.departmentId)) === null || _a === void 0 ? void 0 : _a.name) || 'Unknown'} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees = employees.filter(x => x.id !== employeeId);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok();\n      }\n      function transferEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employee = employees.find(x => x.id === employeeId);\n        if (!employee) return notFound();\n        const oldDepartment = departments.find(d => d.id === employee.departmentId);\n        const newDepartment = departments.find(d => d.id === body.departmentId);\n        if (!newDepartment) return error('New department not found');\n        // Update employee's department\n        employee.departmentId = body.departmentId;\n        employee.lastModifiedDate = new Date().toISOString();\n        // Create workflow entry for department transfer\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Department Transfer',\n          details: {\n            task: `The Employee Named ${employee.firstName} ${employee.lastName} was transferred`,\n            additionalInfo: `Transferred from ${(oldDepartment === null || oldDepartment === void 0 ? void 0 : oldDepartment.name) || 'Unknown'} to ${newDepartment.name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employee), {\n          department: newDepartment\n        }));\n      }\n      // Department functions\n      function getDepartments() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(departments);\n      }\n      function getDepartmentById() {\n        if (!isAuthenticated()) return unauthorized();\n        const department = departments.find(x => x.id === idFromUrl());\n        if (!department) return notFound();\n        return ok(department);\n      }\n      function createDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const department = body;\n        department.id = newDepartmentId();\n        department.createdDate = new Date().toISOString();\n        department.lastModifiedDate = new Date().toISOString();\n        departments.push(department);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(department);\n      }\n      function updateDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        departments[departmentIndex] = Object.assign(Object.assign(Object.assign({}, departments[departmentIndex]), body), {\n          id: departmentId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(departments[departmentIndex]);\n      }\n      function deleteDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        // Check if department has employees\n        if (employees.some(e => e.departmentId === departmentId)) {\n          return error('Cannot delete department with existing employees');\n        }\n        departments = departments.filter(x => x.id !== departmentId);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok();\n      }\n      // Position functions\n      function getPositions() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(positions);\n      }\n      function getPositionById() {\n        if (!isAuthenticated()) return unauthorized();\n        const position = positions.find(x => x.id === idFromUrl());\n        if (!position) return notFound();\n        return ok(position);\n      }\n      function createPosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const position = Object.assign(Object.assign({}, body), {\n          id: newPositionId(),\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        });\n        if (!position.name || !position.description) {\n          return error('Name and description are required');\n        }\n        positions.push(position);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(position);\n      }\n      function updatePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        positions[positionIndex] = Object.assign(Object.assign(Object.assign({}, positions[positionIndex]), body), {\n          id: positionId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(positions[positionIndex]);\n      }\n      function deletePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        // Check if position has employees\n        if (employees.some(e => e.positionId === positionId)) {\n          return error('Cannot delete position with existing employees');\n        }\n        positions = positions.filter(x => x.id !== positionId);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok();\n      }\n      // Request Type functions\n      function getRequestTypes() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(requestTypes);\n      }\n      function getRequestTypeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestType = requestTypes.find(x => x.id === idFromUrl());\n        if (!requestType) return notFound();\n        return ok(requestType);\n      }\n      function createRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const requestType = Object.assign(Object.assign({}, body), {\n          id: newRequestTypeId(),\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        });\n        if (!requestType.name || !requestType.description) {\n          return error('Name and description are required');\n        }\n        requestTypes.push(requestType);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(requestType);\n      }\n      function updateRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const requestTypeId = idFromUrl();\n        const requestTypeIndex = requestTypes.findIndex(x => x.id === requestTypeId);\n        if (requestTypeIndex === -1) return notFound();\n        requestTypes[requestTypeIndex] = Object.assign(Object.assign(Object.assign({}, requestTypes[requestTypeIndex]), body), {\n          id: requestTypeId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(requestTypes[requestTypeIndex]);\n      }\n      function deleteRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const requestTypeId = idFromUrl();\n        // Check if request type is in use\n        if (requests.some(r => r.typeId === requestTypeId)) {\n          return error('Cannot delete request type that is in use');\n        }\n        requestTypes = requestTypes.filter(x => x.id !== requestTypeId);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok();\n      }\n      function newPositionId() {\n        return positions.length ? Math.max(...positions.map(x => x.id)) + 1 : 1;\n      }\n      function newRequestTypeId() {\n        return requestTypes.length ? Math.max(...requestTypes.map(x => x.id)) + 1 : 1;\n      }\n      // Workflow functions\n      function getWorkflows() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(workflows.map(workflow => Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        })));\n      }\n      function getWorkflowById() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflow = workflows.find(x => x.id === idFromUrl());\n        if (!workflow) return notFound();\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        }));\n      }\n      function getWorkflowsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = parseInt(url.split('/').pop());\n        const employeeWorkflows = workflows.filter(x => x.employeeId === employeeId);\n        return ok(employeeWorkflows.map(workflow => Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        })));\n      }\n      function getWorkflowsByRequestId() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = parseInt(url.split('/').pop());\n        const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n        return ok(requestWorkflows.map(workflow => Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        })));\n      }\n      function createWorkflow() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflow = body;\n        workflow.id = newWorkflowId();\n        workflow.createdDate = new Date().toISOString();\n        workflow.lastModifiedDate = new Date().toISOString();\n        workflow.status = workflow.status || 'ForReviewing'; // Default status\n        workflows.push(workflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        }));\n      }\n      function updateWorkflow() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        workflows[workflowIndex] = Object.assign(Object.assign(Object.assign({}, workflows[workflowIndex]), body), {\n          id: workflowId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflows[workflowIndex]), {\n          employee: employees.find(e => e.id === workflows[workflowIndex].employeeId)\n        }));\n      }\n      function updateWorkflowStatus() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        workflow.status = body.status;\n        workflow.lastModifiedDate = new Date().toISOString();\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        }));\n      }\n      function deleteWorkflow() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflowId = idFromUrl();\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok();\n      }\n      function deleteWorkflowItem() {\n        if (!isAuthenticated()) return unauthorized();\n        const itemId = idFromUrl();\n        const workflow = workflows.find(x => {\n          var _a;\n          return (_a = x.items) === null || _a === void 0 ? void 0 : _a.some(item => item.id === itemId);\n        });\n        if (workflow) {\n          workflow.items = workflow.items.filter(item => item.id !== itemId);\n          localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        }\n        return ok();\n      }\n      function newWorkflowId() {\n        return workflows.length ? Math.max(...workflows.map(x => parseInt(x.id))) + 1 : 1;\n      }\n      // Helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        }));\n      }\n      function error(message) {\n        return throwError(() => ({\n          error: {\n            message\n          }\n        }));\n      }\n      function unauthorized() {\n        return throwError(() => ({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }));\n      }\n      function notFound() {\n        return throwError(() => ({\n          status: 404,\n          error: {\n            message: 'Not Found'\n          }\n        }));\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          created,\n          updated,\n          isVerified\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          created,\n          updated,\n          isVerified\n        };\n      }\n      function isAuthenticated() {\n        return !!currentAccount();\n      }\n      function isAdmin() {\n        var _a;\n        return ((_a = currentAccount()) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n      }\n      function currentAccount() {\n        var _a;\n        // Check if the authorization header exists and has a JWT token\n        if (!((_a = headers.get('Authorization')) === null || _a === void 0 ? void 0 : _a.startsWith('Bearer '))) return null;\n        // Get the account from the JWT token (in a real app this would validate the token)\n        const jwtToken = JSON.parse(atob(headers.get('Authorization').split('.')[1]));\n        const account = accounts.find(x => x.id === jwtToken.id);\n        return account;\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function newRequestId() {\n        return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n      }\n      function newRequestItemId() {\n        return requestItems.length ? Math.max(...requestItems.map(x => x.id)) + 1 : 1;\n      }\n      function newAccountId() {\n        return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n      }\n      function generateJwtToken(account) {\n        // In a real app this would be generated on the server\n        const token = {\n          id: account.id,\n          role: account.role,\n          email: account.email\n        };\n        return `fake-jwt-token.${btoa(JSON.stringify(token))}`;\n      }\n      function generateRefreshToken() {\n        return `fake-refresh-token-${Math.floor(Math.random() * 1000000000)}`;\n      }\n      function getRefreshToken() {\n        var _a;\n        return (_a = headers.get('Authorization')) === null || _a === void 0 ? void 0 : _a.split(' ')[1];\n      }\n      function newEmployeeId() {\n        return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n      }\n      function newDepartmentId() {\n        return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","materialize","dematerialize","Role","accountsKey","accounts","JSON","parse","localStorage","getItem","employeesKey","employees","departmentsKey","departments","id","name","description","requestsKey","requests","requestItemsKey","requestItems","workflowsKey","workflows","positionsKey","positions","requestTypesKey","requestTypes","FakeBackendInterceptor","constructor","alertService","intercept","request","next","url","method","headers","body","handleRoute","pipe","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","getAccounts","match","getAccountById","getRequests","getRequestById","getMyRequests","createRequest","updateRequest","changeRequestStatus","deleteRequest","getEmployees","getEmployeeById","createEmployee","updateEmployee","deleteEmployee","transferEmployee","getDepartments","getDepartmentById","createDepartment","updateDepartment","deleteDepartment","getPositions","getPositionById","createPosition","updatePosition","deletePosition","getRequestTypes","getRequestTypeById","createRequestType","updateRequestType","deleteRequestType","getWorkflows","getWorkflowById","getWorkflowsByEmployeeId","getWorkflowsByRequestId","createWorkflow","updateWorkflow","updateWorkflowStatus","deleteWorkflow","deleteWorkflowItem","handle","email","password","account","find","x","error","isVerified","ok","basicDetails","jwtToken","generateJwtToken","getRefreshToken","unauthorized","refreshTokens","includes","filter","push","generateRefreshToken","setItem","stringify","isAuthenticated","setTimeout","info","location","origin","autoclose","newAccountId","role","Admin","status","User","dateCreated","Date","toISOString","verificationToken","getTime","toString","confirmPassword","verifyUrl","token","map","idFromUrl","currentAccount","isAdmin","filteredRequests","currentUserId","employeeId","items","item","requestId","employee","e","requestType","t","typeId","type","notFound","myRequests","newRequestId","createdDate","lastModifiedDate","Array","isArray","quantity","Error","newRequestItemId","parseInt","workflow","newWorkflowId","details","task","firstName","lastName","additionalInfo","Object","assign","itemChanges","delete","update","forEach","updatedItem","add","newItems","oldStatus","newStatus","department","d","departmentId","newEmployeeId","positionId","position","p","employeeIndex","findIndex","oldEmployee","updatedEmployee","oldDepartment","newDepartment","newDepartmentId","departmentIndex","some","newPositionId","positionIndex","newRequestTypeId","requestTypeId","requestTypeIndex","r","length","Math","max","split","pop","employeeWorkflows","requestWorkflows","workflowId","workflowIndex","itemId","message","title","created","updated","get","startsWith","atob","urlParts","btoa","floor","random","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\n\nimport { AlertService } from '@app/_services';\nimport { Role } from '@app/_models';\n\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [\n    { id: 1, name: 'HR', description: 'Human Resources' },\n    { id: 2, name: 'IT', description: 'Information Technology' },\n    { id: 3, name: 'Finance', description: 'Finance Department' },\n    { id: 4, name: 'Marketing', description: 'Marketing Department' }\n];\n\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [\n    { id: 1, name: 'Manager', description: 'Department Manager' },\n    { id: 2, name: 'Team Lead', description: 'Team Leader' },\n    { id: 3, name: 'Senior Staff', description: 'Senior Level Staff' },\n    { id: 4, name: 'Junior Staff', description: 'Junior Level Staff' }\n];\n\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [\n    { id: 1, name: 'Leave Request', description: 'Request for leave or time off' },\n    { id: 2, name: 'Equipment Request', description: 'Request for office equipment' },\n    { id: 3, name: 'Training Request', description: 'Request for training or workshops' },\n    { id: 4, name: 'Other', description: 'Other types of requests' }\n];\n\n@Injectable()\nexport class FakeBackendInterceptor implements HttpInterceptor {\n    constructor(private alertService: AlertService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { url, method, headers, body } = request;\n        const alertService = this.alertService;\n\n        return handleRoute().pipe(\n            delay(500), // Simulate server delay\n            materialize(),\n            dematerialize()\n        );\n\n        function handleRoute() {\n            switch (true) {\n                case url.endsWith('/accounts/authenticate') && method === 'POST':\n                    return authenticate();\n                case url.endsWith('/accounts/refresh-token') && method === 'POST':\n                    return refreshToken();\n                case url.endsWith('/accounts/revoke-token') && method === 'POST':\n                    return revokeToken();\n                case url.endsWith('/accounts/register') && method === 'POST':\n                    return register();\n                case url.endsWith('/accounts/verify-email') && method === 'POST':\n                    return verifyEmail();\n                case url.endsWith('/accounts') && method === 'GET':\n                    return getAccounts();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n                    return getAccountById();\n                    \n                // request routes\n                case url.endsWith('/requests') && method === 'GET':\n                    return getRequests();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n                    return getRequestById();\n                case url.endsWith('/requests/my-requests') && method === 'GET':\n                    return getMyRequests();\n                case url.endsWith('/requests') && method === 'POST':\n                    return createRequest();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n                    return updateRequest();\n                case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n                    return changeRequestStatus();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequest();\n                    \n                // employee routes\n                case url.endsWith('/employees') && method === 'GET':\n                    return getEmployees();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n                    return getEmployeeById();\n                case url.endsWith('/employees') && method === 'POST':\n                    return createEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n                    return updateEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n                    return deleteEmployee();\n                case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n                    return transferEmployee();\n\n                // department routes\n                case url.endsWith('/departments') && method === 'GET':\n                    return getDepartments();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n                    return getDepartmentById();\n                case url.endsWith('/departments') && method === 'POST':\n                    return createDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n                    return updateDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n                    return deleteDepartment();\n                    \n                // position routes\n                case url.endsWith('/positions') && method === 'GET':\n                    return getPositions();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n                    return getPositionById();\n                case url.endsWith('/positions') && method === 'POST':\n                    return createPosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n                    return updatePosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n                    return deletePosition();\n\n                // request type routes\n                case url.endsWith('/request-types') && method === 'GET':\n                    return getRequestTypes();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n                    return getRequestTypeById();\n                case url.endsWith('/request-types') && method === 'POST':\n                    return createRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n                    return updateRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequestType();\n\n                // workflow routes\n                case url.endsWith('/workflows') && method === 'GET':\n                    return getWorkflows();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n                    return getWorkflowById();\n                case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByEmployeeId();\n                case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByRequestId();\n                case url.endsWith('/workflows') && method === 'POST':\n                    return createWorkflow();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n                    return updateWorkflow();\n                case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n                    return updateWorkflowStatus();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflow();\n                case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflowItem();\n                    \n                default:\n                    return next.handle(request);\n            }\n        }\n\n        // Authentication functions\n        function authenticate() {\n            const { email, password } = body;\n            const account = accounts.find(x => x.email === email);\n        \n            if (!account) return error('Email or password is incorrect');\n            if (password !== account.password) return error('Email or password is incorrect');\n            if (!account.isVerified) return error('Please verify your email before logging in');\n        \n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account)\n            });\n        }\n\n        function refreshToken() {\n            const refreshToken = getRefreshToken();\n            if (!refreshToken) return unauthorized();\n\n            const account = accounts.find(x => x.refreshTokens?.includes(refreshToken));\n            if (!account) return unauthorized();\n\n            // replace old refresh token with a new one\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            account.refreshTokens.push(generateRefreshToken());\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account)\n            });\n        }\n\n        function revokeToken() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const refreshToken = getRefreshToken();\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n\n            // revoke token and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function register() {\n            const account = body;\n\n            if (accounts.find(x => x.email === account.email)) {\n                // display email already registered message in alert\n                setTimeout(() => {\n                    alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, { autoclose: false });\n                }, 1000);\n\n                // always return ok() response to prevent email enumeration\n                return ok();\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            if (account.id === 1) {\n                // first registered account is an admin\n                account.role = Role.Admin;\n                account.status = 'Active'; // Admin accounts get active status\n            } else {\n                account.role = Role.User;\n                account.status = 'Inactive'; // User accounts get inacitve status upon creation\n            }\n            account.dateCreated = new Date().toISOString();\n            account.verificationToken = new Date().getTime().toString();\n            account.isVerified = false;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // display verification email in alert\n            setTimeout(() => {\n                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, { autoclose: false });\n            }, 1000);\n\n            return ok();\n        }\n\n        function verifyEmail() {\n            const { token } = body;\n            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n\n            if (!account) return error('Verification failed');\n\n            // set is verified flag to true if token is valid\n            account.isVerified = true;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function getAccounts() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(accounts.map(x => basicDetails(x)));\n        }\n\n        function getAccountById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let account = accounts.find(x => x.id === idFromUrl());\n\n            // user accounts can get own profile and admin accounts can get all profiles\n            if (account.id !== currentAccount().id && !isAdmin()) {\n                return unauthorized();\n            }\n\n            return ok(basicDetails(account));\n        }\n\n        // Request functions\n        function getRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            // Return all requests for admins, or filtered for regular users\n            let filteredRequests = [...requests];\n            if (!isAdmin()) {\n                const currentUserId = currentAccount().id;\n                filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n            }\n\n            return ok(filteredRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const employee = employees.find(e => e.id === request.employeeId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                return {\n                    ...request,\n                    items,\n                    employee,\n                    type: requestType\n                };\n            }));\n        }\n\n        function getRequestById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            // Check authorization\n            if (!isAdmin() && request.employeeId !== currentAccount().id) {\n                return unauthorized();\n            }\n\n            // Add related data\n            const items = requestItems.filter(item => item.requestId === request.id);\n            const employee = employees.find(e => e.id === request.employeeId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n\n            return ok({\n                ...request,\n                items,\n                employee,\n                type: requestType\n            });\n        }\n\n        function getMyRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const currentUserId = currentAccount().id;\n            const myRequests = requests.filter(x => x.employeeId === currentUserId);\n\n            return ok(myRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const employee = employees.find(e => e.id === request.employeeId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                return {\n                    ...request,\n                    items,\n                    employee,\n                    type: requestType\n                };\n            }));\n        }\n\n        function createRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            // Validate request type\n            if (!body.typeId || !requestTypes.find(t => t.id === body.typeId)) {\n                return error('Invalid request type');\n            }\n\n            const request = {\n                id: newRequestId(),\n                employeeId: currentAccount().id,\n                ...body,\n                status: 'Pending',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            // Validate and process items\n            if (body.items) {\n                if (!Array.isArray(body.items)) {\n                    return error('Items must be an array');\n                }\n\n                const items = body.items.map(item => {\n                    if (!item.name || !item.quantity) {\n                        throw new Error('Invalid item data');\n                    }\n                    return {\n                        id: newRequestItemId(),\n                        requestId: request.id,\n                        name: item.name,\n                        quantity: parseInt(item.quantity)\n                    };\n                });\n\n                requestItems.push(...items);\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n            }\n\n            // Create workflow entry for new request\n            const employee = employees.find(e => e.id === request.employeeId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: request.employeeId,\n                type: 'Request Created',\n                details: {\n                    task: `New ${requestType.name} created by ${employee.firstName} ${employee.lastName}`,\n                    additionalInfo: `Request Status: ${request.status}`\n                },\n                status: 'ForReviewing',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            delete request.items; // Remove items from main request object\n            requests.push(request);\n            workflows.push(workflow);\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok({\n                ...request,\n                items: body.items,\n                employee,\n                type: requestType\n            });\n        }\n\n        function updateRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Validate request type if changed\n            if (body.typeId && !requestTypes.find(t => t.id === body.typeId)) {\n                return error('Invalid request type');\n            }\n\n            // Update request\n            Object.assign(request, {\n                ...body,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            // Handle item changes\n            if (body.itemChanges) {\n                try {\n                    // Delete items\n                    if (body.itemChanges.delete) {\n                        requestItems = requestItems.filter(item => \n                            item.requestId !== requestId || \n                            !body.itemChanges.delete.includes(item.id)\n                        );\n                    }\n\n                    // Update items\n                    if (body.itemChanges.update) {\n                        body.itemChanges.update.forEach(updatedItem => {\n                            if (!updatedItem.name || !updatedItem.quantity) {\n                                throw new Error('Invalid item data');\n                            }\n                            const item = requestItems.find(x => x.id === updatedItem.id);\n                            if (item) {\n                                Object.assign(item, {\n                                    ...updatedItem,\n                                    quantity: parseInt(updatedItem.quantity)\n                                });\n                            }\n                        });\n                    }\n\n                    // Add new items\n                    if (body.itemChanges.add) {\n                        const newItems = body.itemChanges.add.map(item => {\n                            if (!item.name || !item.quantity) {\n                                throw new Error('Invalid item data');\n                            }\n                            return {\n                                id: newRequestItemId(),\n                                requestId: requestId,\n                                name: item.name,\n                                quantity: parseInt(item.quantity)\n                            };\n                        });\n                        requestItems.push(...newItems);\n                    }\n\n                    localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n                } catch (error) {\n                    return error('Invalid item data provided');\n                }\n            }\n\n            // Create workflow entry for updated request\n            const employee = employees.find(e => e.id === request.employeeId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: request.employeeId,\n                type: 'Request Updated',\n                details: {\n                    task: `${requestType.name} updated by ${employee.firstName} ${employee.lastName}`,\n                    additionalInfo: `Request Status: ${request.status}`\n                },\n                status: 'ForReviewing',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            workflows.push(workflow);\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok({\n                ...request,\n                items: requestItems.filter(item => item.requestId === requestId),\n                employee,\n                type: requestType\n            });\n        }\n\n        function changeRequestStatus() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            const oldStatus = request.status;\n            const newStatus = body.status;\n\n            Object.assign(request, {\n                status: newStatus,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            // Create workflow entry for status change\n            const employee = employees.find(e => e.id === request.employeeId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: request.employeeId,\n                type: 'Request Status Changed',\n                details: {\n                    task: `${requestType.name} status changed for ${employee.firstName} ${employee.lastName}`,\n                    additionalInfo: `Status changed from ${oldStatus} to ${newStatus}`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            workflows.push(workflow);\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok({\n                ...request,\n                items: requestItems.filter(item => item.requestId === request.id),\n                employee,\n                type: requestType\n            });\n        }\n\n        function deleteRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Delete request and its items\n            requests = requests.filter(x => x.id !== requestId);\n            requestItems = requestItems.filter(x => x.requestId !== requestId);\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n\n            return ok();\n        }\n\n        // Employee functions\n        function getEmployees() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(employees.map(employee => ({\n                ...employee,\n                department: departments.find(d => d.id === employee.departmentId)\n            })));\n        }\n\n        function getEmployeeById() {\n            if (!isAuthenticated()) return unauthorized();\n            const employee = employees.find(x => x.id === idFromUrl());\n            if (!employee) return notFound();\n            return ok({\n                ...employee,\n                department: departments.find(d => d.id === employee.departmentId)\n            });\n        }\n\n        function createEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employee = {\n                ...body,\n                id: newEmployeeId(),\n                status: 'Active',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate required fields\n            if (!employee.firstName || !employee.lastName || !employee.departmentId || !employee.positionId) {\n                return error('Required fields are missing');\n            }\n            \n            // Validate department exists\n            const department = departments.find(d => d.id === employee.departmentId);\n            if (!department) return error('Department not found');\n            \n            // Validate position exists\n            const position = positions.find(p => p.id === employee.positionId);\n            if (!position) return error('Position not found');\n            \n            // Create workflow entry for new employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employee.id,\n                type: 'Added',\n                details: {\n                    task: `The Employee Named ${employee.firstName} ${employee.lastName} was added`,\n                    additionalInfo: `Added to ${department.name} department as ${position.name}`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(employee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...employee,\n                department,\n                position\n            });\n        }\n\n        function updateEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const oldEmployee = employees[employeeIndex];\n            const updatedEmployee = {\n                ...oldEmployee,\n                ...body,\n                id: employeeId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate department exists if changed\n            if (body.departmentId) {\n                const department = departments.find(d => d.id === body.departmentId);\n                if (!department) return error('Department not found');\n            }\n            \n            // Validate position exists if changed\n            if (body.positionId) {\n                const position = positions.find(p => p.id === body.positionId);\n                if (!position) return error('Position not found');\n            }\n            \n            const department = departments.find(d => d.id === updatedEmployee.departmentId);\n            const position = positions.find(p => p.id === updatedEmployee.positionId);\n            \n            // Create workflow entry for updated employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Updated',\n                details: {\n                    task: `The Employee Named ${updatedEmployee.firstName} ${updatedEmployee.lastName} was updated`,\n                    additionalInfo: `Updated in ${department.name} department as ${position.name}`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees[employeeIndex] = updatedEmployee;\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...updatedEmployee,\n                department,\n                position\n            });\n        }\n\n        function deleteEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employee = employees.find(x => x.id === employeeId);\n            \n            if (!employee) return notFound();\n            \n            // Create workflow entry for deleted employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Deleted',\n                details: {\n                    task: `The Employee Named ${employee.firstName} ${employee.lastName} was deleted`,\n                    additionalInfo: `Deleted from ${departments.find(d => d.id === employee.departmentId)?.name || 'Unknown'} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees = employees.filter(x => x.id !== employeeId);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok();\n        }\n\n        function transferEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employee = employees.find(x => x.id === employeeId);\n            \n            if (!employee) return notFound();\n            \n            const oldDepartment = departments.find(d => d.id === employee.departmentId);\n            const newDepartment = departments.find(d => d.id === body.departmentId);\n            \n            if (!newDepartment) return error('New department not found');\n            \n            // Update employee's department\n            employee.departmentId = body.departmentId;\n            employee.lastModifiedDate = new Date().toISOString();\n            \n            // Create workflow entry for department transfer\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Department Transfer',\n                details: {\n                    task: `The Employee Named ${employee.firstName} ${employee.lastName} was transferred`,\n                    additionalInfo: `Transferred from ${oldDepartment?.name || 'Unknown'} to ${newDepartment.name} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...employee,\n                department: newDepartment\n            });\n        }\n\n        // Department functions\n        function getDepartments() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(departments);\n        }\n\n        function getDepartmentById() {\n            if (!isAuthenticated()) return unauthorized();\n            const department = departments.find(x => x.id === idFromUrl());\n            if (!department) return notFound();\n            return ok(department);\n        }\n\n        function createDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const department = body;\n            department.id = newDepartmentId();\n            department.createdDate = new Date().toISOString();\n            department.lastModifiedDate = new Date().toISOString();\n            \n            departments.push(department);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok(department);\n        }\n\n        function updateDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\n            \n            if (departmentIndex === -1) return notFound();\n            \n            departments[departmentIndex] = {\n                ...departments[departmentIndex],\n                ...body,\n                id: departmentId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok(departments[departmentIndex]);\n        }\n\n        function deleteDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            \n            // Check if department has employees\n            if (employees.some(e => e.departmentId === departmentId)) {\n                return error('Cannot delete department with existing employees');\n            }\n            \n            departments = departments.filter(x => x.id !== departmentId);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok();\n        }\n\n        // Position functions\n        function getPositions() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(positions);\n        }\n\n        function getPositionById() {\n            if (!isAuthenticated()) return unauthorized();\n            const position = positions.find(x => x.id === idFromUrl());\n            if (!position) return notFound();\n            return ok(position);\n        }\n\n        function createPosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const position = {\n                ...body,\n                id: newPositionId(),\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            if (!position.name || !position.description) {\n                return error('Name and description are required');\n            }\n            \n            positions.push(position);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok(position);\n        }\n\n        function updatePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            const positionIndex = positions.findIndex(x => x.id === positionId);\n            \n            if (positionIndex === -1) return notFound();\n            \n            positions[positionIndex] = {\n                ...positions[positionIndex],\n                ...body,\n                id: positionId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok(positions[positionIndex]);\n        }\n\n        function deletePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            \n            // Check if position has employees\n            if (employees.some(e => e.positionId === positionId)) {\n                return error('Cannot delete position with existing employees');\n            }\n            \n            positions = positions.filter(x => x.id !== positionId);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok();\n        }\n\n        // Request Type functions\n        function getRequestTypes() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(requestTypes);\n        }\n\n        function getRequestTypeById() {\n            if (!isAuthenticated()) return unauthorized();\n            const requestType = requestTypes.find(x => x.id === idFromUrl());\n            if (!requestType) return notFound();\n            return ok(requestType);\n        }\n\n        function createRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const requestType = {\n                ...body,\n                id: newRequestTypeId(),\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            if (!requestType.name || !requestType.description) {\n                return error('Name and description are required');\n            }\n            \n            requestTypes.push(requestType);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok(requestType);\n        }\n\n        function updateRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const requestTypeId = idFromUrl();\n            const requestTypeIndex = requestTypes.findIndex(x => x.id === requestTypeId);\n            \n            if (requestTypeIndex === -1) return notFound();\n            \n            requestTypes[requestTypeIndex] = {\n                ...requestTypes[requestTypeIndex],\n                ...body,\n                id: requestTypeId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok(requestTypes[requestTypeIndex]);\n        }\n\n        function deleteRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const requestTypeId = idFromUrl();\n            \n            // Check if request type is in use\n            if (requests.some(r => r.typeId === requestTypeId)) {\n                return error('Cannot delete request type that is in use');\n            }\n            \n            requestTypes = requestTypes.filter(x => x.id !== requestTypeId);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok();\n        }\n\n        function newPositionId() {\n            return positions.length ? Math.max(...positions.map(x => x.id)) + 1 : 1;\n        }\n\n        function newRequestTypeId() {\n            return requestTypes.length ? Math.max(...requestTypes.map(x => x.id)) + 1 : 1;\n        }\n\n        // Workflow functions\n        function getWorkflows() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(workflows.map(workflow => ({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            })));\n        }\n\n        function getWorkflowById() {\n            if (!isAuthenticated()) return unauthorized();\n            const workflow = workflows.find(x => x.id === idFromUrl());\n            if (!workflow) return notFound();\n            return ok({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            });\n        }\n\n        function getWorkflowsByEmployeeId() {\n            if (!isAuthenticated()) return unauthorized();\n            const employeeId = parseInt(url.split('/').pop());\n            const employeeWorkflows = workflows.filter(x => x.employeeId === employeeId);\n            return ok(employeeWorkflows.map(workflow => ({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            })));\n        }\n\n        function getWorkflowsByRequestId() {\n            if (!isAuthenticated()) return unauthorized();\n            const requestId = parseInt(url.split('/').pop());\n            const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n            return ok(requestWorkflows.map(workflow => ({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            })));\n        }\n\n        function createWorkflow() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const workflow = body;\n            workflow.id = newWorkflowId();\n            workflow.createdDate = new Date().toISOString();\n            workflow.lastModifiedDate = new Date().toISOString();\n            workflow.status = workflow.status || 'ForReviewing'; // Default status\n            \n            workflows.push(workflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            });\n        }\n\n        function updateWorkflow() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const workflowId = idFromUrl();\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n            \n            if (workflowIndex === -1) return notFound();\n            \n            workflows[workflowIndex] = {\n                ...workflows[workflowIndex],\n                ...body,\n                id: workflowId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflows[workflowIndex],\n                employee: employees.find(e => e.id === workflows[workflowIndex].employeeId)\n            });\n        }\n\n        function updateWorkflowStatus() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const workflowId = idFromUrl();\n            const workflow = workflows.find(x => x.id === workflowId);\n            \n            if (!workflow) return notFound();\n            \n            workflow.status = body.status;\n            workflow.lastModifiedDate = new Date().toISOString();\n            \n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            });\n        }\n\n        function deleteWorkflow() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const workflowId = idFromUrl();\n            workflows = workflows.filter(x => x.id !== workflowId);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok();\n        }\n\n        function deleteWorkflowItem() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const itemId = idFromUrl();\n            const workflow = workflows.find(x => x.items?.some(item => item.id === itemId));\n            \n            if (workflow) {\n                workflow.items = workflow.items.filter(item => item.id !== itemId);\n                localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            }\n            \n            return ok();\n        }\n\n        function newWorkflowId() {\n            return workflows.length ? Math.max(...workflows.map(x => parseInt(x.id))) + 1 : 1;\n        }\n\n        // Helper functions\n        function ok(body?: any) {\n            return of(new HttpResponse({ status: 200, body }));\n        }\n\n        function error(message: string) {\n            return throwError(() => ({ error: { message } }));\n        }\n\n        function unauthorized() {\n            return throwError(() => ({ status: 401, error: { message: 'Unauthorized' } }));\n        }\n\n        function notFound() {\n            return throwError(() => ({ status: 404, error: { message: 'Not Found' } }));\n        }\n\n        function basicDetails(account: any) {\n            const { id, title, firstName, lastName, email, role, created, updated, isVerified } = account;\n            return { id, title, firstName, lastName, email, role, created, updated, isVerified };\n        }\n\n        function isAuthenticated() {\n            return !!currentAccount();\n        }\n\n        function isAdmin() {\n            return currentAccount()?.role === Role.Admin;\n        }\n\n        function currentAccount() {\n            // Check if the authorization header exists and has a JWT token\n            if (!headers.get('Authorization')?.startsWith('Bearer ')) return null;\n\n            // Get the account from the JWT token (in a real app this would validate the token)\n            const jwtToken = JSON.parse(atob(headers.get('Authorization').split('.')[1]));\n            const account = accounts.find(x => x.id === jwtToken.id);\n            return account;\n        }\n\n        function idFromUrl() {\n            const urlParts = url.split('/');\n            return parseInt(urlParts[urlParts.length - 1]);\n        }\n\n        function newRequestId() {\n            return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n        }\n\n        function newRequestItemId() {\n            return requestItems.length ? Math.max(...requestItems.map(x => x.id)) + 1 : 1;\n        }\n\n        function newAccountId() {\n            return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n        }\n\n        function generateJwtToken(account: any) {\n            // In a real app this would be generated on the server\n            const token = {\n                id: account.id,\n                role: account.role,\n                email: account.email\n            };\n            return `fake-jwt-token.${btoa(JSON.stringify(token))}`;\n        }\n\n        function generateRefreshToken() {\n            return `fake-refresh-token-${Math.floor(Math.random() * 1000000000)}`;\n        }\n\n        function getRefreshToken() {\n            return headers.get('Authorization')?.split(' ')[1];\n        }\n\n        function newEmployeeId() {\n            return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n        }\n\n        function newDepartmentId() {\n            return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n        }\n    }\n}\n\nexport const fakeBackendProvider = {\n    provide: HTTP_INTERCEPTORS,\n    useClass: FakeBackendInterceptor,\n    multi: true\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}