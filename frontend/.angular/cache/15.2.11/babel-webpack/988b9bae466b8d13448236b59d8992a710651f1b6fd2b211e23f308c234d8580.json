{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [{\n  id: 1,\n  name: 'HR',\n  description: 'Human Resources'\n}, {\n  id: 2,\n  name: 'IT',\n  description: 'Information Technology'\n}, {\n  id: 3,\n  name: 'Finance',\n  description: 'Finance Department'\n}, {\n  id: 4,\n  name: 'Marketing',\n  description: 'Marketing Department'\n}];\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [{\n  id: 1,\n  name: 'Manager',\n  description: 'Department Manager'\n}, {\n  id: 2,\n  name: 'Team Lead',\n  description: 'Team Leader'\n}, {\n  id: 3,\n  name: 'Senior Staff',\n  description: 'Senior Level Staff'\n}, {\n  id: 4,\n  name: 'Junior Staff',\n  description: 'Junior Level Staff'\n}];\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [{\n  id: 1,\n  name: 'Leave Request',\n  description: 'Request for leave or time off'\n}, {\n  id: 2,\n  name: 'Equipment Request',\n  description: 'Request for office equipment'\n}, {\n  id: 3,\n  name: 'Training Request',\n  description: 'Request for training or workshops'\n}, {\n  id: 4,\n  name: 'Other',\n  description: 'Other types of requests'\n}];\n// Helper functions for generating IDs\nfunction newAccountId() {\n  return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n}\nfunction newRequestId() {\n  return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n}\nfunction newRequestItemId() {\n  return requestItems.length ? Math.max(...requestItems.map(x => x.id)) + 1 : 1;\n}\nfunction newEmployeeId() {\n  return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n}\nfunction newWorkflowId() {\n  return workflows.length ? Math.max(...workflows.map(x => x.id)) + 1 : 1;\n}\nfunction newDepartmentId() {\n  return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n}\nfunction newPositionId() {\n  return positions.length ? Math.max(...positions.map(x => x.id)) + 1 : 1;\n}\nfunction newRequestTypeId() {\n  return requestTypes.length ? Math.max(...requestTypes.map(x => x.id)) + 1 : 1;\n}\n// Helper functions for JWT and refresh tokens\nfunction generateJwtToken(account) {\n  // In a real application, you would use a proper JWT library\n  return btoa(JSON.stringify({\n    id: account.id,\n    role: account.role\n  }));\n}\nfunction generateRefreshToken() {\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n}\nfunction getRefreshToken() {\n  const authHeader = request.headers.get('Authorization');\n  if (!(authHeader === null || authHeader === void 0 ? void 0 : authHeader.startsWith('Bearer '))) return null;\n  return authHeader.split(' ')[1];\n}\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      // Helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        }));\n      }\n      function error(message) {\n        return throwError(() => ({\n          error: {\n            message\n          }\n        }));\n      }\n      function unauthorized() {\n        return throwError(() => ({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }));\n      }\n      function notFound() {\n        return throwError(() => ({\n          status: 404,\n          error: {\n            message: 'Not Found'\n          }\n        }));\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status,\n          isVerified\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status,\n          isVerified\n        };\n      }\n      function isAuthenticated() {\n        return !!currentAccount();\n      }\n      function isAdmin() {\n        var _a;\n        return ((_a = currentAccount()) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n      }\n      function currentAccount() {\n        var _a;\n        if (!((_a = headers.get('Authorization')) === null || _a === void 0 ? void 0 : _a.startsWith('Bearer '))) return null;\n        const jwtToken = JSON.parse(atob(headers.get('Authorization').split('.')[1]));\n        return accounts.find(x => x.id === jwtToken.id);\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function getWorkflowsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const internalId = parseInt(url.split('/').pop());\n        console.log('Looking for workflows with employeeId:', internalId);\n        const employee = employees.find(e => e.id === internalId);\n        if (!employee) {\n          console.log('Employee not found with internal id:', internalId);\n          return notFound();\n        }\n        const employeeWorkflows = workflows.filter(x => x.employeeId === employee.id);\n        console.log('Found workflows:', employeeWorkflows.length);\n        // Sort workflows in descending order\n        const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      return handleRoute().pipe(delay(500), materialize(), dematerialize());\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case url.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case url.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case url.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case url.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case url.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          case url.endsWith('/accounts') && method === 'POST':\n            return createAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n            return updateAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n            return deleteAccount();\n          // request routes\n          case url.endsWith('/requests') && method === 'GET':\n            return getRequests();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return getRequestById();\n          case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n            return getRequestsByEmployeeId();\n          case url.endsWith('/requests/my-requests') && method === 'GET':\n            return getMyRequests();\n          case url.endsWith('/requests') && method === 'POST':\n            return createRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return updateRequest();\n          case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n            return changeRequestStatus();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n            return deleteRequest();\n          // employee routes\n          case url.endsWith('/employees') && method === 'GET':\n            return getEmployees();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n            return getEmployeeById();\n          case url.endsWith('/employees') && method === 'POST':\n            return createEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n            return updateEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n            return deleteEmployee();\n          case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n            return transferEmployee();\n          // department routes\n          case url.endsWith('/departments') && method === 'GET':\n            return getDepartments();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n            return getDepartmentById();\n          case url.endsWith('/departments') && method === 'POST':\n            return createDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n            return updateDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n            return deleteDepartment();\n          // position routes\n          case url.endsWith('/positions') && method === 'GET':\n            return getPositions();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n            return getPositionById();\n          case url.endsWith('/positions') && method === 'POST':\n            return createPosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n            return updatePosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n            return deletePosition();\n          // request type routes\n          case url.endsWith('/request-types') && method === 'GET':\n            return getRequestTypes();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n            return getRequestTypeById();\n          case url.endsWith('/request-types') && method === 'POST':\n            return createRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n            return updateRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n            return deleteRequestType();\n          // workflow routes\n          case url.endsWith('/workflows') && method === 'GET':\n            return getWorkflows();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n            return getWorkflowById();\n          case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByEmployeeId();\n          case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByRequestId();\n          case url.endsWith('/workflows') && method === 'POST':\n            return createWorkflow();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n            return updateWorkflow();\n          case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n            return updateWorkflowStatus();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflow();\n          case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflowItem();\n          default:\n            return next.handle(request);\n        }\n      }\n      // Authentication functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) return error('Email or password is incorrect');\n        if (password !== account.password) return error('Email or password is incorrect');\n        if (!account.isVerified) return error('Please verify your email before logging in');\n        // Generate refresh token and save\n        const refreshToken = generateRefreshToken();\n        account.refreshTokens = account.refreshTokens || [];\n        account.refreshTokens.push(refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // Return basic details and tokens\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account),\n          refreshToken\n        }));\n      }\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return unauthorized();\n        const account = accounts.find(x => {\n          var _a;\n          return (_a = x.refreshTokens) === null || _a === void 0 ? void 0 : _a.includes(refreshToken);\n        });\n        if (!account) return unauthorized();\n        // Generate new refresh token and save\n        const newRefreshToken = generateRefreshToken();\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        account.refreshTokens.push(newRefreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // Return basic details and tokens\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account),\n          refreshToken: newRefreshToken\n        }));\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // display email already registered message in alert\n          setTimeout(() => {\n            alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, {\n              autoclose: false\n            });\n          }, 1000);\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // first registered account is an admin\n          account.role = Role.Admin;\n          account.status = 'Active'; // Admin accounts get active status\n        } else {\n          account.role = Role.User;\n          account.status = 'Inactive'; // User accounts get inacitve status upon creation\n        }\n\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display verification email in alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoclose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can get own profile and admin accounts can get all profiles\n        if (account.id !== currentAccount().id && !isAdmin()) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      // Request functions\n      function getRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        // Return all requests for admins, or filtered for regular users\n        let filteredRequests = [...requests];\n        if (!isAdmin()) {\n          const currentUserId = currentAccount().id;\n          filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n        }\n        return ok(filteredRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const requestEmployee = employees.find(e => e.id === request.employeeId);\n          const requestAccount = accounts.find(a => a.id === (requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.accountId));\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return {\n            id: request.id,\n            employeeId: (requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.employeeId) || '',\n            type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type || '',\n            status: request.status,\n            createdDate: request.createdDate,\n            items: items,\n            employee: {\n              id: requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.id,\n              employeeId: requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.employeeId,\n              fullName: requestAccount ? `${requestAccount.firstName} ${requestAccount.lastName}`.trim() : ''\n            }\n          };\n        }));\n      }\n      function getRequestById() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        // Check authorization\n        if (!isAdmin() && request.employeeId !== currentAccount().id) {\n          return unauthorized();\n        }\n        // Add related data\n        const items = requestItems.filter(item => item.requestId === request.id);\n        const employee = employees.find(e => e.id === request.employeeId);\n        const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        // Format employee name with proper capitalization\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: items.map(item => ({\n            id: item.id,\n            name: item.name,\n            quantity: item.quantity\n          })),\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            fullName: fullName,\n            employeeId: employee.employeeId\n          }) : null,\n          type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type\n        }));\n      }\n      function getRequestsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const internalId = parseInt(url.split('/').pop());\n        console.log('Looking for workflows with employeeId:', internalId);\n        const employee = employees.find(e => e.id === internalId);\n        if (!employee) {\n          console.log('Employee not found with internal id:', internalId);\n          return notFound();\n        }\n        const employeeWorkflows = workflows.filter(x => x.employeeId === employee.id);\n        console.log('Found workflows:', employeeWorkflows.length);\n        // Sort workflows in descending order\n        const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function getMyRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        const currentUserId = currentAccount().id;\n        const myRequests = requests.filter(x => x.employeeId === currentUserId);\n        return ok(myRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const employee = employees.find(e => e.id === request.employeeId);\n          const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return Object.assign(Object.assign({}, request), {\n            items,\n            employee: employee ? Object.assign(Object.assign({}, employee), {\n              fullName: `${(account === null || account === void 0 ? void 0 : account.firstName) || ''} ${(account === null || account === void 0 ? void 0 : account.lastName) || ''}`.trim(),\n              employeeId: employee.employeeId\n            }) : null,\n            type: requestType ? requestType.name : request.type\n          });\n        }));\n      }\n      function createRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        console.log('Received request data:', body);\n        // Find employee by employeeId if provided, otherwise use current user\n        let targetEmployee;\n        if (body.employeeId) {\n          // First try to find by internal ID\n          targetEmployee = employees.find(e => e.id === Number(body.employeeId));\n          if (!targetEmployee) {\n            // If not found, try to find by employee ID string\n            targetEmployee = employees.find(e => e.employeeId === body.employeeId);\n          }\n          if (!targetEmployee) return error('Employee not found');\n        } else {\n          const currentUser = currentAccount();\n          targetEmployee = employees.find(e => e.accountId === currentUser.id);\n          if (!targetEmployee) return error('Current user is not an employee');\n        }\n        const request = {\n          id: newRequestId(),\n          employeeId: targetEmployee.id,\n          type: body.type,\n          description: body.description || '',\n          status: 'Pending',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Validate required fields\n        if (!request.type) {\n          return error('Request type is required');\n        }\n        // Validate and process items if present\n        let requestItemsList = [];\n        if (body.items && Array.isArray(body.items)) {\n          try {\n            requestItemsList = body.items.map(item => {\n              if (!item.name || !item.quantity) {\n                throw new Error('Invalid item data');\n              }\n              return {\n                id: newRequestItemId(),\n                requestId: request.id,\n                name: item.name,\n                quantity: Number(item.quantity)\n              };\n            });\n          } catch (error) {\n            return error('Invalid item data provided');\n          }\n        }\n        // Save request and items\n        requests.push(request);\n        if (requestItemsList.length > 0) {\n          requestItems.push(...requestItemsList);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        const account = accounts.find(a => a.id === targetEmployee.accountId);\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItemsList,\n          employeeId: targetEmployee.employeeId,\n          employee: {\n            id: targetEmployee.id,\n            employeeId: targetEmployee.employeeId,\n            fullName: fullName\n          }\n        }));\n      }\n      function updateRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        console.log('Received update data:', body);\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Update basic request fields\n        Object.assign(request, {\n          type: body.type,\n          description: body.description || request.description,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Handle item changes\n        if (body.items) {\n          // Remove all existing items for this request\n          requestItems = requestItems.filter(item => item.requestId !== requestId);\n          // Add new/updated items\n          const newItems = body.items.map(item => ({\n            id: item.id || newRequestItemId(),\n            requestId: requestId,\n            name: item.name,\n            quantity: Number(item.quantity)\n          }));\n          requestItems.push(...newItems);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // Get related data for response\n        const employee = employees.find(e => e.id === request.employeeId);\n        const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === requestId),\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            fullName: fullName,\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function changeRequestStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        const newStatus = body.status;\n        Object.assign(request, {\n          status: newStatus,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // Get related data for response\n        const employee = employees.find(e => e.id === request.employeeId);\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === request.id),\n          employee: employee,\n          type: requestType.name\n        }));\n      }\n      function deleteRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Delete request and its items\n        requests = requests.filter(x => x.id !== requestId);\n        requestItems = requestItems.filter(x => x.requestId !== requestId);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        return ok();\n      }\n      // Employee functions\n      function getEmployees() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(employees.map(employee => {\n          const department = departments.find(d => d.id === employee.departmentId);\n          const account = accounts.find(a => a.id === employee.accountId);\n          return Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId,\n            fullName: account ? `${account.firstName} ${account.lastName}`.trim() : '',\n            department: department ? {\n              id: department.id,\n              name: department.name,\n              description: department.description\n            } : null\n          });\n        }));\n      }\n      function getEmployeeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employee = employees.find(x => x.id === employeeId);\n        if (!employee) return notFound();\n        // Get fresh department data\n        const department = departments.find(d => d.id === employee.departmentId);\n        if (!department) return error('Department not found');\n        const account = accounts.find(a => a.id === employee.accountId);\n        // Return complete employee data with fresh relations\n        return ok(Object.assign(Object.assign({}, employee), {\n          employeeId: employee.employeeId,\n          fullName: account ? `${account.firstName} ${account.lastName}`.trim() : '',\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function createEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        // Log the received data for debugging\n        console.log('Received employee data:', body);\n        // Validate department exists\n        const department = departments.find(d => d.id === Number(body.departmentId));\n        if (!department) return error('Department not found');\n        const employee = Object.assign(Object.assign({}, body), {\n          id: newEmployeeId(),\n          accountId: Number(body.accountId),\n          employeeId: body.employeeId,\n          departmentId: Number(body.departmentId),\n          position: body.position,\n          hireDate: body.hireDate,\n          salary: Number(body.salary),\n          status: body.status,\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Check each required field individually and log the result\n        const requiredFields = {\n          accountId: !!employee.accountId,\n          employeeId: !!employee.employeeId,\n          departmentId: !!employee.departmentId,\n          position: !!employee.position,\n          hireDate: !!employee.hireDate,\n          salary: !!employee.salary,\n          status: !!employee.status\n        };\n        console.log('Field validation results:', requiredFields);\n        // Check if any required field is missing\n        const missingFields = Object.entries(requiredFields).filter(([_, isValid]) => !isValid).map(([fieldName]) => fieldName);\n        if (missingFields.length > 0) {\n          return error(`Required fields are missing: ${missingFields.join(', ')}`);\n        }\n        // Validate account exists\n        const account = accounts.find(a => a.id === employee.accountId);\n        if (!account) return error('Account not found');\n        // Create workflow entry for new employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employee.id,\n          type: 'Added',\n          details: {\n            task: `New employee ${employee.employeeId} was added`,\n            additionalInfo: `Added to ${department.name} department as ${employee.position}`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(employee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function updateEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const oldEmployee = employees[employeeIndex];\n        const updatedEmployee = Object.assign(Object.assign(Object.assign({}, oldEmployee), body), {\n          id: employeeId,\n          accountId: body.accountId ? Number(body.accountId) : oldEmployee.accountId,\n          departmentId: body.departmentId ? Number(body.departmentId) : oldEmployee.departmentId,\n          position: body.position || oldEmployee.position,\n          salary: body.salary ? Number(body.salary) : oldEmployee.salary,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department exists if changed\n        if (body.departmentId) {\n          const department = departments.find(d => d.id === updatedEmployee.departmentId);\n          if (!department) return error('Department not found');\n        }\n        // Validate account exists if changed\n        if (body.accountId) {\n          const account = accounts.find(a => a.id === updatedEmployee.accountId);\n          if (!account) return error('Account not found');\n        }\n        const department = departments.find(d => d.id === updatedEmployee.departmentId);\n        const account = accounts.find(a => a.id === updatedEmployee.accountId);\n        // Create workflow entry for updated employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Updated',\n          details: {\n            task: `Employee ${employeeId} was updated`,\n            additionalInfo: `Updated in ${department.name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(updatedEmployee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedEmployee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function deleteEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const employee = employees[employeeIndex];\n        // Delete employee\n        employees = employees.filter(x => x.id !== employeeId);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(Object.assign(Object.assign({}, employee), {\n          status: 'Deleted'\n        }));\n      }\n      function transferEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const employee = employees[employeeIndex];\n        const newDepartmentId = body.departmentId;\n        // Validate department exists\n        const department = departments.find(d => d.id === newDepartmentId);\n        if (!department) return error('Department not found');\n        // Update employee department\n        employee.departmentId = newDepartmentId;\n        employee.lastModifiedDate = new Date().toISOString();\n        // Create workflow entry for employee transfer\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Transferred',\n          details: {\n            task: `Employee ${employeeId} was transferred to ${department.name} department`,\n            additionalInfo: `Transferred from ${employees.find(x => x.id === employee.departmentId).name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(employee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          status: 'Transferred'\n        }));\n      }\n      // Department functions\n      function getDepartments() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(departments.map(department => {\n          return Object.assign(Object.assign({}, department), {\n            id: department.id.toString(),\n            name: department.name,\n            description: department.description\n          });\n        }));\n      }\n      function getDepartmentById() {\n        if (!isAuthenticated()) return unauthorized();\n        const departmentId = idFromUrl();\n        const department = departments.find(x => x.id === departmentId);\n        if (!department) return notFound();\n        return ok(Object.assign(Object.assign({}, department), {\n          id: department.id.toString(),\n          name: department.name,\n          description: department.description\n        }));\n      }\n      function createDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const department = body;\n        // Validate department name is unique\n        if (departments.find(x => x.name === department.name)) {\n          return error('Department name already exists');\n        }\n        // Assign department id and save\n        department.id = newDepartmentId();\n        departments.push(department);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, department), {\n          id: department.id.toString()\n        }));\n      }\n      function updateDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        const oldDepartment = departments[departmentIndex];\n        const updatedDepartment = Object.assign(Object.assign(Object.assign({}, oldDepartment), body), {\n          id: departmentId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department name is unique\n        if (departments.find(x => x.name === updatedDepartment.name && x.id !== updatedDepartment.id)) {\n          return error('Department name already exists');\n        }\n        departments.push(updatedDepartment);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, updatedDepartment), {\n          id: updatedDepartment.id.toString()\n        }));\n      }\n      function deleteDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        const department = departments[departmentIndex];\n        // Delete department\n        departments = departments.filter(x => x.id !== departmentId);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, department), {\n          status: 'Deleted'\n        }));\n      }\n      // Position functions\n      function getPositions() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(positions.map(position => {\n          return Object.assign(Object.assign({}, position), {\n            id: position.id.toString(),\n            name: position.name,\n            description: position.description\n          });\n        }));\n      }\n      function getPositionById() {\n        if (!isAuthenticated()) return unauthorized();\n        const positionId = idFromUrl();\n        const position = positions.find(x => x.id === positionId);\n        if (!position) return notFound();\n        return ok(Object.assign(Object.assign({}, position), {\n          id: position.id.toString(),\n          name: position.name,\n          description: position.description\n        }));\n      }\n      function createPosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const position = body;\n        // Validate position name is unique\n        if (positions.find(x => x.name === position.name)) {\n          return error('Position name already exists');\n        }\n        // Assign position id and save\n        position.id = newPositionId();\n        positions.push(position);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, position), {\n          id: position.id.toString()\n        }));\n      }\n      function updatePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        const oldPosition = positions[positionIndex];\n        const updatedPosition = Object.assign(Object.assign(Object.assign({}, oldPosition), body), {\n          id: positionId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate position name is unique\n        if (positions.find(x => x.name === updatedPosition.name && x.id !== updatedPosition.id)) {\n          return error('Position name already exists');\n        }\n        positions.push(updatedPosition);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, updatedPosition), {\n          id: updatedPosition.id.toString()\n        }));\n      }\n      function deletePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        const position = positions[positionIndex];\n        // Delete position\n        positions = positions.filter(x => x.id !== positionId);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, position), {\n          status: 'Deleted'\n        }));\n      }\n      // Request type functions\n      function getRequestTypes() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(requestTypes.map(type => {\n          return Object.assign(Object.assign({}, type), {\n            id: type.id.toString(),\n            name: type.name,\n            description: type.description\n          });\n        }));\n      }\n      function getRequestTypeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const typeId = idFromUrl();\n        const type = requestTypes.find(x => x.id === typeId);\n        if (!type) return notFound();\n        return ok(Object.assign(Object.assign({}, type), {\n          id: type.id.toString(),\n          name: type.name,\n          description: type.description\n        }));\n      }\n      function createRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const type = body;\n        // Validate request type name is unique\n        if (requestTypes.find(x => x.name === type.name)) {\n          return error('Request type name already exists');\n        }\n        // Assign request type id and save\n        type.id = newRequestTypeId();\n        requestTypes.push(type);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, type), {\n          id: type.id.toString()\n        }));\n      }\n      function updateRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const typeId = idFromUrl();\n        const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n        if (typeIndex === -1) return notFound();\n        const oldType = requestTypes[typeIndex];\n        const updatedType = Object.assign(Object.assign(Object.assign({}, oldType), body), {\n          id: typeId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate request type name is unique\n        if (requestTypes.find(x => x.name === updatedType.name && x.id !== updatedType.id)) {\n          return error('Request type name already exists');\n        }\n        requestTypes.push(updatedType);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, updatedType), {\n          id: updatedType.id.toString()\n        }));\n      }\n      function deleteRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const typeId = idFromUrl();\n        const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n        if (typeIndex === -1) return notFound();\n        const type = requestTypes[typeIndex];\n        // Delete request type\n        requestTypes = requestTypes.filter(x => x.id !== typeId);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, type), {\n          status: 'Deleted'\n        }));\n      }\n      // Workflow functions\n      function getWorkflows() {\n        if (!isAuthenticated()) return unauthorized();\n        // Sort workflows in descending order by creation date\n        const sortedWorkflows = [...workflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function getWorkflowById() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflow = workflows.find(x => x.id === idFromUrl());\n        if (!workflow) return notFound();\n        const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n        return ok({\n          id: workflow.id.toString(),\n          type: workflow.type,\n          details: details,\n          status: workflow.status,\n          datetimecreated: workflow.datetimecreated || workflow.createdDate\n        });\n      }\n      function getWorkflowsByRequestId() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        console.log('Looking for workflows with requestId:', requestId);\n        const request = requests.find(x => x.id === requestId);\n        if (!request) {\n          console.log('Request not found with id:', requestId);\n          return notFound();\n        }\n        const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n        console.log('Found workflows:', requestWorkflows.length);\n        // Sort workflows in descending order\n        const sortedWorkflows = [...requestWorkflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function createWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        console.log('Received workflow data:', body);\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: body.employeeId,\n          type: body.type,\n          details: body.details,\n          status: body.status,\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Validate required fields\n        const requiredFields = {\n          employeeId: !!workflow.employeeId,\n          type: !!workflow.type,\n          details: !!workflow.details,\n          status: !!workflow.status\n        };\n        console.log('Field validation results:', requiredFields);\n        // Check if any required field is missing\n        const missingFields = Object.entries(requiredFields).filter(([_, isValid]) => !isValid).map(([fieldName]) => fieldName);\n        if (missingFields.length > 0) {\n          return error(`Required fields are missing: ${missingFields.join(', ')}`);\n        }\n        // Validate employee exists\n        const employee = employees.find(e => e.id === workflow.employeeId);\n        if (!employee) return error('Employee not found');\n        employees.push(workflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function updateWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        const oldWorkflow = workflows[workflowIndex];\n        const updatedWorkflow = Object.assign(Object.assign(Object.assign({}, oldWorkflow), body), {\n          id: workflowId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate employee exists\n        const employee = employees.find(e => e.id === updatedWorkflow.employeeId);\n        if (!employee) return error('Employee not found');\n        employees.push(updatedWorkflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedWorkflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function updateWorkflowStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        const newStatus = body.status;\n        Object.assign(workflow, {\n          status: newStatus,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          status: newStatus\n        }));\n      }\n      function deleteWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        const workflow = workflows[workflowIndex];\n        const employee = employees.find(e => e.id === workflow.employeeId);\n        // Delete workflow\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function deleteWorkflowItem() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        // Delete workflow item\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          status: 'Deleted'\n        }));\n      }\n      function createAccount() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          return error('Email already exists');\n        }\n        account.id = newAccountId();\n        account.dateCreated = new Date().toISOString();\n        account.isVerified = true;\n        account.refreshTokens = [];\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      function updateAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        const accountId = idFromUrl();\n        const account = accounts.find(x => x.id === accountId);\n        if (!account) return notFound();\n        if (account.id !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Only allow admins to update role\n        if (!isAdmin()) {\n          delete body.role;\n        }\n        // If email is being changed, make sure it's not already taken\n        if (body.email && body.email !== account.email && accounts.find(x => x.email === body.email)) {\n          return error('Email already exists');\n        }\n        Object.assign(account, body);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      function deleteAccount() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const accountId = idFromUrl();\n        const account = accounts.find(x => x.id === accountId);\n        if (!account) return notFound();\n        if (account.id === currentAccount().id) return error('You cannot delete your own account');\n        accounts = accounts.filter(x => x.id !== accountId);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","materialize","dematerialize","Role","accountsKey","accounts","JSON","parse","localStorage","getItem","employeesKey","employees","departmentsKey","departments","id","name","description","requestsKey","requests","requestItemsKey","requestItems","workflowsKey","workflows","positionsKey","positions","requestTypesKey","requestTypes","newAccountId","length","Math","max","map","x","newRequestId","newRequestItemId","newEmployeeId","newWorkflowId","newDepartmentId","newPositionId","newRequestTypeId","generateJwtToken","account","btoa","stringify","role","generateRefreshToken","random","toString","substring","getRefreshToken","authHeader","request","headers","get","startsWith","split","FakeBackendInterceptor","constructor","alertService","intercept","next","url","method","body","ok","status","error","message","unauthorized","notFound","basicDetails","title","firstName","lastName","email","isVerified","isAuthenticated","currentAccount","isAdmin","Admin","jwtToken","atob","find","idFromUrl","urlParts","parseInt","getWorkflowsByEmployeeId","internalId","pop","console","log","employee","e","employeeWorkflows","filter","employeeId","sortedWorkflows","sort","a","b","dateA","Date","datetimecreated","createdDate","dateB","getTime","workflow","details","task","additionalInfo","type","handleRoute","pipe","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","getAccounts","match","getAccountById","createAccount","updateAccount","deleteAccount","getRequests","getRequestById","getRequestsByEmployeeId","getMyRequests","createRequest","updateRequest","changeRequestStatus","deleteRequest","getEmployees","getEmployeeById","createEmployee","updateEmployee","deleteEmployee","transferEmployee","getDepartments","getDepartmentById","createDepartment","updateDepartment","deleteDepartment","getPositions","getPositionById","createPosition","updatePosition","deletePosition","getRequestTypes","getRequestTypeById","createRequestType","updateRequestType","deleteRequestType","getWorkflows","getWorkflowById","getWorkflowsByRequestId","createWorkflow","updateWorkflow","updateWorkflowStatus","deleteWorkflow","deleteWorkflowItem","handle","password","refreshTokens","push","setItem","includes","newRefreshToken","setTimeout","info","location","origin","autoclose","User","dateCreated","toISOString","verificationToken","confirmPassword","verifyUrl","token","filteredRequests","currentUserId","items","item","requestId","requestEmployee","requestAccount","accountId","requestType","t","typeId","fullName","trim","charAt","toUpperCase","slice","toLowerCase","quantity","Object","myRequests","targetEmployee","Number","currentUser","lastModifiedDate","requestItemsList","Array","isArray","Error","assign","newItems","newStatus","department","d","departmentId","departmentName","position","hireDate","salary","requiredFields","missingFields","entries","_","isValid","fieldName","join","employeeIndex","findIndex","oldEmployee","updatedEmployee","departmentIndex","oldDepartment","updatedDepartment","positionId","positionIndex","oldPosition","updatedPosition","typeIndex","oldType","updatedType","requestWorkflows","workflowId","workflowIndex","oldWorkflow","updatedWorkflow","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\n\nimport { AlertService } from '@app/_services';\nimport { Role } from '@app/_models';\n\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [\n    { id: 1, name: 'HR', description: 'Human Resources' },\n    { id: 2, name: 'IT', description: 'Information Technology' },\n    { id: 3, name: 'Finance', description: 'Finance Department' },\n    { id: 4, name: 'Marketing', description: 'Marketing Department' }\n];\n\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [\n    { id: 1, name: 'Manager', description: 'Department Manager' },\n    { id: 2, name: 'Team Lead', description: 'Team Leader' },\n    { id: 3, name: 'Senior Staff', description: 'Senior Level Staff' },\n    { id: 4, name: 'Junior Staff', description: 'Junior Level Staff' }\n];\n\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [\n    { id: 1, name: 'Leave Request', description: 'Request for leave or time off' },\n    { id: 2, name: 'Equipment Request', description: 'Request for office equipment' },\n    { id: 3, name: 'Training Request', description: 'Request for training or workshops' },\n    { id: 4, name: 'Other', description: 'Other types of requests' }\n];\n\n// Helper functions for generating IDs\nfunction newAccountId(): number {\n    return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n}\n\nfunction newRequestId(): number {\n    return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n}\n\nfunction newRequestItemId(): number {\n    return requestItems.length ? Math.max(...requestItems.map(x => x.id)) + 1 : 1;\n}\n\nfunction newEmployeeId(): number {\n    return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n}\n\nfunction newWorkflowId(): number {\n    return workflows.length ? Math.max(...workflows.map(x => x.id)) + 1 : 1;\n}\n\nfunction newDepartmentId(): number {\n    return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n}\n\nfunction newPositionId(): number {\n    return positions.length ? Math.max(...positions.map(x => x.id)) + 1 : 1;\n}\n\nfunction newRequestTypeId(): number {\n    return requestTypes.length ? Math.max(...requestTypes.map(x => x.id)) + 1 : 1;\n}\n\n// Helper functions for JWT and refresh tokens\nfunction generateJwtToken(account: any): string {\n    // In a real application, you would use a proper JWT library\n    return btoa(JSON.stringify({ id: account.id, role: account.role }));\n}\n\nfunction generateRefreshToken(): string {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n}\n\nfunction getRefreshToken(): string | null {\n    const authHeader = request.headers.get('Authorization');\n    if (!authHeader?.startsWith('Bearer ')) return null;\n    return authHeader.split(' ')[1];\n}\n\n@Injectable()\nexport class FakeBackendInterceptor implements HttpInterceptor {\n    constructor(private alertService: AlertService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { url, method, headers, body } = request;\n        const alertService = this.alertService;\n\n        // Helper functions\n        function ok(body?: any) {\n            return of(new HttpResponse({ status: 200, body }));\n        }\n\n        function error(message: string) {\n            return throwError(() => ({ error: { message } }));\n        }\n\n        function unauthorized() {\n            return throwError(() => ({ status: 401, error: { message: 'Unauthorized' } }));\n        }\n\n        function notFound() {\n            return throwError(() => ({ status: 404, error: { message: 'Not Found' } }));\n        }\n\n        function basicDetails(account: any) {\n            const { id, title, firstName, lastName, email, role, status, isVerified } = account;\n            return { id, title, firstName, lastName, email, role, status, isVerified };\n        }\n\n        function isAuthenticated() {\n            return !!currentAccount();\n        }\n\n        function isAdmin() {\n            return currentAccount()?.role === Role.Admin;\n        }\n\n        function currentAccount() {\n            if (!headers.get('Authorization')?.startsWith('Bearer ')) return null;\n            const jwtToken = JSON.parse(atob(headers.get('Authorization').split('.')[1]));\n            return accounts.find(x => x.id === jwtToken.id);\n        }\n\n        function idFromUrl() {\n            const urlParts = url.split('/');\n            return parseInt(urlParts[urlParts.length - 1]);\n        }\n\n        function getWorkflowsByEmployeeId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const internalId = parseInt(url.split('/').pop());\n            console.log('Looking for workflows with employeeId:', internalId);\n\n            const employee = employees.find(e => e.id === internalId);\n            if (!employee) {\n                console.log('Employee not found with internal id:', internalId);\n                return notFound();\n            }\n            \n            const employeeWorkflows = workflows.filter(x => x.employeeId === employee.id);\n            console.log('Found workflows:', employeeWorkflows.length);\n\n            // Sort workflows in descending order\n            const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        return handleRoute().pipe(\n            delay(500),\n            materialize(),\n            dematerialize()\n        );\n\n        function handleRoute() {\n            switch (true) {\n                case url.endsWith('/accounts/authenticate') && method === 'POST':\n                    return authenticate();\n                case url.endsWith('/accounts/refresh-token') && method === 'POST':\n                    return refreshToken();\n                case url.endsWith('/accounts/revoke-token') && method === 'POST':\n                    return revokeToken();\n                case url.endsWith('/accounts/register') && method === 'POST':\n                    return register();\n                case url.endsWith('/accounts/verify-email') && method === 'POST':\n                    return verifyEmail();\n                case url.endsWith('/accounts') && method === 'GET':\n                    return getAccounts();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n                    return getAccountById();\n                case url.endsWith('/accounts') && method === 'POST':\n                    return createAccount();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n                    return updateAccount();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n                    return deleteAccount();\n                    \n                // request routes\n                case url.endsWith('/requests') && method === 'GET':\n                    return getRequests();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n                    return getRequestById();\n                case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n                    return getRequestsByEmployeeId();\n                case url.endsWith('/requests/my-requests') && method === 'GET':\n                    return getMyRequests();\n                case url.endsWith('/requests') && method === 'POST':\n                    return createRequest();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n                    return updateRequest();\n                case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n                    return changeRequestStatus();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequest();\n                    \n                // employee routes\n                case url.endsWith('/employees') && method === 'GET':\n                    return getEmployees();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n                    return getEmployeeById();\n                case url.endsWith('/employees') && method === 'POST':\n                    return createEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n                    return updateEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n                    return deleteEmployee();\n                case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n                    return transferEmployee();\n\n                // department routes\n                case url.endsWith('/departments') && method === 'GET':\n                    return getDepartments();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n                    return getDepartmentById();\n                case url.endsWith('/departments') && method === 'POST':\n                    return createDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n                    return updateDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n                    return deleteDepartment();\n                    \n                // position routes\n                case url.endsWith('/positions') && method === 'GET':\n                    return getPositions();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n                    return getPositionById();\n                case url.endsWith('/positions') && method === 'POST':\n                    return createPosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n                    return updatePosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n                    return deletePosition();\n\n                // request type routes\n                case url.endsWith('/request-types') && method === 'GET':\n                    return getRequestTypes();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n                    return getRequestTypeById();\n                case url.endsWith('/request-types') && method === 'POST':\n                    return createRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n                    return updateRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequestType();\n\n                // workflow routes\n                case url.endsWith('/workflows') && method === 'GET':\n                    return getWorkflows();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n                    return getWorkflowById();\n                case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByEmployeeId();\n                case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByRequestId();\n                case url.endsWith('/workflows') && method === 'POST':\n                    return createWorkflow();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n                    return updateWorkflow();\n                case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n                    return updateWorkflowStatus();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflow();\n                case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflowItem();\n                    \n                default:\n                    return next.handle(request);\n            }\n        }\n\n        // Authentication functions\n        function authenticate() {\n            const { email, password } = body;\n            const account = accounts.find(x => x.email === email);\n        \n            if (!account) return error('Email or password is incorrect');\n            if (password !== account.password) return error('Email or password is incorrect');\n            if (!account.isVerified) return error('Please verify your email before logging in');\n\n            // Generate refresh token and save\n            const refreshToken = generateRefreshToken();\n            account.refreshTokens = account.refreshTokens || [];\n            account.refreshTokens.push(refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // Return basic details and tokens\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account),\n                refreshToken\n            });\n        }\n\n        function refreshToken() {\n            const refreshToken = getRefreshToken();\n            \n            if (!refreshToken) return unauthorized();\n\n            const account = accounts.find(x => x.refreshTokens?.includes(refreshToken));\n            \n            if (!account) return unauthorized();\n\n            // Generate new refresh token and save\n            const newRefreshToken = generateRefreshToken();\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            account.refreshTokens.push(newRefreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // Return basic details and tokens\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account),\n                refreshToken: newRefreshToken\n            });\n        }\n\n        function revokeToken() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const refreshToken = getRefreshToken();\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n\n            // revoke token and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function register() {\n            const account = body;\n\n            if (accounts.find(x => x.email === account.email)) {\n                // display email already registered message in alert\n                setTimeout(() => {\n                    alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, { autoclose: false });\n                }, 1000);\n\n                // always return ok() response to prevent email enumeration\n                return ok();\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            if (account.id === 1) {\n                // first registered account is an admin\n                account.role = Role.Admin;\n                account.status = 'Active'; // Admin accounts get active status\n            } else {\n                account.role = Role.User;\n                account.status = 'Inactive'; // User accounts get inacitve status upon creation\n            }\n            account.dateCreated = new Date().toISOString();\n            account.verificationToken = new Date().getTime().toString();\n            account.isVerified = false;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // display verification email in alert\n            setTimeout(() => {\n                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, { autoclose: false });\n            }, 1000);\n\n            return ok();\n        }\n\n        function verifyEmail() {\n            const { token } = body;\n            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n\n            if (!account) return error('Verification failed');\n\n            // set is verified flag to true if token is valid\n            account.isVerified = true;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function getAccounts() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(accounts.map(x => basicDetails(x)));\n        }\n\n        function getAccountById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let account = accounts.find(x => x.id === idFromUrl());\n\n            // user accounts can get own profile and admin accounts can get all profiles\n            if (account.id !== currentAccount().id && !isAdmin()) {\n                return unauthorized();\n            }\n\n            return ok(basicDetails(account));\n        }\n\n        // Request functions\n        function getRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            // Return all requests for admins, or filtered for regular users\n            let filteredRequests = [...requests];\n            if (!isAdmin()) {\n                const currentUserId = currentAccount().id;\n                filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n            }\n\n            return ok(filteredRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const requestEmployee = employees.find(e => e.id === request.employeeId);\n                const requestAccount = accounts.find(a => a.id === requestEmployee?.accountId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n\n                return {\n                    id: request.id,\n                    employeeId: requestEmployee?.employeeId || '',\n                    type: requestType?.name || request.type || '',\n                    status: request.status,\n                    createdDate: request.createdDate,\n                    items: items,\n                    employee: {\n                        id: requestEmployee?.id,\n                        employeeId: requestEmployee?.employeeId,\n                        fullName: requestAccount ? `${requestAccount.firstName} ${requestAccount.lastName}`.trim() : ''\n                    }\n                };\n            }));\n        }\n\n        function getRequestById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            // Check authorization\n            if (!isAdmin() && request.employeeId !== currentAccount().id) {\n                return unauthorized();\n            }\n\n            // Add related data\n            const items = requestItems.filter(item => item.requestId === request.id);\n            const employee = employees.find(e => e.id === request.employeeId);\n            const account = accounts.find(a => a.id === employee?.accountId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n\n            // Format employee name with proper capitalization\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                items: items.map(item => ({\n                    id: item.id,\n                    name: item.name,\n                    quantity: item.quantity\n                })),\n                employee: employee ? {\n                    ...employee,\n                    fullName: fullName,\n                    employeeId: employee.employeeId\n                } : null,\n                type: requestType?.name || request.type\n            });\n        }\n\n        function getRequestsByEmployeeId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const internalId = parseInt(url.split('/').pop());\n            console.log('Looking for workflows with employeeId:', internalId);\n\n            const employee = employees.find(e => e.id === internalId);\n            if (!employee) {\n                console.log('Employee not found with internal id:', internalId);\n                return notFound();\n            }\n            \n            const employeeWorkflows = workflows.filter(x => x.employeeId === employee.id);\n            console.log('Found workflows:', employeeWorkflows.length);\n\n            // Sort workflows in descending order\n            const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        function getMyRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const currentUserId = currentAccount().id;\n            const myRequests = requests.filter(x => x.employeeId === currentUserId);\n\n            return ok(myRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const employee = employees.find(e => e.id === request.employeeId);\n                const account = accounts.find(a => a.id === employee?.accountId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                return {\n                    ...request,\n                    items,\n                    employee: employee ? {\n                        ...employee,\n                        fullName: `${account?.firstName || ''} ${account?.lastName || ''}`.trim(),\n                        employeeId: employee.employeeId\n                    } : null,\n                    type: requestType ? requestType.name : request.type\n                };\n            }));\n        }\n\n        function createRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            console.log('Received request data:', body);\n\n            // Find employee by employeeId if provided, otherwise use current user\n            let targetEmployee;\n            if (body.employeeId) {\n                // First try to find by internal ID\n                targetEmployee = employees.find(e => e.id === Number(body.employeeId));\n                if (!targetEmployee) {\n                    // If not found, try to find by employee ID string\n                    targetEmployee = employees.find(e => e.employeeId === body.employeeId);\n                }\n                if (!targetEmployee) return error('Employee not found');\n            } else {\n                const currentUser = currentAccount();\n                targetEmployee = employees.find(e => e.accountId === currentUser.id);\n                if (!targetEmployee) return error('Current user is not an employee');\n            }\n\n            const request = {\n                id: newRequestId(),\n                employeeId: targetEmployee.id,\n                type: body.type,\n                description: body.description || '',\n                status: 'Pending',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            // Validate required fields\n            if (!request.type) {\n                return error('Request type is required');\n            }\n\n            // Validate and process items if present\n            let requestItemsList = [];\n            if (body.items && Array.isArray(body.items)) {\n                try {\n                    requestItemsList = body.items.map(item => {\n                        if (!item.name || !item.quantity) {\n                            throw new Error('Invalid item data');\n                        }\n                        return {\n                            id: newRequestItemId(),\n                            requestId: request.id,\n                            name: item.name,\n                            quantity: Number(item.quantity)\n                        };\n                    });\n                } catch (error) {\n                    return error('Invalid item data provided');\n                }\n            }\n\n            // Save request and items\n            requests.push(request);\n            if (requestItemsList.length > 0) {\n                requestItems.push(...requestItemsList);\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n            }\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            const account = accounts.find(a => a.id === targetEmployee.accountId);\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                items: requestItemsList,\n                employeeId: targetEmployee.employeeId,\n                employee: {\n                    id: targetEmployee.id,\n                    employeeId: targetEmployee.employeeId,\n                    fullName: fullName\n                }\n            });\n        }\n\n        function updateRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            console.log('Received update data:', body);\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Update basic request fields\n            Object.assign(request, {\n                type: body.type,\n                description: body.description || request.description,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            // Handle item changes\n            if (body.items) {\n                // Remove all existing items for this request\n                requestItems = requestItems.filter(item => item.requestId !== requestId);\n\n                // Add new/updated items\n                const newItems = body.items.map(item => ({\n                    id: item.id || newRequestItemId(),\n                    requestId: requestId,\n                    name: item.name,\n                    quantity: Number(item.quantity)\n                }));\n\n                requestItems.push(...newItems);\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n            }\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            // Get related data for response\n            const employee = employees.find(e => e.id === request.employeeId);\n            const account = accounts.find(a => a.id === employee?.accountId);\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                items: requestItems.filter(item => item.requestId === requestId),\n                employee: employee ? {\n                    ...employee,\n                    fullName: fullName,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function changeRequestStatus() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            const newStatus = body.status;\n\n            Object.assign(request, {\n                status: newStatus,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            // Get related data for response\n            const employee = employees.find(e => e.id === request.employeeId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n\n            return ok({\n                ...request,\n                items: requestItems.filter(item => item.requestId === request.id),\n                employee: employee,\n                type: requestType.name\n            });\n        }\n\n        function deleteRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Delete request and its items\n            requests = requests.filter(x => x.id !== requestId);\n            requestItems = requestItems.filter(x => x.requestId !== requestId);\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n\n            return ok();\n        }\n\n        // Employee functions\n        function getEmployees() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(employees.map(employee => {\n                const department = departments.find(d => d.id === employee.departmentId);\n                const account = accounts.find(a => a.id === employee.accountId);\n                return {\n                    ...employee,\n                    employeeId: employee.employeeId,\n                    fullName: account ? `${account.firstName} ${account.lastName}`.trim() : '',\n                    department: department ? {\n                        id: department.id,\n                        name: department.name,\n                        description: department.description\n                    } : null\n                };\n            }));\n        }\n\n        function getEmployeeById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employee = employees.find(x => x.id === employeeId);\n            \n            if (!employee) return notFound();\n            \n            // Get fresh department data\n            const department = departments.find(d => d.id === employee.departmentId);\n            if (!department) return error('Department not found');\n            \n            const account = accounts.find(a => a.id === employee.accountId);\n            \n            // Return complete employee data with fresh relations\n            return ok({\n                ...employee,\n                employeeId: employee.employeeId,\n                fullName: account ? `${account.firstName} ${account.lastName}`.trim() : '',\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function createEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            // Log the received data for debugging\n            console.log('Received employee data:', body);\n\n            // Validate department exists\n            const department = departments.find(d => d.id === Number(body.departmentId));\n            if (!department) return error('Department not found');\n\n            const employee = {\n                ...body,\n                id: newEmployeeId(),\n                accountId: Number(body.accountId),\n                employeeId: body.employeeId,\n                departmentId: Number(body.departmentId),\n                position: body.position,\n                hireDate: body.hireDate,\n                salary: Number(body.salary),\n                status: body.status,\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Check each required field individually and log the result\n            const requiredFields = {\n                accountId: !!employee.accountId,\n                employeeId: !!employee.employeeId,\n                departmentId: !!employee.departmentId,\n                position: !!employee.position,\n                hireDate: !!employee.hireDate,\n                salary: !!employee.salary,\n                status: !!employee.status\n            };\n            \n            console.log('Field validation results:', requiredFields);\n            \n            // Check if any required field is missing\n            const missingFields = Object.entries(requiredFields)\n                .filter(([_, isValid]) => !isValid)\n                .map(([fieldName]) => fieldName);\n            \n            if (missingFields.length > 0) {\n                return error(`Required fields are missing: ${missingFields.join(', ')}`);\n            }\n\n            // Validate account exists\n            const account = accounts.find(a => a.id === employee.accountId);\n            if (!account) return error('Account not found');\n            \n            // Create workflow entry for new employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employee.id,\n                type: 'Added',\n                details: {\n                    task: `New employee ${employee.employeeId} was added`,\n                    additionalInfo: `Added to ${department.name} department as ${employee.position}`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(employee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...employee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function updateEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const oldEmployee = employees[employeeIndex];\n            const updatedEmployee = {\n                ...oldEmployee,\n                ...body,\n                id: employeeId,\n                accountId: body.accountId ? Number(body.accountId) : oldEmployee.accountId,\n                departmentId: body.departmentId ? Number(body.departmentId) : oldEmployee.departmentId,\n                position: body.position || oldEmployee.position,\n                salary: body.salary ? Number(body.salary) : oldEmployee.salary,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate department exists if changed\n            if (body.departmentId) {\n                const department = departments.find(d => d.id === updatedEmployee.departmentId);\n                if (!department) return error('Department not found');\n            }\n\n            // Validate account exists if changed\n            if (body.accountId) {\n                const account = accounts.find(a => a.id === updatedEmployee.accountId);\n                if (!account) return error('Account not found');\n            }\n            \n            const department = departments.find(d => d.id === updatedEmployee.departmentId);\n            const account = accounts.find(a => a.id === updatedEmployee.accountId);\n            \n            // Create workflow entry for updated employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Updated',\n                details: {\n                    task: `Employee ${employeeId} was updated`,\n                    additionalInfo: `Updated in ${department.name} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(updatedEmployee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...updatedEmployee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function deleteEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const employee = employees[employeeIndex];\n            \n            // Delete employee\n            employees = employees.filter(x => x.id !== employeeId);\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            \n            return ok({\n                ...employee,\n                status: 'Deleted'\n            });\n        }\n\n        function transferEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const employee = employees[employeeIndex];\n            const newDepartmentId = body.departmentId;\n            \n            // Validate department exists\n            const department = departments.find(d => d.id === newDepartmentId);\n            if (!department) return error('Department not found');\n\n            // Update employee department\n            employee.departmentId = newDepartmentId;\n            employee.lastModifiedDate = new Date().toISOString();\n            \n            // Create workflow entry for employee transfer\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Transferred',\n                details: {\n                    task: `Employee ${employeeId} was transferred to ${department.name} department`,\n                    additionalInfo: `Transferred from ${employees.find(x => x.id === employee.departmentId).name} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(employee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...employee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                status: 'Transferred'\n            });\n        }\n\n        // Department functions\n        function getDepartments() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(departments.map(department => {\n                return {\n                    ...department,\n                    id: department.id.toString(),\n                    name: department.name,\n                    description: department.description\n                };\n            }));\n        }\n\n        function getDepartmentById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            const department = departments.find(x => x.id === departmentId);\n            \n            if (!department) return notFound();\n            \n            return ok({\n                ...department,\n                id: department.id.toString(),\n                name: department.name,\n                description: department.description\n            });\n        }\n\n        function createDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const department = body;\n            \n            // Validate department name is unique\n            if (departments.find(x => x.name === department.name)) {\n                return error('Department name already exists');\n            }\n            \n            // Assign department id and save\n            department.id = newDepartmentId();\n            departments.push(department);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...department,\n                id: department.id.toString()\n            });\n        }\n\n        function updateDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\n            \n            if (departmentIndex === -1) return notFound();\n            \n            const oldDepartment = departments[departmentIndex];\n            const updatedDepartment = {\n                ...oldDepartment,\n                ...body,\n                id: departmentId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate department name is unique\n            if (departments.find(x => x.name === updatedDepartment.name && x.id !== updatedDepartment.id)) {\n                return error('Department name already exists');\n            }\n\n            departments.push(updatedDepartment);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...updatedDepartment,\n                id: updatedDepartment.id.toString()\n            });\n        }\n\n        function deleteDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const departmentId = idFromUrl();\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\n            \n            if (departmentIndex === -1) return notFound();\n            \n            const department = departments[departmentIndex];\n            \n            // Delete department\n            departments = departments.filter(x => x.id !== departmentId);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...department,\n                status: 'Deleted'\n            });\n        }\n\n        // Position functions\n        function getPositions() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(positions.map(position => {\n                return {\n                    ...position,\n                    id: position.id.toString(),\n                    name: position.name,\n                    description: position.description\n                };\n            }));\n        }\n\n        function getPositionById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            const position = positions.find(x => x.id === positionId);\n            \n            if (!position) return notFound();\n            \n            return ok({\n                ...position,\n                id: position.id.toString(),\n                name: position.name,\n                description: position.description\n            });\n        }\n\n        function createPosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const position = body;\n            \n            // Validate position name is unique\n            if (positions.find(x => x.name === position.name)) {\n                return error('Position name already exists');\n            }\n            \n            // Assign position id and save\n            position.id = newPositionId();\n            positions.push(position);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...position,\n                id: position.id.toString()\n            });\n        }\n\n        function updatePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            const positionIndex = positions.findIndex(x => x.id === positionId);\n            \n            if (positionIndex === -1) return notFound();\n            \n            const oldPosition = positions[positionIndex];\n            const updatedPosition = {\n                ...oldPosition,\n                ...body,\n                id: positionId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate position name is unique\n            if (positions.find(x => x.name === updatedPosition.name && x.id !== updatedPosition.id)) {\n                return error('Position name already exists');\n            }\n\n            positions.push(updatedPosition);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...updatedPosition,\n                id: updatedPosition.id.toString()\n            });\n        }\n\n        function deletePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const positionId = idFromUrl();\n            const positionIndex = positions.findIndex(x => x.id === positionId);\n            \n            if (positionIndex === -1) return notFound();\n            \n            const position = positions[positionIndex];\n            \n            // Delete position\n            positions = positions.filter(x => x.id !== positionId);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...position,\n                status: 'Deleted'\n            });\n        }\n\n        // Request type functions\n        function getRequestTypes() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(requestTypes.map(type => {\n                return {\n                    ...type,\n                    id: type.id.toString(),\n                    name: type.name,\n                    description: type.description\n                };\n            }));\n        }\n\n        function getRequestTypeById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const typeId = idFromUrl();\n            const type = requestTypes.find(x => x.id === typeId);\n            \n            if (!type) return notFound();\n            \n            return ok({\n                ...type,\n                id: type.id.toString(),\n                name: type.name,\n                description: type.description\n            });\n        }\n\n        function createRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const type = body;\n            \n            // Validate request type name is unique\n            if (requestTypes.find(x => x.name === type.name)) {\n                return error('Request type name already exists');\n            }\n            \n            // Assign request type id and save\n            type.id = newRequestTypeId();\n            requestTypes.push(type);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...type,\n                id: type.id.toString()\n            });\n        }\n\n        function updateRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const typeId = idFromUrl();\n            const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n            \n            if (typeIndex === -1) return notFound();\n            \n            const oldType = requestTypes[typeIndex];\n            const updatedType = {\n                ...oldType,\n                ...body,\n                id: typeId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate request type name is unique\n            if (requestTypes.find(x => x.name === updatedType.name && x.id !== updatedType.id)) {\n                return error('Request type name already exists');\n            }\n\n            requestTypes.push(updatedType);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...updatedType,\n                id: updatedType.id.toString()\n            });\n        }\n\n        function deleteRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const typeId = idFromUrl();\n            const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n            \n            if (typeIndex === -1) return notFound();\n            \n            const type = requestTypes[typeIndex];\n            \n            // Delete request type\n            requestTypes = requestTypes.filter(x => x.id !== typeId);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...type,\n                status: 'Deleted'\n            });\n        }\n\n        // Workflow functions\n        function getWorkflows() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            // Sort workflows in descending order by creation date\n            const sortedWorkflows = [...workflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        function getWorkflowById() {\n            if (!isAuthenticated()) return unauthorized();\n            const workflow = workflows.find(x => x.id === idFromUrl());\n            if (!workflow) return notFound();\n            \n            const details = typeof workflow.details === 'object' ? \n                `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                workflow.details || '';\n\n            return ok({\n                id: workflow.id.toString(),\n                type: workflow.type,\n                details: details,\n                status: workflow.status,\n                datetimecreated: workflow.datetimecreated || workflow.createdDate\n            });\n        }\n\n        function getWorkflowsByRequestId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const requestId = idFromUrl();\n            console.log('Looking for workflows with requestId:', requestId);\n\n            const request = requests.find(x => x.id === requestId);\n            if (!request) {\n                console.log('Request not found with id:', requestId);\n                return notFound();\n            }\n            \n            const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n            console.log('Found workflows:', requestWorkflows.length);\n\n            // Sort workflows in descending order\n            const sortedWorkflows = [...requestWorkflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        function createWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            console.log('Received workflow data:', body);\n\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: body.employeeId,\n                type: body.type,\n                details: body.details,\n                status: body.status,\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate required fields\n            const requiredFields = {\n                employeeId: !!workflow.employeeId,\n                type: !!workflow.type,\n                details: !!workflow.details,\n                status: !!workflow.status\n            };\n            \n            console.log('Field validation results:', requiredFields);\n            \n            // Check if any required field is missing\n            const missingFields = Object.entries(requiredFields)\n                .filter(([_, isValid]) => !isValid)\n                .map(([fieldName]) => fieldName);\n            \n            if (missingFields.length > 0) {\n                return error(`Required fields are missing: ${missingFields.join(', ')}`);\n            }\n\n            // Validate employee exists\n            const employee = employees.find(e => e.id === workflow.employeeId);\n            if (!employee) return error('Employee not found');\n            \n            employees.push(workflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function updateWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const workflowId = idFromUrl();\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n            \n            if (workflowIndex === -1) return notFound();\n            \n            const oldWorkflow = workflows[workflowIndex];\n            const updatedWorkflow = {\n                ...oldWorkflow,\n                ...body,\n                id: workflowId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate employee exists\n            const employee = employees.find(e => e.id === updatedWorkflow.employeeId);\n            if (!employee) return error('Employee not found');\n            \n            employees.push(updatedWorkflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...updatedWorkflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function updateWorkflowStatus() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflow = workflows.find(x => x.id === workflowId);\n            \n            if (!workflow) return notFound();\n            \n            const newStatus = body.status;\n\n            Object.assign(workflow, {\n                status: newStatus,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok({\n                ...workflow,\n                status: newStatus\n            });\n        }\n\n        function deleteWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n            \n            if (workflowIndex === -1) return notFound();\n            \n            const workflow = workflows[workflowIndex];\n            const employee = employees.find(e => e.id === workflow.employeeId);\n            \n            // Delete workflow\n            workflows = workflows.filter(x => x.id !== workflowId);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function deleteWorkflowItem() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflow = workflows.find(x => x.id === workflowId);\n            \n            if (!workflow) return notFound();\n            \n            // Delete workflow item\n            workflows = workflows.filter(x => x.id !== workflowId);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                status: 'Deleted'\n            });\n        }\n\n        function createAccount() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const account = body;\n            \n            if (accounts.find(x => x.email === account.email)) {\n                return error('Email already exists');\n            }\n            \n            account.id = newAccountId();\n            account.dateCreated = new Date().toISOString();\n            account.isVerified = true;\n            account.refreshTokens = [];\n            \n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n            \n            return ok(basicDetails(account));\n        }\n\n        function updateAccount() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const accountId = idFromUrl();\n            const account = accounts.find(x => x.id === accountId);\n            \n            if (!account) return notFound();\n            if (account.id !== currentAccount().id && !isAdmin()) return unauthorized();\n            \n            // Only allow admins to update role\n            if (!isAdmin()) {\n                delete body.role;\n            }\n            \n            // If email is being changed, make sure it's not already taken\n            if (body.email && body.email !== account.email && accounts.find(x => x.email === body.email)) {\n                return error('Email already exists');\n            }\n            \n            Object.assign(account, body);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n            \n            return ok(basicDetails(account));\n        }\n\n        function deleteAccount() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const accountId = idFromUrl();\n            const account = accounts.find(x => x.id === accountId);\n            \n            if (!account) return notFound();\n            if (account.id === currentAccount().id) return error('You cannot delete your own account');\n            \n            accounts = accounts.filter(x => x.id !== accountId);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n            \n            return ok();\n        }\n    }\n}\n\nexport const fakeBackendProvider = {\n    // use fake backend in place of Http service for backend-less development\n    provide: HTTP_INTERCEPTORS,\n    useClass: FakeBackendInterceptor,\n    multi: true\n};"]},"metadata":{},"sourceType":"module","externalDependencies":[]}