{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@app/_services\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(router, accountService, alertService) {\n      this.router = router;\n      this.accountService = accountService;\n      this.alertService = alertService;\n    }\n    canActivate(route, state) {\n      const account = this.accountService.accountValue;\n      // Check if we're already on the login page to prevent loops\n      if (state.url.startsWith('/account/login')) {\n        return of(true);\n      }\n      if (!account || !account.jwtToken) {\n        console.log('Auth Guard: No account or token found, redirecting to login');\n        // Not logged in, redirect to login page with return url\n        this.router.navigate(['/account/login'], {\n          queryParams: {\n            returnUrl: state.url\n          }\n        });\n        return of(false);\n      }\n      // Always try to refresh token before accessing protected routes\n      return this.accountService.refreshToken().pipe(map(() => {\n        const currentAccount = this.accountService.accountValue;\n        console.log('Auth Guard: Token refreshed, checking roles');\n        // Check if route requires specific roles\n        if (route.data['roles'] && !route.data['roles'].includes(currentAccount === null || currentAccount === void 0 ? void 0 : currentAccount.role)) {\n          console.log('Auth Guard: Role check failed');\n          this.alertService.error('You are unauthorized to access this page.', {\n            keepAfterRouteChange: true,\n            autoClose: true,\n            autoCloseTimeout: 6000\n          });\n          this.router.navigate(['/']);\n          return false;\n        }\n        console.log('Auth Guard: Access granted');\n        return true;\n      }), catchError(error => {\n        console.error('Auth Guard: Token refresh failed:', error);\n        this.alertService.error('Your session has expired. Please log in again.', {\n          keepAfterRouteChange: true,\n          autoClose: true,\n          autoCloseTimeout: 6000\n        });\n        this.router.navigate(['/account/login'], {\n          queryParams: {\n            returnUrl: state.url\n          }\n        });\n        return of(false);\n      }));\n    }\n  }\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AccountService), i0.ɵɵinject(i2.AlertService));\n  };\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}