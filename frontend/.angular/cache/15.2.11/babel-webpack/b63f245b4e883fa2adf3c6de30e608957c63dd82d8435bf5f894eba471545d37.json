{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, finalize } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.employeeSubject = new BehaviorSubject(null);\n      this.employee = this.employeeSubject.asObservable();\n    }\n    get employeeValue() {\n      return this.employeeSubject.value;\n    }\n    getAll() {\n      return this.http.get(`${environment.apiUrl}/employees`);\n    }\n    getById(id) {\n      return this.http.get(`${environment.apiUrl}/employees/${id}`);\n    }\n    getByAccountId(id) {\n      return this.http.get(`${environment.apiUrl}/employees/account/${id}`);\n    }\n    create(employee) {\n      return this.http.post(`${environment.apiUrl}/employees`, employee);\n    }\n    update(id, params) {\n      return this.http.put(`${environment.apiUrl}/employees/${id}`, params).pipe(map(employee => {\n        var _a;\n        // update employee if it's the current employee\n        if (employee.id === ((_a = this.employeeValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          // publish updated employee to subscribers\n          employee = Object.assign(Object.assign({}, this.employeeValue), employee);\n          this.employeeSubject.next(employee);\n        }\n        return employee;\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${environment.apiUrl}/employees/${id}`).pipe(finalize(() => {\n        var _a;\n        // auto logout if the logged in employee was deleted\n        if (id === ((_a = this.employeeValue) === null || _a === void 0 ? void 0 : _a.id)) this.employeeSubject.next(null);\n      }));\n    }\n  }\n  EmployeeService.ɵfac = function EmployeeService_Factory(t) {\n    return new (t || EmployeeService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  EmployeeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeeService,\n    factory: EmployeeService.ɵfac,\n    providedIn: 'root'\n  });\n  return EmployeeService;\n})();","map":{"version":3,"mappings":"AAGA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAE9C,SAASC,WAAW,QAAQ,2BAA2B;;;;AAIvD,WAAaC,eAAe;EAAtB,MAAOA,eAAe;IAIxBC,YACYC,MAAc,EACdC,IAAgB;MADhB,WAAM,GAAND,MAAM;MACN,SAAI,GAAJC,IAAI;MAEZ,IAAI,CAACC,eAAe,GAAG,IAAIR,eAAe,CAAkB,IAAI,CAAC;MACjE,IAAI,CAACS,QAAQ,GAAG,IAAI,CAACD,eAAe,CAACE,YAAY,EAAE;IACvD;IAEA,IAAWC,aAAa;MACpB,OAAO,IAAI,CAACH,eAAe,CAACI,KAAK;IACrC;IAEAC,MAAM;MACF,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAa,GAAGX,WAAW,CAACY,MAAM,YAAY,CAAC;IACvE;IAEAC,OAAO,CAACC,EAAU;MACd,OAAO,IAAI,CAACV,IAAI,CAACO,GAAG,CAAW,GAAGX,WAAW,CAACY,MAAM,cAAcE,EAAE,EAAE,CAAC;IAC3E;IAEAC,cAAc,CAACD,EAAU;MACrB,OAAO,IAAI,CAACV,IAAI,CAACO,GAAG,CAAW,GAAGX,WAAW,CAACY,MAAM,sBAAsBE,EAAE,EAAE,CAAC;IACnF;IAEAE,MAAM,CAACV,QAAkB;MACrB,OAAO,IAAI,CAACF,IAAI,CAACa,IAAI,CAAW,GAAGjB,WAAW,CAACY,MAAM,YAAY,EAAEN,QAAQ,CAAC;IAChF;IAEAY,MAAM,CAACJ,EAAU,EAAEK,MAAW;MAC1B,OAAO,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAW,GAAGpB,WAAW,CAACY,MAAM,cAAcE,EAAE,EAAE,EAAEK,MAAM,CAAC,CAC1EE,IAAI,CAACvB,GAAG,CAACQ,QAAQ,IAAG;;QACjB;QACA,IAAIA,QAAQ,CAACQ,EAAE,MAAK,UAAI,CAACN,aAAa,0CAAEM,EAAE,GAAE;UACxC;UACAR,QAAQ,mCAAQ,IAAI,CAACE,aAAa,GAAKF,QAAQ,CAAE;UACjD,IAAI,CAACD,eAAe,CAACiB,IAAI,CAAChB,QAAQ,CAAC;;QAEvC,OAAOA,QAAQ;MACnB,CAAC,CAAC,CAAC;IACX;IAEAiB,MAAM,CAACT,EAAU;MACb,OAAO,IAAI,CAACV,IAAI,CAACmB,MAAM,CAAC,GAAGvB,WAAW,CAACY,MAAM,cAAcE,EAAE,EAAE,CAAC,CAC3DO,IAAI,CAACtB,QAAQ,CAAC,MAAK;;QAChB;QACA,IAAIe,EAAE,MAAK,UAAI,CAACN,aAAa,0CAAEM,EAAE,GAC7B,IAAI,CAACT,eAAe,CAACiB,IAAI,CAAC,IAAI,CAAC;MACvC,CAAC,CAAC,CAAC;IACX;;;qBApDSrB,eAAe;EAAA;;WAAfA,eAAe;IAAAuB,SAAfvB,eAAe;IAAAwB,YADF;EAAM;EAAA,OACnBxB,eAAe;AAAA","names":["BehaviorSubject","map","finalize","environment","EmployeeService","constructor","router","http","employeeSubject","employee","asObservable","employeeValue","value","getAll","get","apiUrl","getById","id","getByAccountId","create","post","update","params","put","pipe","next","delete","factory","providedIn"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project4 - Copy\\frontend\\src\\app\\_services\\employee.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map, finalize } from 'rxjs/operators';\r\n\r\nimport { environment } from '@environments/environment';\r\nimport { Employee } from '@app/_models';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class EmployeeService {\r\n    private employeeSubject: BehaviorSubject<Employee | null>;\r\n    public employee: Observable<Employee | null>;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private http: HttpClient\r\n    ) {\r\n        this.employeeSubject = new BehaviorSubject<Employee | null>(null);\r\n        this.employee = this.employeeSubject.asObservable();\r\n    }\r\n\r\n    public get employeeValue(): Employee | null {\r\n        return this.employeeSubject.value;\r\n    }\r\n\r\n    getAll() {\r\n        return this.http.get<Employee[]>(`${environment.apiUrl}/employees`);\r\n    }\r\n\r\n    getById(id: string) {\r\n        return this.http.get<Employee>(`${environment.apiUrl}/employees/${id}`);\r\n    }\r\n\r\n    getByAccountId(id: string) {\r\n        return this.http.get<Employee>(`${environment.apiUrl}/employees/account/${id}`);\r\n    }\r\n\r\n    create(employee: Employee) {\r\n        return this.http.post<Employee>(`${environment.apiUrl}/employees`, employee);\r\n    }\r\n\r\n    update(id: string, params: any) {\r\n        return this.http.put<Employee>(`${environment.apiUrl}/employees/${id}`, params)\r\n            .pipe(map(employee => {\r\n                // update employee if it's the current employee\r\n                if (employee.id === this.employeeValue?.id) {\r\n                    // publish updated employee to subscribers\r\n                    employee = { ...this.employeeValue, ...employee };\r\n                    this.employeeSubject.next(employee);\r\n                }\r\n                return employee;\r\n            }));\r\n    }\r\n\r\n    delete(id: string) {\r\n        return this.http.delete(`${environment.apiUrl}/employees/${id}`)\r\n            .pipe(finalize(() => {\r\n                // auto logout if the logged in employee was deleted\r\n                if (id === this.employeeValue?.id)\r\n                    this.employeeSubject.next(null);\r\n            }));\r\n    }\r\n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}