{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@app/_services\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(router, accountService, alertService) {\n      this.router = router;\n      this.accountService = accountService;\n      this.alertService = alertService;\n    }\n    canActivate(route, state) {\n      const account = this.accountService.accountValue;\n      if (!account) {\n        // Check if we're already on the login page to prevent loops\n        if (state.url.startsWith('/account/login')) {\n          return of(true);\n        }\n        // Not logged in, show message and redirect to login\n        this.alertService.error('You are unauthorized. Please log in.', {\n          keepAfterRouteChange: true,\n          autoClose: true,\n          autoCloseTimeout: 6000 // 6 seconds\n        });\n\n        this.router.navigate(['/account/login'], {\n          queryParams: {\n            returnUrl: state.url\n          }\n        });\n        return of(false);\n      }\n      // Check if route requires specific roles\n      if (route.data['roles'] && !route.data['roles'].includes(account.role)) {\n        this.alertService.error('You are unauthorized to access this page.', {\n          keepAfterRouteChange: true,\n          autoClose: true,\n          autoCloseTimeout: 6000 // 6 seconds\n        });\n\n        this.router.navigate(['/']);\n        return of(false);\n      }\n      // Token is valid, allow access\n      return of(true);\n    }\n  }\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AccountService), i0.ɵɵinject(i2.AlertService));\n  };\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;;;;AAMrC,WAAaC,SAAS;EAAhB,MAAOA,SAAS;IAClBC,YACYC,MAAc,EACdC,cAA8B,EAC9BC,YAA0B;MAF1B,WAAM,GAANF,MAAM;MACN,mBAAc,GAAdC,cAAc;MACd,iBAAY,GAAZC,YAAY;IACpB;IAEJC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;MACjE,MAAMC,OAAO,GAAG,IAAI,CAACL,cAAc,CAACM,YAAY;MAEhD,IAAI,CAACD,OAAO,EAAE;QACV;QACA,IAAID,KAAK,CAACG,GAAG,CAACC,UAAU,CAAC,gBAAgB,CAAC,EAAE;UACxC,OAAOZ,EAAE,CAAC,IAAI,CAAC;;QAGnB;QACA,IAAI,CAACK,YAAY,CAACQ,KAAK,CAAC,sCAAsC,EAAE;UAC5DC,oBAAoB,EAAE,IAAI;UAC1BC,SAAS,EAAE,IAAI;UACfC,gBAAgB,EAAE,IAAI,CAAC;SAC1B,CAAC;;QACF,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,gBAAgB,CAAC,EAAE;UAAEC,WAAW,EAAE;YAAEC,SAAS,EAAEX,KAAK,CAACG;UAAG;QAAE,CAAE,CAAC;QACnF,OAAOX,EAAE,CAAC,KAAK,CAAC;;MAGpB;MACA,IAAIO,KAAK,CAACa,IAAI,CAAC,OAAO,CAAC,IAAI,CAACb,KAAK,CAACa,IAAI,CAAC,OAAO,CAAC,CAACC,QAAQ,CAACZ,OAAO,CAACa,IAAI,CAAC,EAAE;QACpE,IAAI,CAACjB,YAAY,CAACQ,KAAK,CAAC,2CAA2C,EAAE;UACjEC,oBAAoB,EAAE,IAAI;UAC1BC,SAAS,EAAE,IAAI;UACfC,gBAAgB,EAAE,IAAI,CAAC;SAC1B,CAAC;;QACF,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC3B,OAAOjB,EAAE,CAAC,KAAK,CAAC;;MAGpB;MACA,OAAOA,EAAE,CAAC,IAAI,CAAC;IACnB;;;qBAvCSC,SAAS;EAAA;;WAATA,SAAS;IAAAsB,SAATtB,SAAS;IAAAuB,YADI;EAAM;EAAA,OACnBvB,SAAS;AAAA","names":["of","AuthGuard","constructor","router","accountService","alertService","canActivate","route","state","account","accountValue","url","startsWith","error","keepAfterRouteChange","autoClose","autoCloseTimeout","navigate","queryParams","returnUrl","data","includes","role","factory","providedIn"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project7\\frontend\\src\\app\\_helpers\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { AccountService } from '@app/_services';\nimport { AlertService } from '@app/_services';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard {\n    constructor(\n        private router: Router,\n        private accountService: AccountService,\n        private alertService: AlertService\n    ) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n        const account = this.accountService.accountValue;\n        \n        if (!account) {\n            // Check if we're already on the login page to prevent loops\n            if (state.url.startsWith('/account/login')) {\n                return of(true);\n            }\n\n            // Not logged in, show message and redirect to login\n            this.alertService.error('You are unauthorized. Please log in.', { \n                keepAfterRouteChange: true,\n                autoClose: true,\n                autoCloseTimeout: 6000 // 6 seconds\n            });\n            this.router.navigate(['/account/login'], { queryParams: { returnUrl: state.url } });\n            return of(false);\n        }\n\n        // Check if route requires specific roles\n        if (route.data['roles'] && !route.data['roles'].includes(account.role)) {\n            this.alertService.error('You are unauthorized to access this page.', { \n                keepAfterRouteChange: true,\n                autoClose: true,\n                autoCloseTimeout: 6000 // 6 seconds\n            });\n            this.router.navigate(['/']);\n            return of(false);\n        }\n\n        // Token is valid, allow access\n        return of(true);\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}