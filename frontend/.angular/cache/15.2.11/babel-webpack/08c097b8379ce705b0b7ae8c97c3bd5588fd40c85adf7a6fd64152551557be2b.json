{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { map, finalize, catchError } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/accounts`;\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.refreshingToken = false;\n      this.TOKEN_REFRESH_THRESHOLD = 5 * 60 * 1000; // 5 minutes in milliseconds\n      this.accountSubject = new BehaviorSubject(null);\n      this.account = this.accountSubject.asObservable();\n    }\n    get accountValue() {\n      return this.accountSubject.value;\n    }\n    get userValue() {\n      return this.accountValue;\n    }\n    get isAdmin() {\n      var _a;\n      return ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n    }\n    login(email, password) {\n      return this.http.post(`${baseUrl}/authenticate`, {\n        email,\n        password\n      }, {\n        withCredentials: true\n      }).pipe(map(account => {\n        console.log('Login response:', account);\n        if (!account) {\n          throw new Error('Invalid login response');\n        }\n        // Update the account subject\n        this.accountSubject.next(account);\n        this.startRefreshTokenTimer();\n        return account;\n      }), catchError(error => {\n        console.error('Login error details:', error);\n        // Handle specific error responses from the server\n        if (error.error) {\n          if (error.error.status === 'Inactive') {\n            return throwError(() => 'Account is inactive. Please contact administrator.');\n          }\n          if (error.error.message) {\n            return throwError(() => error.error.message);\n          }\n        }\n        // Handle direct error messages\n        if (error.message) {\n          return throwError(() => error.message);\n        }\n        // Fallback error message\n        return throwError(() => 'An error occurred during login. Please try again.');\n      }));\n    }\n    logout() {\n      return this.http.post(`${baseUrl}/revoke-token`, {}, {\n        withCredentials: true\n      }).pipe(finalize(() => {\n        this.stopRefreshTokenTimer();\n        this.accountSubject.next(null);\n        this.router.navigate(['/account/login']);\n      }));\n    }\n    refreshToken() {\n      if (this.refreshingToken) {\n        return this.account;\n      }\n      this.refreshingToken = true;\n      return this.http.post(`${baseUrl}/refresh-token`, {}, {\n        withCredentials: true,\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        }\n      }).pipe(map(response => {\n        if (!response) {\n          throw new Error('Invalid refresh token response');\n        }\n        // Update the account subject with the new data\n        this.accountSubject.next(response);\n        // Restart the refresh timer\n        this.startRefreshTokenTimer();\n        return response;\n      }), catchError(error => {\n        console.error('Token refresh failed:', error);\n        // On refresh failure, clear the account state\n        this.stopRefreshTokenTimer();\n        this.accountSubject.next(null);\n        this.router.navigate(['/account/login']);\n        return throwError(() => error);\n      }), finalize(() => {\n        this.refreshingToken = false;\n      }));\n    }\n    register(account) {\n      return this.http.post(`${baseUrl}/register`, account, {\n        observe: 'response'\n      });\n    }\n    verifyEmail(token) {\n      return this.http.post(`${baseUrl}/verify-email`, {\n        token\n      });\n    }\n    forgotPassword(email) {\n      return this.http.post(`${baseUrl}/forgot-password`, {\n        email\n      });\n    }\n    validateResetToken(token) {\n      return this.http.post(`${baseUrl}/validate-reset-token`, {\n        token\n      });\n    }\n    resetPassword(token, password, confirmPassword) {\n      return this.http.post(`${baseUrl}/reset-password`, {\n        token,\n        password,\n        confirmPassword\n      });\n    }\n    getAll() {\n      return this.http.get(baseUrl);\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n    create(params) {\n      return this.http.post(baseUrl, params);\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params).pipe(map(account => {\n        var _a;\n        // update the current account if it was updated\n        if (account.id === ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          // publish updated account to subscribers\n          account = Object.assign(Object.assign({}, this.accountValue), account);\n          this.accountSubject.next(account);\n        }\n        return account;\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`).pipe(map(x => {\n        var _a;\n        // auto logout if the logged in account was deleted\n        if (id === ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          this.logout();\n        }\n        return x;\n      }));\n    }\n    clearAccountData() {\n      this.stopRefreshTokenTimer();\n      this.accountSubject.next(null);\n      this.refreshingToken = false;\n    }\n    startRefreshTokenTimer() {\n      var _a;\n      // Parse the JWT token\n      const jwtToken = (_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.jwtToken;\n      if (!jwtToken) return;\n      try {\n        const jwtPayload = JSON.parse(atob(jwtToken.split('.')[1]));\n        const expires = new Date(jwtPayload.exp * 1000);\n        const timeout = expires.getTime() - Date.now() - 60 * 1000; // Refresh 1 minute before expiry\n        this.stopRefreshTokenTimer();\n        this.refreshTokenTimeout = setTimeout(() => {\n          console.log('Token refresh timer triggered');\n          this.refreshToken().subscribe();\n        }, Math.max(0, timeout));\n      } catch (error) {\n        console.error('Error starting refresh token timer:', error);\n        this.accountSubject.next(null);\n      }\n    }\n    stopRefreshTokenTimer() {\n      if (this.refreshTokenTimeout) {\n        clearTimeout(this.refreshTokenTimeout);\n        this.refreshTokenTimeout = null;\n      }\n    }\n  }\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}