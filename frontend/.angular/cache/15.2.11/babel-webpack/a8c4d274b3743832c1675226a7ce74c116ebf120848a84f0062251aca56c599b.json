{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@app/_services\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    constructor(router, accountService) {\n      this.router = router;\n      this.accountService = accountService;\n    }\n    canActivate(route, state) {\n      const account = this.accountService.accountValue;\n      if (!account) {\n        this.router.navigate(['/account/login'], {\n          queryParams: {\n            returnUrl: state.url\n          }\n        });\n        return of(false);\n      }\n      // Check if token is valid or needs refresh\n      if (!this.accountService.isTokenValid(account)) {\n        console.log('Token needs refresh in auth guard');\n        // Try to refresh the token\n        return this.accountService.refreshToken().pipe(map(() => {\n          var _a;\n          console.log('Token refresh successful in auth guard');\n          // Check role after successful refresh\n          if (route.data['roles'] && !route.data['roles'].includes((_a = this.accountService.accountValue) === null || _a === void 0 ? void 0 : _a.role)) {\n            this.router.navigate(['/']);\n            return false;\n          }\n          return true;\n        }), catchError(error => {\n          console.error('Token refresh failed in auth guard:', error);\n          this.router.navigate(['/account/login'], {\n            queryParams: {\n              returnUrl: state.url\n            }\n          });\n          return of(false);\n        }));\n      }\n      // Check if user has required role\n      if (route.data['roles'] && !route.data['roles'].includes(account.role)) {\n        console.log('User does not have required role');\n        this.router.navigate(['/']);\n        return of(false);\n      }\n      return of(true);\n    }\n  }\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AccountService));\n  };\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthGuard;\n})();","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAEC,GAAG,QAAmB,gBAAgB;;;;AAI3D,WAAaC,SAAS;EAAhB,MAAOA,SAAS;IAClBC,YACYC,MAAc,EACdC,cAA8B;MAD9B,WAAM,GAAND,MAAM;MACN,mBAAc,GAAdC,cAAc;IACtB;IAEJC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;MACjE,MAAMC,OAAO,GAAG,IAAI,CAACJ,cAAc,CAACK,YAAY;MAEhD,IAAI,CAACD,OAAO,EAAE;QACV,IAAI,CAACL,MAAM,CAACO,QAAQ,CAAC,CAAC,gBAAgB,CAAC,EAAE;UAAEC,WAAW,EAAE;YAAEC,SAAS,EAAEL,KAAK,CAACM;UAAG;QAAE,CAAE,CAAC;QACnF,OAAOf,EAAE,CAAC,KAAK,CAAC;;MAGpB;MACA,IAAI,CAAC,IAAI,CAACM,cAAc,CAACU,YAAY,CAACN,OAAO,CAAC,EAAE;QAC5CO,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;QAChD;QACA,OAAO,IAAI,CAACZ,cAAc,CAACa,YAAY,EAAE,CAACC,IAAI,CAC1ClB,GAAG,CAAC,MAAK;;UACLe,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;UACrD;UACA,IAAIV,KAAK,CAACa,IAAI,CAAC,OAAO,CAAC,IAAI,CAACb,KAAK,CAACa,IAAI,CAAC,OAAO,CAAC,CAACC,QAAQ,CAAC,UAAI,CAAChB,cAAc,CAACK,YAAY,0CAAEY,IAAI,CAAC,EAAE;YACtG,IAAI,CAAClB,MAAM,CAACO,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;YAC3B,OAAO,KAAK;;UAEhB,OAAO,IAAI;QACP,CAAC,CAAC,EACFX,UAAU,CAAEuB,KAAK,IAAI;UACjBP,OAAO,CAACO,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;UAC3D,IAAI,CAACnB,MAAM,CAACO,QAAQ,CAAC,CAAC,gBAAgB,CAAC,EAAE;YAAEC,WAAW,EAAE;cAAEC,SAAS,EAAEL,KAAK,CAACM;YAAG;UAAE,CAAE,CAAC;UACnF,OAAOf,EAAE,CAAC,KAAK,CAAC;QACpB,CAAC,CAAC,CACL;;MAGL;MACA,IAAIQ,KAAK,CAACa,IAAI,CAAC,OAAO,CAAC,IAAI,CAACb,KAAK,CAACa,IAAI,CAAC,OAAO,CAAC,CAACC,QAAQ,CAACZ,OAAO,CAACa,IAAI,CAAC,EAAE;QACpEN,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;QAC3C,IAAI,CAACb,MAAM,CAACO,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QAC/B,OAAOZ,EAAE,CAAC,KAAK,CAAC;;MAGpB,OAAOA,EAAE,CAAC,IAAI,CAAC;IACnB;;;qBA5CSG,SAAS;EAAA;;WAATA,SAAS;IAAAsB,SAATtB,SAAS;IAAAuB,YADI;EAAM;EAAA,OACnBvB,SAAS;AAAA","names":["of","catchError","map","AuthGuard","constructor","router","accountService","canActivate","route","state","account","accountValue","navigate","queryParams","returnUrl","url","isTokenValid","console","log","refreshToken","pipe","data","includes","role","error","factory","providedIn"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\_helpers\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { AccountService } from '@app/_services';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard {\n    constructor(\n        private router: Router,\n        private accountService: AccountService\n    ) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n        const account = this.accountService.accountValue;\n        \n        if (!account) {\n            this.router.navigate(['/account/login'], { queryParams: { returnUrl: state.url } });\n            return of(false);\n        }\n\n        // Check if token is valid or needs refresh\n        if (!this.accountService.isTokenValid(account)) {\n            console.log('Token needs refresh in auth guard');\n            // Try to refresh the token\n            return this.accountService.refreshToken().pipe(\n                map(() => {\n                    console.log('Token refresh successful in auth guard');\n                    // Check role after successful refresh\n                    if (route.data['roles'] && !route.data['roles'].includes(this.accountService.accountValue?.role)) {\n                this.router.navigate(['/']);\n                return false;\n            }\n            return true;\n                }),\n                catchError((error) => {\n                    console.error('Token refresh failed in auth guard:', error);\n                    this.router.navigate(['/account/login'], { queryParams: { returnUrl: state.url } });\n                    return of(false);\n                })\n            );\n        }\n\n        // Check if user has required role\n        if (route.data['roles'] && !route.data['roles'].includes(account.role)) {\n            console.log('User does not have required role');\n                this.router.navigate(['/']);\n            return of(false);\n        }\n\n        return of(true);\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}