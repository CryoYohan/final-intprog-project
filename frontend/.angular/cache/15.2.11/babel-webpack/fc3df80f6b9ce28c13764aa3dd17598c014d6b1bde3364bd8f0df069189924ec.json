{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services\";\nimport * as i4 from \"@angular/common\";\nfunction AddEditComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" for Employee #\", ctx_r0.employeeId, \" - \", ctx_r0.employeeFullName, \" \");\n  }\n}\nfunction AddEditComponent_div_18_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Type is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, AddEditComponent_div_18_div_1_Template, 2, 0, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.type.errors.required);\n  }\n}\nfunction AddEditComponent_div_19_div_4_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Item name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_19_div_4_div_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Item name must be less than 100 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_19_div_4_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, AddEditComponent_div_19_div_4_div_3_div_1_Template, 2, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, AddEditComponent_div_19_div_4_div_3_div_2_Template, 2, 0, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r7 = i0.ɵɵnextContext().$implicit;\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = item_r7.get(\"name\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = item_r7.get(\"name\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.maxlength);\n  }\n}\nfunction AddEditComponent_div_19_div_4_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Quantity is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_19_div_4_div_6_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Quantity must be at least 1\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_19_div_4_div_6_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Quantity must be less than 10000\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_19_div_4_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, AddEditComponent_div_19_div_4_div_6_div_1_Template, 2, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, AddEditComponent_div_19_div_4_div_6_div_2_Template, 2, 0, \"div\", 2);\n    i0.ɵɵtemplate(3, AddEditComponent_div_19_div_4_div_6_div_3_Template, 2, 0, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r7 = i0.ɵɵnextContext().$implicit;\n    let tmp_0_0;\n    let tmp_1_0;\n    let tmp_2_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = item_r7.get(\"quantity\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = item_r7.get(\"quantity\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.min);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = item_r7.get(\"quantity\")) == null ? null : tmp_2_0.errors == null ? null : tmp_2_0.errors.max);\n  }\n}\nfunction AddEditComponent_div_19_div_4_button_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 32);\n    i0.ɵɵlistener(\"click\", function AddEditComponent_div_19_div_4_button_8_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r22);\n      const i_r8 = i0.ɵɵnextContext().index;\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r20.removeItem(i_r8));\n    });\n    i0.ɵɵelement(1, \"i\", 33);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_19_div_4_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function AddEditComponent_div_19_div_4_button_9_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const i_r8 = i0.ɵɵnextContext().index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.restoreItem(i_r8));\n    });\n    i0.ɵɵelement(1, \"i\", 34);\n    i0.ɵɵtext(2, \" Restore \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nfunction AddEditComponent_div_19_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24)(1, \"div\", 25);\n    i0.ɵɵelement(2, \"input\", 26);\n    i0.ɵɵtemplate(3, AddEditComponent_div_19_div_4_div_3_Template, 3, 2, \"div\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 27);\n    i0.ɵɵelement(5, \"input\", 28);\n    i0.ɵɵtemplate(6, AddEditComponent_div_19_div_4_div_6_Template, 4, 3, \"div\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 29);\n    i0.ɵɵtemplate(8, AddEditComponent_div_19_div_4_button_8_Template, 2, 0, \"button\", 30);\n    i0.ɵɵtemplate(9, AddEditComponent_div_19_div_4_button_9_Template, 3, 0, \"button\", 31);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r7 = ctx.$implicit;\n    const i_r8 = ctx.index;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    let tmp_2_0;\n    let tmp_3_0;\n    let tmp_4_0;\n    let tmp_5_0;\n    i0.ɵɵclassProp(\"d-none\", ctx_r5.isItemHidden(i_r8));\n    i0.ɵɵproperty(\"formGroupName\", i_r8);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx_r5.submitted && ((tmp_2_0 = item_r7.get(\"name\")) == null ? null : tmp_2_0.errors)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.submitted && ((tmp_3_0 = item_r7.get(\"name\")) == null ? null : tmp_3_0.errors));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx_r5.submitted && ((tmp_4_0 = item_r7.get(\"quantity\")) == null ? null : tmp_4_0.errors)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.submitted && ((tmp_5_0 = item_r7.get(\"quantity\")) == null ? null : tmp_5_0.errors));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r5.isItemHidden(i_r8));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.isItemHidden(i_r8));\n  }\n}\nfunction AddEditComponent_div_19_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 35);\n    i0.ɵɵtext(1, \" At least one item is required for Equipment and Resources requests \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"h3\");\n    i0.ɵɵtext(2, \"Items\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 19);\n    i0.ɵɵtemplate(4, AddEditComponent_div_19_div_4_Template, 10, 13, \"div\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 21)(6, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function AddEditComponent_div_19_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.addItem());\n    });\n    i0.ɵɵtext(7, \"Add Item\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(8, AddEditComponent_div_19_div_8_Template, 2, 0, \"div\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_1_0;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.items.controls);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.submitted && ((tmp_1_0 = ctx_r2.form.get(\"type\")) == null ? null : tmp_1_0.value) !== \"Leave\" && ctx_r2.items.length === 0);\n  }\n}\nfunction AddEditComponent_span_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 36);\n  }\n}\nexport let AddEditComponent = /*#__PURE__*/(() => {\n  class AddEditComponent {\n    constructor(formBuilder, route, router, requestService, alertService, accountService, employeeService) {\n      var _a;\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.requestService = requestService;\n      this.alertService = alertService;\n      this.accountService = accountService;\n      this.employeeService = employeeService;\n      this.loading = false;\n      this.submitted = false;\n      this.employeeId = null;\n      this.employeeFullName = null;\n      this.isAdmin = false;\n      this.deletedItems = []; // Track items marked for deletion\n      this.originalItems = []; // Store original items for comparison\n      this.hiddenItems = {}; // Track visually hidden items\n      this.isAdmin = ((_a = this.accountService.accountValue) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n    }\n    // Getter for checking if items section should be shown\n    get showItemsSection() {\n      var _a, _b;\n      const type = (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('type')) === null || _b === void 0 ? void 0 : _b.value;\n      return type === 'Equipment' || type === 'Resources';\n    }\n    // getter for items FormArray\n    get items() {\n      return this.f.items;\n    }\n    // convenience getter for easy access to form fields\n    get f() {\n      return this.form.controls;\n    }\n    ngOnInit() {\n      var _a;\n      this.id = this.route.snapshot.params['id'];\n      this.isAddMode = !this.id;\n      // Get employeeId from query params\n      const params = this.route.snapshot.queryParams;\n      this.employeeId = params['employeeId'];\n      // If we have an employeeId, load employee details\n      if (this.employeeId) {\n        this.employeeService.getById(this.employeeId).pipe(first()).subscribe({\n          next: employee => {\n            if (employee && employee.account) {\n              this.employeeFullName = `${employee.account.firstName} ${employee.account.lastName}`;\n            }\n          },\n          error: error => {\n            this.alertService.error(error);\n          }\n        });\n      }\n      this.form = this.formBuilder.group({\n        type: ['', Validators.required],\n        items: this.formBuilder.array([])\n      });\n      // Watch for type changes to handle item validation\n      (_a = this.form.get('type')) === null || _a === void 0 ? void 0 : _a.valueChanges.subscribe(type => {\n        const itemsArray = this.form.get('items');\n        if (type === 'Leave') {\n          itemsArray.clearValidators();\n        } else {\n          itemsArray.setValidators([Validators.required, Validators.minLength(1)]);\n        }\n        itemsArray.updateValueAndValidity();\n      });\n      if (!this.isAddMode) {\n        this.requestService.getById(this.id).pipe(first()).subscribe({\n          next: request => {\n            var _a;\n            // If editing, use the employeeId from the request\n            this.employeeId = (_a = request.employeeId) === null || _a === void 0 ? void 0 : _a.toString();\n            // Load employee details if not already loaded\n            if (this.employeeId && !this.employeeFullName) {\n              this.employeeService.getById(this.employeeId).pipe(first()).subscribe(employee => {\n                if (employee && employee.account) {\n                  this.employeeFullName = `${employee.account.firstName} ${employee.account.lastName}`;\n                }\n              });\n            }\n            this.form.patchValue({\n              type: request.type\n            });\n            // Load items if any\n            if (request.items && request.items.length > 0) {\n              request.items.forEach(item => {\n                this.items.push(this.formBuilder.group({\n                  id: [item.id],\n                  name: [item.name, [Validators.required, Validators.maxLength(100)]],\n                  quantity: [item.quantity, [Validators.required, Validators.min(1), Validators.max(9999)]]\n                }));\n              });\n              this.originalItems = [...request.items];\n            }\n          },\n          error: error => {\n            this.alertService.error(error);\n          }\n        });\n      }\n    }\n    // Add item to form\n    addItem(item = null) {\n      const itemForm = this.formBuilder.group({\n        id: [item ? item.id : null],\n        name: [item ? item.name : '', [Validators.required, Validators.maxLength(100)]],\n        quantity: [item ? item.quantity : '', [Validators.required, Validators.min(1), Validators.max(9999)]]\n      });\n      this.items.push(itemForm);\n    }\n    // Remove item\n    removeItem(index) {\n      const item = this.items.at(index).value;\n      if (item.id) {\n        // If item has an ID, it exists in the database\n        this.deletedItems.push(item.id);\n        this.hiddenItems[index] = true;\n      } else {\n        // If no ID, it's a new item that can be removed directly\n        this.items.removeAt(index);\n      }\n    }\n    // Check if item is hidden\n    isItemHidden(index) {\n      return this.hiddenItems[index] === true;\n    }\n    onSubmit() {\n      var _a, _b, _c;\n      this.submitted = true;\n      this.alertService.clear();\n      // stop here if form is invalid\n      if (this.form.invalid) {\n        return;\n      }\n      // Ensure employeeId is set\n      if (!this.employeeId) {\n        // Try to get employeeId from query params again\n        const params = this.route.snapshot.queryParams;\n        this.employeeId = params['employeeId'] || ((_b = (_a = this.accountService.accountValue) === null || _a === void 0 ? void 0 : _a.id) === null || _b === void 0 ? void 0 : _b.toString());\n        if (!this.employeeId) {\n          this.alertService.error('Employee ID is required');\n          return;\n        }\n      }\n      // Validate items if type is not Leave\n      if (this.form.value.type !== 'Leave' && this.items.length === 0) {\n        this.alertService.error('At least one item is required for Equipment and Resources requests');\n        return;\n      }\n      this.loading = true;\n      // Get visible items only\n      const visibleItems = this.items.controls.filter((_, index) => !this.isItemHidden(index)).map(control => {\n        const value = control.value;\n        // Only include id if it exists (for existing items)\n        return Object.assign(Object.assign({}, value.id ? {\n          id: value.id\n        } : {}), {\n          name: value.name,\n          quantity: value.quantity\n        });\n      });\n      // Prepare request data\n      const requestData = {\n        type: this.form.value.type,\n        employeeId: Number(this.employeeId),\n        items: visibleItems,\n        isAdmin: ((_c = this.accountService.accountValue) === null || _c === void 0 ? void 0 : _c.role) === Role.Admin\n      };\n      if (this.isAddMode) {\n        this.createRequest(requestData);\n      } else {\n        this.updateRequest(requestData);\n      }\n    }\n    createRequest(requestData) {\n      this.requestService.create(requestData).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Request added successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['../'], {\n            relativeTo: this.route,\n            queryParams: {\n              employeeId: this.employeeId\n            }\n          });\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    updateRequest(requestData) {\n      this.requestService.update(this.id, requestData).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Request updated successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['../../'], {\n            relativeTo: this.route,\n            queryParams: {\n              employeeId: this.employeeId\n            }\n          });\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    onCancel() {\n      // Navigate back to the requests list with the employee parameter if it exists\n      if (this.employeeId) {\n        this.router.navigate(['/requests'], {\n          queryParams: {\n            employeeId: this.employeeId\n          }\n        });\n      } else {\n        this.router.navigate(['/requests']);\n      }\n    }\n  }\n  AddEditComponent.ɵfac = function AddEditComponent_Factory(t) {\n    return new (t || AddEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.RequestService), i0.ɵɵdirectiveInject(i3.AlertService), i0.ɵɵdirectiveInject(i3.AccountService), i0.ɵɵdirectiveInject(i3.EmployeeService));\n  };\n  AddEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddEditComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 26,\n    vars: 10,\n    consts: [[1, \"card\"], [1, \"card-header\"], [4, \"ngIf\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [1, \"form-label\"], [\"formControlName\", \"type\", 1, \"form-select\", 3, \"ngClass\"], [\"value\", \"\"], [\"value\", \"Equipment\"], [\"value\", \"Leave\"], [\"value\", \"Resources\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"class\", \"mb-3\", 4, \"ngIf\"], [1, \"mt-4\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-1\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-link\", 3, \"click\"], [1, \"invalid-feedback\"], [\"formArrayName\", \"items\"], [\"class\", \"row mb-2\", 3, \"formGroupName\", \"d-none\", 4, \"ngFor\", \"ngForOf\"], [1, \"mt-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"class\", \"text-danger mt-2\", 4, \"ngIf\"], [1, \"row\", \"mb-2\", 3, \"formGroupName\"], [1, \"col-5\"], [\"type\", \"text\", \"formControlName\", \"name\", \"placeholder\", \"Item name\", 1, \"form-control\", 3, \"ngClass\"], [1, \"col-3\"], [\"type\", \"number\", \"formControlName\", \"quantity\", \"placeholder\", \"Quantity\", 1, \"form-control\", 3, \"ngClass\"], [1, \"col-4\"], [\"type\", \"button\", \"class\", \"btn btn-danger me-2\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"class\", \"btn btn-secondary\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", \"me-2\", 3, \"click\"], [1, \"fas\", \"fa-trash\"], [1, \"fas\", \"fa-undo\"], [1, \"text-danger\", \"mt-2\"], [1, \"spinner-border\", \"spinner-border-sm\", \"me-1\"]],\n    template: function AddEditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵtemplate(3, AddEditComponent_ng_container_3_Template, 2, 2, \"ng-container\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"form\", 4);\n        i0.ɵɵlistener(\"ngSubmit\", function AddEditComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n        i0.ɵɵtext(8, \"Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"select\", 7)(10, \"option\", 8);\n        i0.ɵɵtext(11, \"Choose type...\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"option\", 9);\n        i0.ɵɵtext(13, \"Equipment\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"option\", 10);\n        i0.ɵɵtext(15, \"Leave\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"option\", 11);\n        i0.ɵɵtext(17, \"Resources\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(18, AddEditComponent_div_18_Template, 2, 1, \"div\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(19, AddEditComponent_div_19_Template, 9, 2, \"div\", 13);\n        i0.ɵɵelementStart(20, \"div\", 14)(21, \"button\", 15);\n        i0.ɵɵtemplate(22, AddEditComponent_span_22_Template, 1, 0, \"span\", 16);\n        i0.ɵɵtext(23, \" Save Request \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"button\", 17);\n        i0.ɵɵlistener(\"click\", function AddEditComponent_Template_button_click_24_listener() {\n          return ctx.onCancel();\n        });\n        i0.ɵɵtext(25, \"Cancel\");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.isAddMode ? \"Add Request\" : \"Edit Request\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.employeeId && ctx.employeeFullName);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c0, ctx.submitted && ctx.f.type.errors));\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.type.errors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showItemsSection);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n      }\n    },\n    dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName],\n    encapsulation: 2\n  });\n  return AddEditComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}