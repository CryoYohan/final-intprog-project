{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services\";\nimport * as i4 from \"@angular/common\";\nfunction AddEditComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" for Employee #\", ctx_r0.employeeId, \" - \", ctx_r0.employeeFullName, \" \");\n  }\n}\nfunction AddEditComponent_div_18_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Type is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, AddEditComponent_div_18_div_1_Template, 2, 0, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.type.errors.required);\n  }\n}\nfunction AddEditComponent_div_19_div_4_div_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Item name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_19_div_4_div_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Item name must be less than 100 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_19_div_4_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, AddEditComponent_div_19_div_4_div_3_div_1_Template, 2, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, AddEditComponent_div_19_div_4_div_3_div_2_Template, 2, 0, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r7 = i0.ɵɵnextContext().$implicit;\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = item_r7.get(\"name\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = item_r7.get(\"name\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.maxlength);\n  }\n}\nfunction AddEditComponent_div_19_div_4_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Quantity is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_19_div_4_div_6_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Quantity must be at least 1\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_19_div_4_div_6_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Quantity must be less than 10000\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_19_div_4_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵtemplate(1, AddEditComponent_div_19_div_4_div_6_div_1_Template, 2, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, AddEditComponent_div_19_div_4_div_6_div_2_Template, 2, 0, \"div\", 2);\n    i0.ɵɵtemplate(3, AddEditComponent_div_19_div_4_div_6_div_3_Template, 2, 0, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r7 = i0.ɵɵnextContext().$implicit;\n    let tmp_0_0;\n    let tmp_1_0;\n    let tmp_2_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = item_r7.get(\"quantity\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = item_r7.get(\"quantity\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors.min);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = item_r7.get(\"quantity\")) == null ? null : tmp_2_0.errors == null ? null : tmp_2_0.errors.max);\n  }\n}\nfunction AddEditComponent_div_19_div_4_button_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 32);\n    i0.ɵɵlistener(\"click\", function AddEditComponent_div_19_div_4_button_8_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r22);\n      const i_r8 = i0.ɵɵnextContext().index;\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r20.removeItem(i_r8));\n    });\n    i0.ɵɵelement(1, \"i\", 33);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_19_div_4_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function AddEditComponent_div_19_div_4_button_9_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const i_r8 = i0.ɵɵnextContext().index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.restoreItem(i_r8));\n    });\n    i0.ɵɵelement(1, \"i\", 34);\n    i0.ɵɵtext(2, \" Restore \");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nfunction AddEditComponent_div_19_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24)(1, \"div\", 25);\n    i0.ɵɵelement(2, \"input\", 26);\n    i0.ɵɵtemplate(3, AddEditComponent_div_19_div_4_div_3_Template, 3, 2, \"div\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 27);\n    i0.ɵɵelement(5, \"input\", 28);\n    i0.ɵɵtemplate(6, AddEditComponent_div_19_div_4_div_6_Template, 4, 3, \"div\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 29);\n    i0.ɵɵtemplate(8, AddEditComponent_div_19_div_4_button_8_Template, 2, 0, \"button\", 30);\n    i0.ɵɵtemplate(9, AddEditComponent_div_19_div_4_button_9_Template, 3, 0, \"button\", 31);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r7 = ctx.$implicit;\n    const i_r8 = ctx.index;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    let tmp_2_0;\n    let tmp_3_0;\n    let tmp_4_0;\n    let tmp_5_0;\n    i0.ɵɵclassProp(\"d-none\", ctx_r5.isItemHidden(i_r8));\n    i0.ɵɵproperty(\"formGroupName\", i_r8);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx_r5.submitted && ((tmp_2_0 = item_r7.get(\"name\")) == null ? null : tmp_2_0.errors)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.submitted && ((tmp_3_0 = item_r7.get(\"name\")) == null ? null : tmp_3_0.errors));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx_r5.submitted && ((tmp_4_0 = item_r7.get(\"quantity\")) == null ? null : tmp_4_0.errors)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.submitted && ((tmp_5_0 = item_r7.get(\"quantity\")) == null ? null : tmp_5_0.errors));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r5.isItemHidden(i_r8));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.isItemHidden(i_r8));\n  }\n}\nfunction AddEditComponent_div_19_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 35);\n    i0.ɵɵtext(1, \" At least one item is required for Equipment and Resources requests \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"h3\");\n    i0.ɵɵtext(2, \"Items\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 19);\n    i0.ɵɵtemplate(4, AddEditComponent_div_19_div_4_Template, 10, 13, \"div\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 21)(6, \"button\", 22);\n    i0.ɵɵlistener(\"click\", function AddEditComponent_div_19_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r26.addItem());\n    });\n    i0.ɵɵtext(7, \"Add Item\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(8, AddEditComponent_div_19_div_8_Template, 2, 0, \"div\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_1_0;\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.items.controls);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.submitted && ((tmp_1_0 = ctx_r2.form.get(\"type\")) == null ? null : tmp_1_0.value) !== \"Leave\" && ctx_r2.items.length === 0);\n  }\n}\nfunction AddEditComponent_span_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 36);\n  }\n}\nexport let AddEditComponent = /*#__PURE__*/(() => {\n  class AddEditComponent {\n    constructor(formBuilder, route, router, requestService, alertService, accountService, employeeService) {\n      var _a;\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.requestService = requestService;\n      this.alertService = alertService;\n      this.accountService = accountService;\n      this.employeeService = employeeService;\n      this.loading = false;\n      this.submitted = false;\n      this.employeeId = null;\n      this.employeeFullName = null;\n      this.isAdmin = false;\n      this.deletedItems = []; // Track items marked for deletion\n      this.originalItems = []; // Store original items for comparison\n      this.hiddenItems = {}; // Track visually hidden items\n      this.isAdmin = ((_a = this.accountService.accountValue) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n    }\n    // Getter for checking if items section should be shown\n    get showItemsSection() {\n      var _a, _b;\n      const type = (_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('type')) === null || _b === void 0 ? void 0 : _b.value;\n      return type === 'Equipment' || type === 'Resources';\n    }\n    // getter for items FormArray\n    get items() {\n      return this.f.items;\n    }\n    // convenience getter for easy access to form fields\n    get f() {\n      return this.form.controls;\n    }\n    ngOnInit() {\n      var _a;\n      this.id = this.route.snapshot.params['id'];\n      this.isAddMode = !this.id;\n      // Get employeeId from query params\n      const params = this.route.snapshot.queryParams;\n      this.employeeId = params['employeeid'];\n      // If we have an employeeId, load employee details\n      if (this.employeeId) {\n        this.employeeService.getById(this.employeeId).pipe(first()).subscribe({\n          next: employee => {\n            if (employee && employee.account) {\n              const firstName = employee.account.firstName.charAt(0).toUpperCase() + employee.account.firstName.slice(1).toLowerCase();\n              const lastName = employee.account.lastName.charAt(0).toUpperCase() + employee.account.lastName.slice(1).toLowerCase();\n              this.employeeFullName = `${firstName} ${lastName}`;\n            }\n          },\n          error: error => {\n            this.alertService.error(error);\n          }\n        });\n      }\n      this.form = this.formBuilder.group({\n        type: ['', Validators.required],\n        items: this.formBuilder.array([])\n      });\n      // Watch for type changes to handle item validation\n      (_a = this.form.get('type')) === null || _a === void 0 ? void 0 : _a.valueChanges.subscribe(type => {\n        const itemsArray = this.form.get('items');\n        if (type === 'Leave') {\n          itemsArray.clearValidators();\n        } else {\n          itemsArray.setValidators([Validators.required, Validators.minLength(1)]);\n        }\n        itemsArray.updateValueAndValidity();\n      });\n      if (!this.isAddMode) {\n        this.requestService.getById(this.id).pipe(first()).subscribe({\n          next: request => {\n            var _a;\n            // If editing, use the employeeId from the request\n            this.employeeId = (_a = request.employeeId) === null || _a === void 0 ? void 0 : _a.toString();\n            // Load employee details if not already loaded\n            if (this.employeeId && !this.employeeFullName) {\n              this.employeeService.getById(this.employeeId).pipe(first()).subscribe(employee => {\n                if (employee && employee.account) {\n                  this.employeeFullName = `${employee.account.firstName} ${employee.account.lastName}`;\n                }\n              });\n            }\n            this.form.patchValue({\n              type: request.type\n            });\n            // Load items if any\n            if (request.items && request.items.length > 0) {\n              request.items.forEach(item => {\n                this.items.push(this.formBuilder.group({\n                  id: [item.id],\n                  name: [item.name, [Validators.required, Validators.maxLength(100)]],\n                  quantity: [item.quantity, [Validators.required, Validators.min(1), Validators.max(9999)]]\n                }));\n              });\n              this.originalItems = [...request.items];\n            }\n          },\n          error: error => {\n            this.alertService.error(error);\n          }\n        });\n      }\n    }\n    // Add item to form\n    addItem(item = null) {\n      const itemForm = this.formBuilder.group({\n        id: [item ? item.id : null],\n        name: [item ? item.name : '', [Validators.required, Validators.maxLength(100)]],\n        quantity: [item ? item.quantity : '', [Validators.required, Validators.min(1), Validators.max(9999)]]\n      });\n      this.items.push(itemForm);\n    }\n    // Remove item\n    removeItem(index) {\n      const item = this.items.at(index).value;\n      if (item.id) {\n        // If item has an ID, it exists in the database\n        this.deletedItems.push(item.id);\n        this.hiddenItems[index] = true;\n      } else {\n        // If no ID, it's a new item that can be removed directly\n        this.items.removeAt(index);\n      }\n    }\n    // Check if item is hidden\n    isItemHidden(index) {\n      return this.hiddenItems[index] === true;\n    }\n    onSubmit() {\n      var _a, _b, _c;\n      this.submitted = true;\n      this.alertService.clear();\n      // stop here if form is invalid\n      if (this.form.invalid) {\n        return;\n      }\n      // Ensure employeeId is set\n      if (!this.employeeId) {\n        // Try to get employeeId from query params again\n        const params = this.route.snapshot.queryParams;\n        this.employeeId = params['employeeId'] || ((_b = (_a = this.accountService.accountValue) === null || _a === void 0 ? void 0 : _a.id) === null || _b === void 0 ? void 0 : _b.toString());\n        if (!this.employeeId) {\n          this.alertService.error('Employee ID is required');\n          return;\n        }\n      }\n      // Validate items if type is not Leave\n      if (this.form.value.type !== 'Leave' && this.items.length === 0) {\n        this.alertService.error('At least one item is required for Equipment and Resources requests');\n        return;\n      }\n      this.loading = true;\n      // Get visible items only\n      const visibleItems = this.items.controls.filter((_, index) => !this.isItemHidden(index)).map(control => {\n        const value = control.value;\n        // Only include id if it exists (for existing items)\n        return Object.assign(Object.assign({}, value.id ? {\n          id: value.id\n        } : {}), {\n          name: value.name,\n          quantity: value.quantity\n        });\n      });\n      // Prepare request data\n      const requestData = {\n        type: this.form.value.type,\n        employeeId: Number(this.employeeId),\n        items: visibleItems,\n        isAdmin: ((_c = this.accountService.accountValue) === null || _c === void 0 ? void 0 : _c.role) === Role.Admin\n      };\n      if (this.isAddMode) {\n        this.createRequest(requestData);\n      } else {\n        this.updateRequest(requestData);\n      }\n    }\n    createRequest(requestData) {\n      this.requestService.create(requestData).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Request added successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['../'], {\n            relativeTo: this.route,\n            queryParams: {\n              employeeId: this.employeeId\n            }\n          });\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    updateRequest(requestData) {\n      this.requestService.update(this.id, requestData).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Request updated successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['../../'], {\n            relativeTo: this.route,\n            queryParams: {\n              employeeId: this.employeeId\n            }\n          });\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    onCancel() {\n      // Navigate back to the requests list with the employee parameter if it exists\n      if (this.employeeId) {\n        this.router.navigate(['/requests'], {\n          queryParams: {\n            employeeId: this.employeeId\n          }\n        });\n      } else {\n        this.router.navigate(['/requests']);\n      }\n    }\n  }\n  AddEditComponent.ɵfac = function AddEditComponent_Factory(t) {\n    return new (t || AddEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.RequestService), i0.ɵɵdirectiveInject(i3.AlertService), i0.ɵɵdirectiveInject(i3.AccountService), i0.ɵɵdirectiveInject(i3.EmployeeService));\n  };\n  AddEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddEditComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 26,\n    vars: 10,\n    consts: [[1, \"card\"], [1, \"card-header\"], [4, \"ngIf\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [1, \"form-label\"], [\"formControlName\", \"type\", 1, \"form-select\", 3, \"ngClass\"], [\"value\", \"\"], [\"value\", \"Equipment\"], [\"value\", \"Leave\"], [\"value\", \"Resources\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"class\", \"mb-3\", 4, \"ngIf\"], [1, \"mt-4\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-1\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-link\", 3, \"click\"], [1, \"invalid-feedback\"], [\"formArrayName\", \"items\"], [\"class\", \"row mb-2\", 3, \"formGroupName\", \"d-none\", 4, \"ngFor\", \"ngForOf\"], [1, \"mt-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"class\", \"text-danger mt-2\", 4, \"ngIf\"], [1, \"row\", \"mb-2\", 3, \"formGroupName\"], [1, \"col-5\"], [\"type\", \"text\", \"formControlName\", \"name\", \"placeholder\", \"Item name\", 1, \"form-control\", 3, \"ngClass\"], [1, \"col-3\"], [\"type\", \"number\", \"formControlName\", \"quantity\", \"placeholder\", \"Quantity\", 1, \"form-control\", 3, \"ngClass\"], [1, \"col-4\"], [\"type\", \"button\", \"class\", \"btn btn-danger me-2\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"class\", \"btn btn-secondary\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", \"me-2\", 3, \"click\"], [1, \"fas\", \"fa-trash\"], [1, \"fas\", \"fa-undo\"], [1, \"text-danger\", \"mt-2\"], [1, \"spinner-border\", \"spinner-border-sm\", \"me-1\"]],\n    template: function AddEditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h4\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵtemplate(3, AddEditComponent_ng_container_3_Template, 2, 2, \"ng-container\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"form\", 4);\n        i0.ɵɵlistener(\"ngSubmit\", function AddEditComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n        i0.ɵɵtext(8, \"Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"select\", 7)(10, \"option\", 8);\n        i0.ɵɵtext(11, \"Choose type...\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"option\", 9);\n        i0.ɵɵtext(13, \"Equipment\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"option\", 10);\n        i0.ɵɵtext(15, \"Leave\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"option\", 11);\n        i0.ɵɵtext(17, \"Resources\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(18, AddEditComponent_div_18_Template, 2, 1, \"div\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(19, AddEditComponent_div_19_Template, 9, 2, \"div\", 13);\n        i0.ɵɵelementStart(20, \"div\", 14)(21, \"button\", 15);\n        i0.ɵɵtemplate(22, AddEditComponent_span_22_Template, 1, 0, \"span\", 16);\n        i0.ɵɵtext(23, \" Save Request \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"button\", 17);\n        i0.ɵɵlistener(\"click\", function AddEditComponent_Template_button_click_24_listener() {\n          return ctx.onCancel();\n        });\n        i0.ɵɵtext(25, \"Cancel\");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.isAddMode ? \"Add Request\" : \"Edit Request\", \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.employeeId && ctx.employeeFullName);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c0, ctx.submitted && ctx.f.type.errors));\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.type.errors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showItemsSection);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n      }\n    },\n    dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName],\n    encapsulation: 2\n  });\n  return AddEditComponent;\n})();","map":{"version":3,"mappings":"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","names":["Validators","first","Role","i0","AddEditComponent","constructor","formBuilder","route","router","requestService","alertService","accountService","employeeService","isAdmin","accountValue","role","Admin","showItemsSection","type","form","get","value","items","f","controls","ngOnInit","id","snapshot","params","isAddMode","queryParams","employeeId","getById","pipe","subscribe","next","employee","account","firstName","charAt","toUpperCase","slice","toLowerCase","lastName","employeeFullName","error","group","required","array","valueChanges","itemsArray","clearValidators","setValidators","minLength","updateValueAndValidity","request","toString","patchValue","length","forEach","item","push","name","maxLength","quantity","min","max","originalItems","addItem","itemForm","removeItem","index","at","deletedItems","hiddenItems","removeAt","isItemHidden","onSubmit","submitted","clear","invalid","loading","visibleItems","filter","_","map","control","requestData","Number","createRequest","updateRequest","create","success","keepAfterRouteChange","navigate","relativeTo","update","onCancel","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\requests\\add-edit.component.ts","D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\requests\\add-edit.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\nimport { RequestService, AlertService, AccountService, EmployeeService } from '@app/_services';\nimport { Role, RequestType, RequestStatus } from '@app/_models';\n\n@Component({ templateUrl: 'add-edit.component.html' })\nexport class AddEditComponent implements OnInit {\n    form: FormGroup;\n    id: string;\n    isAddMode: boolean;\n    loading = false;\n    submitted = false;\n    employeeId: string | null = null;\n    employeeFullName: string | null = null;\n    isAdmin = false;\n    deletedItems: any[] = []; // Track items marked for deletion\n    originalItems: any[] = []; // Store original items for comparison\n    hiddenItems: { [key: number]: boolean } = {}; // Track visually hidden items\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private requestService: RequestService,\n        private alertService: AlertService,\n        private accountService: AccountService,\n        private employeeService: EmployeeService\n    ) {\n        this.isAdmin = this.accountService.accountValue?.role === Role.Admin;\n    }\n\n    // Getter for checking if items section should be shown\n    get showItemsSection(): boolean {\n        const type = this.form?.get('type')?.value;\n        return type === 'Equipment' || type === 'Resources';\n    }\n\n    // getter for items FormArray\n    get items() { return this.f.items as FormArray; }\n\n    // convenience getter for easy access to form fields\n    get f() { return this.form.controls; }\n\n    ngOnInit() {\n        this.id = this.route.snapshot.params['id'];\n        this.isAddMode = !this.id;\n\n        // Get employeeId from query params\n        const params = this.route.snapshot.queryParams;\n        this.employeeId = params['employeeid'];\n\n        // If we have an employeeId, load employee details\n        if (this.employeeId) {\n            this.employeeService.getById(this.employeeId)\n                .pipe(first())\n                .subscribe({\n                    next: (employee) => {\n                        if (employee && employee.account) {\n                            const firstName = employee.account.firstName.charAt(0).toUpperCase() + employee.account.firstName.slice(1).toLowerCase();\n                            const lastName = employee.account.lastName.charAt(0).toUpperCase() + employee.account.lastName.slice(1).toLowerCase();\n                            this.employeeFullName = `${firstName} ${lastName}`;\n                        }\n                    },\n                    error: error => {\n                        this.alertService.error(error);\n                    }\n                });\n        }\n\n        this.form = this.formBuilder.group({\n            type: ['', Validators.required],\n            items: this.formBuilder.array([])\n        });\n\n        // Watch for type changes to handle item validation\n        this.form.get('type')?.valueChanges.subscribe(type => {\n            const itemsArray = this.form.get('items') as FormArray;\n            if (type === 'Leave') {\n                itemsArray.clearValidators();\n            } else {\n                itemsArray.setValidators([Validators.required, Validators.minLength(1)]);\n            }\n            itemsArray.updateValueAndValidity();\n        });\n\n        if (!this.isAddMode) {\n            this.requestService.getById(this.id)\n                .pipe(first())\n                .subscribe({\n                    next: (request) => {\n                        // If editing, use the employeeId from the request\n                        this.employeeId = request.employeeId?.toString();\n                        \n                        // Load employee details if not already loaded\n                        if (this.employeeId && !this.employeeFullName) {\n                            this.employeeService.getById(this.employeeId)\n                                .pipe(first())\n                                .subscribe(employee => {\n                                    if (employee && employee.account) {\n                                        this.employeeFullName = `${employee.account.firstName} ${employee.account.lastName}`;\n                                    }\n                                });\n                        }\n                        \n                        this.form.patchValue({ type: request.type });\n                        \n                        // Load items if any\n                        if (request.items && request.items.length > 0) {\n                            request.items.forEach(item => {\n                                this.items.push(this.formBuilder.group({\n                                    id: [item.id],\n                                    name: [item.name, [Validators.required, Validators.maxLength(100)]],\n                                    quantity: [item.quantity, [Validators.required, Validators.min(1), Validators.max(9999)]]\n                                }));\n                            });\n                            this.originalItems = [...request.items];\n                        }\n                    },\n                    error: error => {\n                        this.alertService.error(error);\n                    }\n                });\n        }\n    }\n\n    // Add item to form\n    addItem(item: any = null) {\n        const itemForm = this.formBuilder.group({\n            id: [item ? item.id : null],\n            name: [item ? item.name : '', [Validators.required, Validators.maxLength(100)]],\n            quantity: [item ? item.quantity : '', [Validators.required, Validators.min(1), Validators.max(9999)]]\n        });\n\n        this.items.push(itemForm);\n    }\n\n    // Remove item\n    removeItem(index: number) {\n        const item = this.items.at(index).value;\n        if (item.id) {\n            // If item has an ID, it exists in the database\n            this.deletedItems.push(item.id);\n            this.hiddenItems[index] = true;\n        } else {\n            // If no ID, it's a new item that can be removed directly\n            this.items.removeAt(index);\n        }\n    }\n\n    // Check if item is hidden\n    isItemHidden(index: number): boolean {\n        return this.hiddenItems[index] === true;\n    }\n\n    onSubmit() {\n        this.submitted = true;\n        this.alertService.clear();\n\n        // stop here if form is invalid\n        if (this.form.invalid) {\n            return;\n        }\n\n        // Ensure employeeId is set\n        if (!this.employeeId) {\n            // Try to get employeeId from query params again\n            const params = this.route.snapshot.queryParams;\n            this.employeeId = params['employeeId'] || this.accountService.accountValue?.id?.toString();\n            \n            if (!this.employeeId) {\n                this.alertService.error('Employee ID is required');\n                return;\n            }\n        }\n\n        // Validate items if type is not Leave\n        if (this.form.value.type !== 'Leave' && this.items.length === 0) {\n            this.alertService.error('At least one item is required for Equipment and Resources requests');\n            return;\n        }\n\n        this.loading = true;\n\n        // Get visible items only\n        const visibleItems = this.items.controls\n            .filter((_, index) => !this.isItemHidden(index))\n            .map(control => {\n                const value = control.value;\n                // Only include id if it exists (for existing items)\n                return {\n                    ...(value.id ? { id: value.id } : {}),\n                    name: value.name,\n                    quantity: value.quantity\n                };\n            });\n\n        // Prepare request data\n        const requestData = {\n            type: this.form.value.type,\n            employeeId: Number(this.employeeId),\n            items: visibleItems,\n            isAdmin: this.accountService.accountValue?.role === Role.Admin\n        };\n\n        if (this.isAddMode) {\n            this.createRequest(requestData);\n        } else {\n            this.updateRequest(requestData);\n        }\n    }\n\n    private createRequest(requestData: any) {\n        this.requestService.create(requestData)\n            .pipe(first())\n            .subscribe({\n                next: () => {\n                    this.alertService.success('Request added successfully', { keepAfterRouteChange: true });\n                    this.router.navigate(['../'], { \n                        relativeTo: this.route,\n                        queryParams: { employeeId: this.employeeId }\n                    });\n                },\n                error: error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                }\n            });\n    }\n\n    private updateRequest(requestData: any) {\n        this.requestService.update(this.id, requestData)\n            .pipe(first())\n            .subscribe({\n                next: () => {\n                    this.alertService.success('Request updated successfully', { keepAfterRouteChange: true });\n                    this.router.navigate(['../../'], { \n                        relativeTo: this.route,\n                        queryParams: { employeeId: this.employeeId }\n                    });\n                },\n                error: error => {\n                    this.alertService.error(error);\n                    this.loading = false;\n                }\n            });\n    }\n\n    onCancel() {\n        // Navigate back to the requests list with the employee parameter if it exists\n        if (this.employeeId) {\n            this.router.navigate(['/requests'], { queryParams: { employeeId: this.employeeId } });\n        } else {\n            this.router.navigate(['/requests']);\n        }\n    }\n} ","<div class=\"card\">\r\n    <h4 class=\"card-header\">\r\n        {{isAddMode ? 'Add Request' : 'Edit Request'}}\r\n        <ng-container *ngIf=\"employeeId && employeeFullName\">\r\n            for Employee #{{employeeId}} - {{employeeFullName}}\r\n        </ng-container>\r\n    </h4>\r\n    <div class=\"card-body\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"mb-3\">\r\n                <label class=\"form-label\">Type</label>\r\n                <select formControlName=\"type\" class=\"form-select\" [ngClass]=\"{ 'is-invalid': submitted && f.type.errors }\">\r\n                    <option value=\"\">Choose type...</option>\r\n                    <option value=\"Equipment\">Equipment</option>\r\n                    <option value=\"Leave\">Leave</option>\r\n                    <option value=\"Resources\">Resources</option>\r\n                </select>\r\n                <div *ngIf=\"submitted && f.type.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.type.errors.required\">Type is required</div>\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Items section only for Equipment and Resources -->\r\n            <div *ngIf=\"showItemsSection\" class=\"mb-3\">\r\n                <h3>Items</h3>\r\n                <div formArrayName=\"items\">\r\n                    <div *ngFor=\"let item of items.controls; let i=index\" [formGroupName]=\"i\" class=\"row mb-2\" [class.d-none]=\"isItemHidden(i)\">\r\n                        <div class=\"col-5\">\r\n                            <input type=\"text\" formControlName=\"name\" class=\"form-control\" placeholder=\"Item name\"\r\n                                [ngClass]=\"{ 'is-invalid': submitted && item.get('name')?.errors }\" />\r\n                            <div *ngIf=\"submitted && item.get('name')?.errors\" class=\"invalid-feedback\">\r\n                                <div *ngIf=\"item.get('name')?.errors?.required\">Item name is required</div>\r\n                                <div *ngIf=\"item.get('name')?.errors?.maxlength\">Item name must be less than 100 characters</div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-3\">\r\n                            <input type=\"number\" formControlName=\"quantity\" class=\"form-control\" placeholder=\"Quantity\"\r\n                                [ngClass]=\"{ 'is-invalid': submitted && item.get('quantity')?.errors }\" />\r\n                            <div *ngIf=\"submitted && item.get('quantity')?.errors\" class=\"invalid-feedback\">\r\n                                <div *ngIf=\"item.get('quantity')?.errors?.required\">Quantity is required</div>\r\n                                <div *ngIf=\"item.get('quantity')?.errors?.min\">Quantity must be at least 1</div>\r\n                                <div *ngIf=\"item.get('quantity')?.errors?.max\">Quantity must be less than 10000</div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-4\">\r\n                            <button type=\"button\" (click)=\"removeItem(i)\" class=\"btn btn-danger me-2\" *ngIf=\"!isItemHidden(i)\">\r\n                                <i class=\"fas fa-trash\"></i>\r\n                            </button>\r\n                            <button type=\"button\" (click)=\"restoreItem(i)\" class=\"btn btn-secondary\" *ngIf=\"isItemHidden(i)\">\r\n                                <i class=\"fas fa-undo\"></i> Restore\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"mt-2\">\r\n                    <button type=\"button\" (click)=\"addItem()\" class=\"btn btn-secondary\">Add Item</button>\r\n                </div>\r\n                <div *ngIf=\"submitted && form.get('type')?.value !== 'Leave' && items.length === 0\" class=\"text-danger mt-2\">\r\n                    At least one item is required for Equipment and Resources requests\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"mt-4\">\r\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm me-1\"></span>\r\n                    Save Request\r\n                </button>\r\n                <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-link\">Cancel</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div> "]},"metadata":{},"sourceType":"module","externalDependencies":[]}