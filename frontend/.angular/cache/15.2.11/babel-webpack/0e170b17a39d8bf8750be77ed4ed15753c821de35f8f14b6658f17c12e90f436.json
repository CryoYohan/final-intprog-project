{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [{\n  id: 1,\n  name: 'HR',\n  description: 'Human Resources'\n}, {\n  id: 2,\n  name: 'IT',\n  description: 'Information Technology'\n}, {\n  id: 3,\n  name: 'Finance',\n  description: 'Finance Department'\n}, {\n  id: 4,\n  name: 'Marketing',\n  description: 'Marketing Department'\n}];\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [{\n  id: 1,\n  name: 'Manager',\n  description: 'Department Manager'\n}, {\n  id: 2,\n  name: 'Team Lead',\n  description: 'Team Leader'\n}, {\n  id: 3,\n  name: 'Senior Staff',\n  description: 'Senior Level Staff'\n}, {\n  id: 4,\n  name: 'Junior Staff',\n  description: 'Junior Level Staff'\n}];\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [{\n  id: 1,\n  name: 'Leave Request',\n  description: 'Request for leave or time off'\n}, {\n  id: 2,\n  name: 'Equipment Request',\n  description: 'Request for office equipment'\n}, {\n  id: 3,\n  name: 'Training Request',\n  description: 'Request for training or workshops'\n}, {\n  id: 4,\n  name: 'Other',\n  description: 'Other types of requests'\n}];\n// Helper functions for generating IDs\nfunction newAccountId() {\n  return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n}\nfunction newRequestId() {\n  return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n}\nfunction newRequestItemId() {\n  return requestItems.length ? Math.max(...requestItems.map(x => x.id)) + 1 : 1;\n}\nfunction newEmployeeId() {\n  return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n}\nfunction newWorkflowId() {\n  return workflows.length ? Math.max(...workflows.map(x => x.id)) + 1 : 1;\n}\nfunction newDepartmentId() {\n  return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n}\nfunction newPositionId() {\n  return positions.length ? Math.max(...positions.map(x => x.id)) + 1 : 1;\n}\nfunction newRequestTypeId() {\n  return requestTypes.length ? Math.max(...requestTypes.map(x => x.id)) + 1 : 1;\n}\n// Helper functions for JWT and refresh tokens\nfunction generateJwtToken(account) {\n  // Create a simple JWT-like token structure\n  const header = btoa(JSON.stringify({\n    alg: 'HS256',\n    typ: 'JWT'\n  }));\n  const payload = btoa(JSON.stringify({\n    id: account.id,\n    role: account.role,\n    email: account.email,\n    exp: new Date().getTime() + 60 * 60 * 1000 // 1 hour expiry\n  }));\n\n  const signature = btoa('fake-secret-key'); // In a real app, this would be a proper signature\n  return `${header}.${payload}.${signature}`;\n}\nfunction generateRefreshToken() {\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n}\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      // Helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        }));\n      }\n      function error(message) {\n        return throwError(() => ({\n          error: {\n            message\n          }\n        }));\n      }\n      function unauthorized() {\n        return throwError(() => ({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }));\n      }\n      function notFound() {\n        return throwError(() => ({\n          status: 404,\n          error: {\n            message: 'Not Found'\n          }\n        }));\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status,\n          isVerified\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status,\n          isVerified\n        };\n      }\n      function isAuthenticated() {\n        return !!currentAccount();\n      }\n      function isAdmin() {\n        var _a;\n        return ((_a = currentAccount()) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n      }\n      function currentAccount() {\n        var _a;\n        if (!((_a = headers.get('Authorization')) === null || _a === void 0 ? void 0 : _a.startsWith('Bearer '))) return null;\n        const jwtToken = JSON.parse(atob(headers.get('Authorization').split('.')[1]));\n        return accounts.find(x => x.id === jwtToken.id);\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function getRefreshToken() {\n        const authHeader = headers.get('Authorization');\n        if (!(authHeader === null || authHeader === void 0 ? void 0 : authHeader.startsWith('Bearer '))) return null;\n        return authHeader.split(' ')[1];\n      }\n      function getWorkflowsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const internalId = parseInt(url.split('/').pop());\n        console.log('Looking for workflows with employeeId:', internalId);\n        const employee = employees.find(e => e.id === internalId);\n        if (!employee) {\n          console.log('Employee not found with internal id:', internalId);\n          return notFound();\n        }\n        const employeeWorkflows = workflows.filter(x => x.employeeId === employee.id);\n        console.log('Found workflows:', employeeWorkflows.length);\n        // Sort workflows in descending order\n        const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      return handleRoute().pipe(delay(500), materialize(), dematerialize());\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case url.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case url.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case url.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case url.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case url.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          case url.endsWith('/accounts') && method === 'POST':\n            return createAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n            return updateAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n            return deleteAccount();\n          // request routes\n          case url.endsWith('/requests') && method === 'GET':\n            return getRequests();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return getRequestById();\n          case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n            return getRequestsByEmployeeId();\n          case url.endsWith('/requests/my-requests') && method === 'GET':\n            return getMyRequests();\n          case url.endsWith('/requests') && method === 'POST':\n            return createRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return updateRequest();\n          case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n            return changeRequestStatus();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n            return deleteRequest();\n          // employee routes\n          case url.endsWith('/employees') && method === 'GET':\n            return getEmployees();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n            return getEmployeeById();\n          case url.endsWith('/employees') && method === 'POST':\n            return createEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n            return updateEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n            return deleteEmployee();\n          case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n            return transferEmployee();\n          // department routes\n          case url.endsWith('/departments') && method === 'GET':\n            return getDepartments();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n            return getDepartmentById();\n          case url.endsWith('/departments') && method === 'POST':\n            return createDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n            return updateDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n            return deleteDepartment();\n          // position routes\n          case url.endsWith('/positions') && method === 'GET':\n            return getPositions();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n            return getPositionById();\n          case url.endsWith('/positions') && method === 'POST':\n            return createPosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n            return updatePosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n            return deletePosition();\n          // request type routes\n          case url.endsWith('/request-types') && method === 'GET':\n            return getRequestTypes();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n            return getRequestTypeById();\n          case url.endsWith('/request-types') && method === 'POST':\n            return createRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n            return updateRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n            return deleteRequestType();\n          // workflow routes\n          case url.endsWith('/workflows') && method === 'GET':\n            return getWorkflows();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n            return getWorkflowById();\n          case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByEmployeeId();\n          case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByRequestId();\n          case url.endsWith('/workflows') && method === 'POST':\n            return createWorkflow();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n            return updateWorkflow();\n          case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n            return updateWorkflowStatus();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflow();\n          case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflowItem();\n          default:\n            return next.handle(request);\n        }\n      }\n      // Authentication functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) return error('Email or password is incorrect');\n        if (password !== account.password) return error('Email or password is incorrect');\n        if (!account.isVerified) return error('Please verify your email before logging in');\n        // Generate refresh token and save\n        const refreshToken = generateRefreshToken();\n        account.refreshTokens = account.refreshTokens || [];\n        account.refreshTokens.push(refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // Return basic details and tokens\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account),\n          refreshToken\n        }));\n      }\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return unauthorized();\n        const account = accounts.find(x => {\n          var _a;\n          return (_a = x.refreshTokens) === null || _a === void 0 ? void 0 : _a.includes(refreshToken);\n        });\n        if (!account) return unauthorized();\n        // Generate new refresh token and save\n        const newRefreshToken = generateRefreshToken();\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        account.refreshTokens.push(newRefreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // Return basic details and tokens\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account),\n          refreshToken: newRefreshToken\n        }));\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // display email already registered message in alert\n          setTimeout(() => {\n            alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, {\n              autoclose: false\n            });\n          }, 1000);\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // first registered account is an admin\n          account.role = Role.Admin;\n          account.status = 'Active'; // Admin accounts get active status\n        } else {\n          account.role = Role.User;\n          account.status = 'Inactive'; // User accounts get inacitve status upon creation\n        }\n\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display verification email in alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoclose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can get own profile and admin accounts can get all profiles\n        if (account.id !== currentAccount().id && !isAdmin()) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      // Request functions\n      function getRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        // Return all requests for admins, or filtered for regular users\n        let filteredRequests = [...requests];\n        if (!isAdmin()) {\n          const currentUserId = currentAccount().id;\n          filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n        }\n        return ok(filteredRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const requestEmployee = employees.find(e => e.id === request.employeeId);\n          const requestAccount = accounts.find(a => a.id === (requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.accountId));\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return {\n            id: request.id,\n            employeeId: (requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.employeeId) || '',\n            type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type || '',\n            status: request.status,\n            createdDate: request.createdDate,\n            items: items,\n            employee: {\n              id: requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.id,\n              employeeId: requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.employeeId,\n              fullName: requestAccount ? `${requestAccount.firstName} ${requestAccount.lastName}`.trim() : ''\n            }\n          };\n        }));\n      }\n      function getRequestById() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        // Check authorization\n        if (!isAdmin() && request.employeeId !== currentAccount().id) {\n          return unauthorized();\n        }\n        // Add related data\n        const items = requestItems.filter(item => item.requestId === request.id);\n        const employee = employees.find(e => e.id === request.employeeId);\n        const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        // Format employee name with proper capitalization\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: items.map(item => ({\n            id: item.id,\n            name: item.name,\n            quantity: item.quantity\n          })),\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            fullName: fullName,\n            employeeId: employee.employeeId\n          }) : null,\n          type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type\n        }));\n      }\n      function getRequestsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const internalId = parseInt(url.split('/').pop());\n        console.log('Looking for workflows with employeeId:', internalId);\n        const employee = employees.find(e => e.id === internalId);\n        if (!employee) {\n          console.log('Employee not found with internal id:', internalId);\n          return notFound();\n        }\n        const employeeWorkflows = workflows.filter(x => x.employeeId === employee.id);\n        console.log('Found workflows:', employeeWorkflows.length);\n        // Sort workflows in descending order\n        const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function getMyRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        const currentUserId = currentAccount().id;\n        const myRequests = requests.filter(x => x.employeeId === currentUserId);\n        return ok(myRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const employee = employees.find(e => e.id === request.employeeId);\n          const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return Object.assign(Object.assign({}, request), {\n            items,\n            employee: employee ? Object.assign(Object.assign({}, employee), {\n              fullName: `${(account === null || account === void 0 ? void 0 : account.firstName) || ''} ${(account === null || account === void 0 ? void 0 : account.lastName) || ''}`.trim(),\n              employeeId: employee.employeeId\n            }) : null,\n            type: requestType ? requestType.name : request.type\n          });\n        }));\n      }\n      function createRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        console.log('Received request data:', body);\n        // Find employee by employeeId if provided, otherwise use current user\n        let targetEmployee;\n        if (body.employeeId) {\n          // First try to find by internal ID\n          targetEmployee = employees.find(e => e.id === Number(body.employeeId));\n          if (!targetEmployee) {\n            // If not found, try to find by employee ID string\n            targetEmployee = employees.find(e => e.employeeId === body.employeeId);\n          }\n          if (!targetEmployee) return error('Employee not found');\n        } else {\n          const currentUser = currentAccount();\n          targetEmployee = employees.find(e => e.accountId === currentUser.id);\n          if (!targetEmployee) return error('Current user is not an employee');\n        }\n        const request = {\n          id: newRequestId(),\n          employeeId: targetEmployee.id,\n          type: body.type,\n          description: body.description || '',\n          status: 'Pending',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Validate required fields\n        if (!request.type) {\n          return error('Request type is required');\n        }\n        // Validate and process items if present\n        let requestItemsList = [];\n        if (body.items && Array.isArray(body.items)) {\n          try {\n            requestItemsList = body.items.map(item => {\n              if (!item.name || !item.quantity) {\n                throw new Error('Invalid item data');\n              }\n              return {\n                id: newRequestItemId(),\n                requestId: request.id,\n                name: item.name,\n                quantity: Number(item.quantity)\n              };\n            });\n          } catch (error) {\n            return error('Invalid item data provided');\n          }\n        }\n        // Save request and items\n        requests.push(request);\n        if (requestItemsList.length > 0) {\n          requestItems.push(...requestItemsList);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        const account = accounts.find(a => a.id === targetEmployee.accountId);\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItemsList,\n          employeeId: targetEmployee.employeeId,\n          employee: {\n            id: targetEmployee.id,\n            employeeId: targetEmployee.employeeId,\n            fullName: fullName\n          }\n        }));\n      }\n      function updateRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        console.log('Received update data:', body);\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Update basic request fields\n        Object.assign(request, {\n          type: body.type,\n          description: body.description || request.description,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Handle item changes\n        if (body.items) {\n          // Remove all existing items for this request\n          requestItems = requestItems.filter(item => item.requestId !== requestId);\n          // Add new/updated items\n          const newItems = body.items.map(item => ({\n            id: item.id || newRequestItemId(),\n            requestId: requestId,\n            name: item.name,\n            quantity: Number(item.quantity)\n          }));\n          requestItems.push(...newItems);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // Get related data for response\n        const employee = employees.find(e => e.id === request.employeeId);\n        const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === requestId),\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            fullName: fullName,\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function changeRequestStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        const newStatus = body.status;\n        Object.assign(request, {\n          status: newStatus,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // Get related data for response\n        const employee = employees.find(e => e.id === request.employeeId);\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === request.id),\n          employee: employee,\n          type: requestType.name\n        }));\n      }\n      function deleteRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Delete request and its items\n        requests = requests.filter(x => x.id !== requestId);\n        requestItems = requestItems.filter(x => x.requestId !== requestId);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        return ok();\n      }\n      // Employee functions\n      function getEmployees() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(employees.map(employee => {\n          const department = departments.find(d => d.id === employee.departmentId);\n          const account = accounts.find(a => a.id === employee.accountId);\n          return Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId,\n            fullName: account ? `${account.firstName} ${account.lastName}`.trim() : '',\n            department: department ? {\n              id: department.id,\n              name: department.name,\n              description: department.description\n            } : null\n          });\n        }));\n      }\n      function getEmployeeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employee = employees.find(x => x.id === employeeId);\n        if (!employee) return notFound();\n        // Get fresh department data\n        const department = departments.find(d => d.id === employee.departmentId);\n        if (!department) return error('Department not found');\n        const account = accounts.find(a => a.id === employee.accountId);\n        // Return complete employee data with fresh relations\n        return ok(Object.assign(Object.assign({}, employee), {\n          employeeId: employee.employeeId,\n          fullName: account ? `${account.firstName} ${account.lastName}`.trim() : '',\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function createEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        // Log the received data for debugging\n        console.log('Received employee data:', body);\n        // Validate department exists\n        const department = departments.find(d => d.id === Number(body.departmentId));\n        if (!department) return error('Department not found');\n        const employee = Object.assign(Object.assign({}, body), {\n          id: newEmployeeId(),\n          accountId: Number(body.accountId),\n          employeeId: body.employeeId,\n          departmentId: Number(body.departmentId),\n          position: body.position,\n          hireDate: body.hireDate,\n          salary: Number(body.salary),\n          status: body.status,\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Check each required field individually and log the result\n        const requiredFields = {\n          accountId: !!employee.accountId,\n          employeeId: !!employee.employeeId,\n          departmentId: !!employee.departmentId,\n          position: !!employee.position,\n          hireDate: !!employee.hireDate,\n          salary: !!employee.salary,\n          status: !!employee.status\n        };\n        console.log('Field validation results:', requiredFields);\n        // Check if any required field is missing\n        const missingFields = Object.entries(requiredFields).filter(([_, isValid]) => !isValid).map(([fieldName]) => fieldName);\n        if (missingFields.length > 0) {\n          return error(`Required fields are missing: ${missingFields.join(', ')}`);\n        }\n        // Validate account exists\n        const account = accounts.find(a => a.id === employee.accountId);\n        if (!account) return error('Account not found');\n        // Create workflow entry for new employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employee.id,\n          type: 'Added',\n          details: {\n            task: `New employee ${employee.employeeId} was added`,\n            additionalInfo: `Added to ${department.name} department as ${employee.position}`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(employee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function updateEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const oldEmployee = employees[employeeIndex];\n        const updatedEmployee = Object.assign(Object.assign(Object.assign({}, oldEmployee), body), {\n          id: employeeId,\n          accountId: body.accountId ? Number(body.accountId) : oldEmployee.accountId,\n          departmentId: body.departmentId ? Number(body.departmentId) : oldEmployee.departmentId,\n          position: body.position || oldEmployee.position,\n          salary: body.salary ? Number(body.salary) : oldEmployee.salary,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department exists if changed\n        if (body.departmentId) {\n          const department = departments.find(d => d.id === updatedEmployee.departmentId);\n          if (!department) return error('Department not found');\n        }\n        // Validate account exists if changed\n        if (body.accountId) {\n          const account = accounts.find(a => a.id === updatedEmployee.accountId);\n          if (!account) return error('Account not found');\n        }\n        const department = departments.find(d => d.id === updatedEmployee.departmentId);\n        const account = accounts.find(a => a.id === updatedEmployee.accountId);\n        // Create workflow entry for updated employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Updated',\n          details: {\n            task: `Employee ${employeeId} was updated`,\n            additionalInfo: `Updated in ${department.name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(updatedEmployee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedEmployee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function deleteEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const employee = employees[employeeIndex];\n        // Delete employee\n        employees = employees.filter(x => x.id !== employeeId);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(Object.assign(Object.assign({}, employee), {\n          status: 'Deleted'\n        }));\n      }\n      function transferEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const employee = employees[employeeIndex];\n        const newDepartmentId = body.departmentId;\n        // Validate department exists\n        const department = departments.find(d => d.id === newDepartmentId);\n        if (!department) return error('Department not found');\n        // Update employee department\n        employee.departmentId = newDepartmentId;\n        employee.lastModifiedDate = new Date().toISOString();\n        // Create workflow entry for employee transfer\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Transferred',\n          details: {\n            task: `Employee ${employeeId} was transferred to ${department.name} department`,\n            additionalInfo: `Transferred from ${employees.find(x => x.id === employee.departmentId).name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(employee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          status: 'Transferred'\n        }));\n      }\n      // Department functions\n      function getDepartments() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(departments.map(department => {\n          return Object.assign(Object.assign({}, department), {\n            id: department.id.toString(),\n            name: department.name,\n            description: department.description\n          });\n        }));\n      }\n      function getDepartmentById() {\n        if (!isAuthenticated()) return unauthorized();\n        const departmentId = idFromUrl();\n        const department = departments.find(x => x.id === departmentId);\n        if (!department) return notFound();\n        return ok(Object.assign(Object.assign({}, department), {\n          id: department.id.toString(),\n          name: department.name,\n          description: department.description\n        }));\n      }\n      function createDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const department = body;\n        // Validate department name is unique\n        if (departments.find(x => x.name === department.name)) {\n          return error('Department name already exists');\n        }\n        // Assign department id and save\n        department.id = newDepartmentId();\n        departments.push(department);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, department), {\n          id: department.id.toString()\n        }));\n      }\n      function updateDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        const oldDepartment = departments[departmentIndex];\n        const updatedDepartment = Object.assign(Object.assign(Object.assign({}, oldDepartment), body), {\n          id: departmentId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department name is unique\n        if (departments.find(x => x.name === updatedDepartment.name && x.id !== updatedDepartment.id)) {\n          return error('Department name already exists');\n        }\n        departments.push(updatedDepartment);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, updatedDepartment), {\n          id: updatedDepartment.id.toString()\n        }));\n      }\n      function deleteDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        const department = departments[departmentIndex];\n        // Delete department\n        departments = departments.filter(x => x.id !== departmentId);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, department), {\n          status: 'Deleted'\n        }));\n      }\n      // Position functions\n      function getPositions() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(positions.map(position => {\n          return Object.assign(Object.assign({}, position), {\n            id: position.id.toString(),\n            name: position.name,\n            description: position.description\n          });\n        }));\n      }\n      function getPositionById() {\n        if (!isAuthenticated()) return unauthorized();\n        const positionId = idFromUrl();\n        const position = positions.find(x => x.id === positionId);\n        if (!position) return notFound();\n        return ok(Object.assign(Object.assign({}, position), {\n          id: position.id.toString(),\n          name: position.name,\n          description: position.description\n        }));\n      }\n      function createPosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const position = body;\n        // Validate position name is unique\n        if (positions.find(x => x.name === position.name)) {\n          return error('Position name already exists');\n        }\n        // Assign position id and save\n        position.id = newPositionId();\n        positions.push(position);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, position), {\n          id: position.id.toString()\n        }));\n      }\n      function updatePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        const oldPosition = positions[positionIndex];\n        const updatedPosition = Object.assign(Object.assign(Object.assign({}, oldPosition), body), {\n          id: positionId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate position name is unique\n        if (positions.find(x => x.name === updatedPosition.name && x.id !== updatedPosition.id)) {\n          return error('Position name already exists');\n        }\n        positions.push(updatedPosition);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, updatedPosition), {\n          id: updatedPosition.id.toString()\n        }));\n      }\n      function deletePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        const position = positions[positionIndex];\n        // Delete position\n        positions = positions.filter(x => x.id !== positionId);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, position), {\n          status: 'Deleted'\n        }));\n      }\n      // Request type functions\n      function getRequestTypes() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(requestTypes.map(type => {\n          return Object.assign(Object.assign({}, type), {\n            id: type.id.toString(),\n            name: type.name,\n            description: type.description\n          });\n        }));\n      }\n      function getRequestTypeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const typeId = idFromUrl();\n        const type = requestTypes.find(x => x.id === typeId);\n        if (!type) return notFound();\n        return ok(Object.assign(Object.assign({}, type), {\n          id: type.id.toString(),\n          name: type.name,\n          description: type.description\n        }));\n      }\n      function createRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const type = body;\n        // Validate request type name is unique\n        if (requestTypes.find(x => x.name === type.name)) {\n          return error('Request type name already exists');\n        }\n        // Assign request type id and save\n        type.id = newRequestTypeId();\n        requestTypes.push(type);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, type), {\n          id: type.id.toString()\n        }));\n      }\n      function updateRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const typeId = idFromUrl();\n        const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n        if (typeIndex === -1) return notFound();\n        const oldType = requestTypes[typeIndex];\n        const updatedType = Object.assign(Object.assign(Object.assign({}, oldType), body), {\n          id: typeId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate request type name is unique\n        if (requestTypes.find(x => x.name === updatedType.name && x.id !== updatedType.id)) {\n          return error('Request type name already exists');\n        }\n        requestTypes.push(updatedType);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, updatedType), {\n          id: updatedType.id.toString()\n        }));\n      }\n      function deleteRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const typeId = idFromUrl();\n        const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n        if (typeIndex === -1) return notFound();\n        const type = requestTypes[typeIndex];\n        // Delete request type\n        requestTypes = requestTypes.filter(x => x.id !== typeId);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, type), {\n          status: 'Deleted'\n        }));\n      }\n      // Workflow functions\n      function getWorkflows() {\n        if (!isAuthenticated()) return unauthorized();\n        // Sort workflows in descending order by creation date\n        const sortedWorkflows = [...workflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function getWorkflowById() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflow = workflows.find(x => x.id === idFromUrl());\n        if (!workflow) return notFound();\n        const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n        return ok({\n          id: workflow.id.toString(),\n          type: workflow.type,\n          details: details,\n          status: workflow.status,\n          datetimecreated: workflow.datetimecreated || workflow.createdDate\n        });\n      }\n      function getWorkflowsByRequestId() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        console.log('Looking for workflows with requestId:', requestId);\n        const request = requests.find(x => x.id === requestId);\n        if (!request) {\n          console.log('Request not found with id:', requestId);\n          return notFound();\n        }\n        const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n        console.log('Found workflows:', requestWorkflows.length);\n        // Sort workflows in descending order\n        const sortedWorkflows = [...requestWorkflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function createWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        console.log('Received workflow data:', body);\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: body.employeeId,\n          type: body.type,\n          details: body.details,\n          status: body.status,\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Validate required fields\n        const requiredFields = {\n          employeeId: !!workflow.employeeId,\n          type: !!workflow.type,\n          details: !!workflow.details,\n          status: !!workflow.status\n        };\n        console.log('Field validation results:', requiredFields);\n        // Check if any required field is missing\n        const missingFields = Object.entries(requiredFields).filter(([_, isValid]) => !isValid).map(([fieldName]) => fieldName);\n        if (missingFields.length > 0) {\n          return error(`Required fields are missing: ${missingFields.join(', ')}`);\n        }\n        // Validate employee exists\n        const employee = employees.find(e => e.id === workflow.employeeId);\n        if (!employee) return error('Employee not found');\n        employees.push(workflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function updateWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        const oldWorkflow = workflows[workflowIndex];\n        const updatedWorkflow = Object.assign(Object.assign(Object.assign({}, oldWorkflow), body), {\n          id: workflowId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate employee exists\n        const employee = employees.find(e => e.id === updatedWorkflow.employeeId);\n        if (!employee) return error('Employee not found');\n        employees.push(updatedWorkflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedWorkflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function updateWorkflowStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        const newStatus = body.status;\n        Object.assign(workflow, {\n          status: newStatus,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          status: newStatus\n        }));\n      }\n      function deleteWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        const workflow = workflows[workflowIndex];\n        const employee = employees.find(e => e.id === workflow.employeeId);\n        // Delete workflow\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function deleteWorkflowItem() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        // Delete workflow item\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          status: 'Deleted'\n        }));\n      }\n      function createAccount() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          return error('Email already exists');\n        }\n        account.id = newAccountId();\n        account.dateCreated = new Date().toISOString();\n        account.isVerified = true;\n        account.refreshTokens = [];\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      function updateAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        const accountId = idFromUrl();\n        const account = accounts.find(x => x.id === accountId);\n        if (!account) return notFound();\n        if (account.id !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Only allow admins to update role\n        if (!isAdmin()) {\n          delete body.role;\n        }\n        // If email is being changed, make sure it's not already taken\n        if (body.email && body.email !== account.email && accounts.find(x => x.email === body.email)) {\n          return error('Email already exists');\n        }\n        Object.assign(account, body);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      function deleteAccount() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const accountId = idFromUrl();\n        const account = accounts.find(x => x.id === accountId);\n        if (!account) return notFound();\n        if (account.id === currentAccount().id) return error('You cannot delete your own account');\n        accounts = accounts.filter(x => x.id !== accountId);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","materialize","dematerialize","Role","accountsKey","accounts","JSON","parse","localStorage","getItem","employeesKey","employees","departmentsKey","departments","id","name","description","requestsKey","requests","requestItemsKey","requestItems","workflowsKey","workflows","positionsKey","positions","requestTypesKey","requestTypes","newAccountId","length","Math","max","map","x","newRequestId","newRequestItemId","newEmployeeId","newWorkflowId","newDepartmentId","newPositionId","newRequestTypeId","generateJwtToken","account","header","btoa","stringify","alg","typ","payload","role","email","exp","Date","getTime","signature","generateRefreshToken","random","toString","substring","FakeBackendInterceptor","constructor","alertService","intercept","request","next","url","method","headers","body","ok","status","error","message","unauthorized","notFound","basicDetails","title","firstName","lastName","isVerified","isAuthenticated","currentAccount","isAdmin","Admin","get","startsWith","jwtToken","atob","split","find","idFromUrl","urlParts","parseInt","getRefreshToken","authHeader","getWorkflowsByEmployeeId","internalId","pop","console","log","employee","e","employeeWorkflows","filter","employeeId","sortedWorkflows","sort","a","b","dateA","datetimecreated","createdDate","dateB","workflow","details","task","additionalInfo","type","handleRoute","pipe","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","getAccounts","match","getAccountById","createAccount","updateAccount","deleteAccount","getRequests","getRequestById","getRequestsByEmployeeId","getMyRequests","createRequest","updateRequest","changeRequestStatus","deleteRequest","getEmployees","getEmployeeById","createEmployee","updateEmployee","deleteEmployee","transferEmployee","getDepartments","getDepartmentById","createDepartment","updateDepartment","deleteDepartment","getPositions","getPositionById","createPosition","updatePosition","deletePosition","getRequestTypes","getRequestTypeById","createRequestType","updateRequestType","deleteRequestType","getWorkflows","getWorkflowById","getWorkflowsByRequestId","createWorkflow","updateWorkflow","updateWorkflowStatus","deleteWorkflow","deleteWorkflowItem","handle","password","refreshTokens","push","setItem","includes","newRefreshToken","setTimeout","info","location","origin","autoclose","User","dateCreated","toISOString","verificationToken","confirmPassword","verifyUrl","token","filteredRequests","currentUserId","items","item","requestId","requestEmployee","requestAccount","accountId","requestType","t","typeId","fullName","trim","charAt","toUpperCase","slice","toLowerCase","quantity","Object","myRequests","targetEmployee","Number","currentUser","lastModifiedDate","requestItemsList","Array","isArray","Error","assign","newItems","newStatus","department","d","departmentId","departmentName","position","hireDate","salary","requiredFields","missingFields","entries","_","isValid","fieldName","join","employeeIndex","findIndex","oldEmployee","updatedEmployee","departmentIndex","oldDepartment","updatedDepartment","positionId","positionIndex","oldPosition","updatedPosition","typeIndex","oldType","updatedType","requestWorkflows","workflowId","workflowIndex","oldWorkflow","updatedWorkflow","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\n\nimport { AlertService } from '@app/_services';\nimport { Role } from '@app/_models';\n\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [\n    { id: 1, name: 'HR', description: 'Human Resources' },\n    { id: 2, name: 'IT', description: 'Information Technology' },\n    { id: 3, name: 'Finance', description: 'Finance Department' },\n    { id: 4, name: 'Marketing', description: 'Marketing Department' }\n];\n\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [\n    { id: 1, name: 'Manager', description: 'Department Manager' },\n    { id: 2, name: 'Team Lead', description: 'Team Leader' },\n    { id: 3, name: 'Senior Staff', description: 'Senior Level Staff' },\n    { id: 4, name: 'Junior Staff', description: 'Junior Level Staff' }\n];\n\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [\n    { id: 1, name: 'Leave Request', description: 'Request for leave or time off' },\n    { id: 2, name: 'Equipment Request', description: 'Request for office equipment' },\n    { id: 3, name: 'Training Request', description: 'Request for training or workshops' },\n    { id: 4, name: 'Other', description: 'Other types of requests' }\n];\n\n// Helper functions for generating IDs\nfunction newAccountId(): number {\n    return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n}\n\nfunction newRequestId(): number {\n    return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n}\n\nfunction newRequestItemId(): number {\n    return requestItems.length ? Math.max(...requestItems.map(x => x.id)) + 1 : 1;\n}\n\nfunction newEmployeeId(): number {\n    return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n}\n\nfunction newWorkflowId(): number {\n    return workflows.length ? Math.max(...workflows.map(x => x.id)) + 1 : 1;\n}\n\nfunction newDepartmentId(): number {\n    return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n}\n\nfunction newPositionId(): number {\n    return positions.length ? Math.max(...positions.map(x => x.id)) + 1 : 1;\n}\n\nfunction newRequestTypeId(): number {\n    return requestTypes.length ? Math.max(...requestTypes.map(x => x.id)) + 1 : 1;\n}\n\n// Helper functions for JWT and refresh tokens\nfunction generateJwtToken(account: any): string {\n    // Create a simple JWT-like token structure\n    const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));\n    const payload = btoa(JSON.stringify({\n        id: account.id,\n        role: account.role,\n        email: account.email,\n        exp: new Date().getTime() + (60 * 60 * 1000) // 1 hour expiry\n    }));\n    const signature = btoa('fake-secret-key'); // In a real app, this would be a proper signature\n\n    return `${header}.${payload}.${signature}`;\n}\n\nfunction generateRefreshToken(): string {\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n}\n\n@Injectable()\nexport class FakeBackendInterceptor implements HttpInterceptor {\n    constructor(private alertService: AlertService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { url, method, headers, body } = request;\n        const alertService = this.alertService;\n\n        // Helper functions\n        function ok(body?: any) {\n            return of(new HttpResponse({ status: 200, body }));\n        }\n\n        function error(message: string) {\n            return throwError(() => ({ error: { message } }));\n        }\n\n        function unauthorized() {\n            return throwError(() => ({ status: 401, error: { message: 'Unauthorized' } }));\n        }\n\n        function notFound() {\n            return throwError(() => ({ status: 404, error: { message: 'Not Found' } }));\n        }\n\n        function basicDetails(account: any) {\n            const { id, title, firstName, lastName, email, role, status, isVerified } = account;\n            return { id, title, firstName, lastName, email, role, status, isVerified };\n        }\n\n        function isAuthenticated() {\n            return !!currentAccount();\n        }\n\n        function isAdmin() {\n            return currentAccount()?.role === Role.Admin;\n        }\n\n        function currentAccount() {\n            if (!headers.get('Authorization')?.startsWith('Bearer ')) return null;\n            const jwtToken = JSON.parse(atob(headers.get('Authorization').split('.')[1]));\n            return accounts.find(x => x.id === jwtToken.id);\n        }\n\n        function idFromUrl() {\n            const urlParts = url.split('/');\n            return parseInt(urlParts[urlParts.length - 1]);\n        }\n\n        function getRefreshToken(): string | null {\n            const authHeader = headers.get('Authorization');\n            if (!authHeader?.startsWith('Bearer ')) return null;\n            return authHeader.split(' ')[1];\n        }\n\n        function getWorkflowsByEmployeeId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const internalId = parseInt(url.split('/').pop());\n            console.log('Looking for workflows with employeeId:', internalId);\n\n            const employee = employees.find(e => e.id === internalId);\n            if (!employee) {\n                console.log('Employee not found with internal id:', internalId);\n                return notFound();\n            }\n            \n            const employeeWorkflows = workflows.filter(x => x.employeeId === employee.id);\n            console.log('Found workflows:', employeeWorkflows.length);\n\n            // Sort workflows in descending order\n            const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        return handleRoute().pipe(\n            delay(500),\n            materialize(),\n            dematerialize()\n        );\n\n        function handleRoute() {\n            switch (true) {\n                case url.endsWith('/accounts/authenticate') && method === 'POST':\n                    return authenticate();\n                case url.endsWith('/accounts/refresh-token') && method === 'POST':\n                    return refreshToken();\n                case url.endsWith('/accounts/revoke-token') && method === 'POST':\n                    return revokeToken();\n                case url.endsWith('/accounts/register') && method === 'POST':\n                    return register();\n                case url.endsWith('/accounts/verify-email') && method === 'POST':\n                    return verifyEmail();\n                case url.endsWith('/accounts') && method === 'GET':\n                    return getAccounts();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n                    return getAccountById();\n                case url.endsWith('/accounts') && method === 'POST':\n                    return createAccount();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n                    return updateAccount();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n                    return deleteAccount();\n                    \n                // request routes\n                case url.endsWith('/requests') && method === 'GET':\n                    return getRequests();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n                    return getRequestById();\n                case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n                    return getRequestsByEmployeeId();\n                case url.endsWith('/requests/my-requests') && method === 'GET':\n                    return getMyRequests();\n                case url.endsWith('/requests') && method === 'POST':\n                    return createRequest();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n                    return updateRequest();\n                case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n                    return changeRequestStatus();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequest();\n                    \n                // employee routes\n                case url.endsWith('/employees') && method === 'GET':\n                    return getEmployees();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n                    return getEmployeeById();\n                case url.endsWith('/employees') && method === 'POST':\n                    return createEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n                    return updateEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n                    return deleteEmployee();\n                case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n                    return transferEmployee();\n\n                // department routes\n                case url.endsWith('/departments') && method === 'GET':\n                    return getDepartments();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n                    return getDepartmentById();\n                case url.endsWith('/departments') && method === 'POST':\n                    return createDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n                    return updateDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n                    return deleteDepartment();\n                    \n                // position routes\n                case url.endsWith('/positions') && method === 'GET':\n                    return getPositions();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n                    return getPositionById();\n                case url.endsWith('/positions') && method === 'POST':\n                    return createPosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n                    return updatePosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n                    return deletePosition();\n\n                // request type routes\n                case url.endsWith('/request-types') && method === 'GET':\n                    return getRequestTypes();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n                    return getRequestTypeById();\n                case url.endsWith('/request-types') && method === 'POST':\n                    return createRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n                    return updateRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequestType();\n\n                // workflow routes\n                case url.endsWith('/workflows') && method === 'GET':\n                    return getWorkflows();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n                    return getWorkflowById();\n                case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByEmployeeId();\n                case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByRequestId();\n                case url.endsWith('/workflows') && method === 'POST':\n                    return createWorkflow();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n                    return updateWorkflow();\n                case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n                    return updateWorkflowStatus();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflow();\n                case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflowItem();\n                    \n                default:\n                    return next.handle(request);\n            }\n        }\n\n        // Authentication functions\n        function authenticate() {\n            const { email, password } = body;\n            const account = accounts.find(x => x.email === email);\n        \n            if (!account) return error('Email or password is incorrect');\n            if (password !== account.password) return error('Email or password is incorrect');\n            if (!account.isVerified) return error('Please verify your email before logging in');\n\n            // Generate refresh token and save\n            const refreshToken = generateRefreshToken();\n            account.refreshTokens = account.refreshTokens || [];\n            account.refreshTokens.push(refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // Return basic details and tokens\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account),\n                refreshToken\n            });\n        }\n\n        function refreshToken() {\n            const refreshToken = getRefreshToken();\n            \n            if (!refreshToken) return unauthorized();\n\n            const account = accounts.find(x => x.refreshTokens?.includes(refreshToken));\n            \n            if (!account) return unauthorized();\n\n            // Generate new refresh token and save\n            const newRefreshToken = generateRefreshToken();\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            account.refreshTokens.push(newRefreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // Return basic details and tokens\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account),\n                refreshToken: newRefreshToken\n            });\n        }\n\n        function revokeToken() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const refreshToken = getRefreshToken();\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n\n            // revoke token and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function register() {\n            const account = body;\n\n            if (accounts.find(x => x.email === account.email)) {\n                // display email already registered message in alert\n                setTimeout(() => {\n                    alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, { autoclose: false });\n                }, 1000);\n\n                // always return ok() response to prevent email enumeration\n                return ok();\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            if (account.id === 1) {\n                // first registered account is an admin\n                account.role = Role.Admin;\n                account.status = 'Active'; // Admin accounts get active status\n            } else {\n                account.role = Role.User;\n                account.status = 'Inactive'; // User accounts get inacitve status upon creation\n            }\n            account.dateCreated = new Date().toISOString();\n            account.verificationToken = new Date().getTime().toString();\n            account.isVerified = false;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // display verification email in alert\n            setTimeout(() => {\n                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, { autoclose: false });\n            }, 1000);\n\n            return ok();\n        }\n\n        function verifyEmail() {\n            const { token } = body;\n            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n\n            if (!account) return error('Verification failed');\n\n            // set is verified flag to true if token is valid\n            account.isVerified = true;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function getAccounts() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(accounts.map(x => basicDetails(x)));\n        }\n\n        function getAccountById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let account = accounts.find(x => x.id === idFromUrl());\n\n            // user accounts can get own profile and admin accounts can get all profiles\n            if (account.id !== currentAccount().id && !isAdmin()) {\n                return unauthorized();\n            }\n\n            return ok(basicDetails(account));\n        }\n\n        // Request functions\n        function getRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            // Return all requests for admins, or filtered for regular users\n            let filteredRequests = [...requests];\n            if (!isAdmin()) {\n                const currentUserId = currentAccount().id;\n                filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n            }\n\n            return ok(filteredRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const requestEmployee = employees.find(e => e.id === request.employeeId);\n                const requestAccount = accounts.find(a => a.id === requestEmployee?.accountId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n\n                return {\n                    id: request.id,\n                    employeeId: requestEmployee?.employeeId || '',\n                    type: requestType?.name || request.type || '',\n                    status: request.status,\n                    createdDate: request.createdDate,\n                    items: items,\n                    employee: {\n                        id: requestEmployee?.id,\n                        employeeId: requestEmployee?.employeeId,\n                        fullName: requestAccount ? `${requestAccount.firstName} ${requestAccount.lastName}`.trim() : ''\n                    }\n                };\n            }));\n        }\n\n        function getRequestById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            // Check authorization\n            if (!isAdmin() && request.employeeId !== currentAccount().id) {\n                return unauthorized();\n            }\n\n            // Add related data\n            const items = requestItems.filter(item => item.requestId === request.id);\n            const employee = employees.find(e => e.id === request.employeeId);\n            const account = accounts.find(a => a.id === employee?.accountId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n\n            // Format employee name with proper capitalization\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                items: items.map(item => ({\n                    id: item.id,\n                    name: item.name,\n                    quantity: item.quantity\n                })),\n                employee: employee ? {\n                    ...employee,\n                    fullName: fullName,\n                    employeeId: employee.employeeId\n                } : null,\n                type: requestType?.name || request.type\n            });\n        }\n\n        function getRequestsByEmployeeId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const internalId = parseInt(url.split('/').pop());\n            console.log('Looking for workflows with employeeId:', internalId);\n\n            const employee = employees.find(e => e.id === internalId);\n            if (!employee) {\n                console.log('Employee not found with internal id:', internalId);\n                return notFound();\n            }\n            \n            const employeeWorkflows = workflows.filter(x => x.employeeId === employee.id);\n            console.log('Found workflows:', employeeWorkflows.length);\n\n            // Sort workflows in descending order\n            const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        function getMyRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const currentUserId = currentAccount().id;\n            const myRequests = requests.filter(x => x.employeeId === currentUserId);\n\n            return ok(myRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const employee = employees.find(e => e.id === request.employeeId);\n                const account = accounts.find(a => a.id === employee?.accountId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                return {\n                    ...request,\n                    items,\n                    employee: employee ? {\n                        ...employee,\n                        fullName: `${account?.firstName || ''} ${account?.lastName || ''}`.trim(),\n                        employeeId: employee.employeeId\n                    } : null,\n                    type: requestType ? requestType.name : request.type\n                };\n            }));\n        }\n\n        function createRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            console.log('Received request data:', body);\n\n            // Find employee by employeeId if provided, otherwise use current user\n            let targetEmployee;\n            if (body.employeeId) {\n                // First try to find by internal ID\n                targetEmployee = employees.find(e => e.id === Number(body.employeeId));\n                if (!targetEmployee) {\n                    // If not found, try to find by employee ID string\n                    targetEmployee = employees.find(e => e.employeeId === body.employeeId);\n                }\n                if (!targetEmployee) return error('Employee not found');\n            } else {\n                const currentUser = currentAccount();\n                targetEmployee = employees.find(e => e.accountId === currentUser.id);\n                if (!targetEmployee) return error('Current user is not an employee');\n            }\n\n            const request = {\n                id: newRequestId(),\n                employeeId: targetEmployee.id,\n                type: body.type,\n                description: body.description || '',\n                status: 'Pending',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            // Validate required fields\n            if (!request.type) {\n                return error('Request type is required');\n            }\n\n            // Validate and process items if present\n            let requestItemsList = [];\n            if (body.items && Array.isArray(body.items)) {\n                try {\n                    requestItemsList = body.items.map(item => {\n                        if (!item.name || !item.quantity) {\n                            throw new Error('Invalid item data');\n                        }\n                        return {\n                            id: newRequestItemId(),\n                            requestId: request.id,\n                            name: item.name,\n                            quantity: Number(item.quantity)\n                        };\n                    });\n                } catch (error) {\n                    return error('Invalid item data provided');\n                }\n            }\n\n            // Save request and items\n            requests.push(request);\n            if (requestItemsList.length > 0) {\n                requestItems.push(...requestItemsList);\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n            }\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            const account = accounts.find(a => a.id === targetEmployee.accountId);\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                items: requestItemsList,\n                employeeId: targetEmployee.employeeId,\n                employee: {\n                    id: targetEmployee.id,\n                    employeeId: targetEmployee.employeeId,\n                    fullName: fullName\n                }\n            });\n        }\n\n        function updateRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            console.log('Received update data:', body);\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Update basic request fields\n            Object.assign(request, {\n                type: body.type,\n                description: body.description || request.description,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            // Handle item changes\n            if (body.items) {\n                // Remove all existing items for this request\n                requestItems = requestItems.filter(item => item.requestId !== requestId);\n\n                // Add new/updated items\n                const newItems = body.items.map(item => ({\n                    id: item.id || newRequestItemId(),\n                    requestId: requestId,\n                    name: item.name,\n                    quantity: Number(item.quantity)\n                }));\n\n                requestItems.push(...newItems);\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n            }\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            // Get related data for response\n            const employee = employees.find(e => e.id === request.employeeId);\n            const account = accounts.find(a => a.id === employee?.accountId);\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                items: requestItems.filter(item => item.requestId === requestId),\n                employee: employee ? {\n                    ...employee,\n                    fullName: fullName,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function changeRequestStatus() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            const newStatus = body.status;\n\n            Object.assign(request, {\n                status: newStatus,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            // Get related data for response\n            const employee = employees.find(e => e.id === request.employeeId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n\n            return ok({\n                ...request,\n                items: requestItems.filter(item => item.requestId === request.id),\n                employee: employee,\n                type: requestType.name\n            });\n        }\n\n        function deleteRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Delete request and its items\n            requests = requests.filter(x => x.id !== requestId);\n            requestItems = requestItems.filter(x => x.requestId !== requestId);\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n\n            return ok();\n        }\n\n        // Employee functions\n        function getEmployees() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(employees.map(employee => {\n                const department = departments.find(d => d.id === employee.departmentId);\n                const account = accounts.find(a => a.id === employee.accountId);\n                return {\n                    ...employee,\n                    employeeId: employee.employeeId,\n                    fullName: account ? `${account.firstName} ${account.lastName}`.trim() : '',\n                    department: department ? {\n                        id: department.id,\n                        name: department.name,\n                        description: department.description\n                    } : null\n                };\n            }));\n        }\n\n        function getEmployeeById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employee = employees.find(x => x.id === employeeId);\n            \n            if (!employee) return notFound();\n            \n            // Get fresh department data\n            const department = departments.find(d => d.id === employee.departmentId);\n            if (!department) return error('Department not found');\n            \n            const account = accounts.find(a => a.id === employee.accountId);\n            \n            // Return complete employee data with fresh relations\n            return ok({\n                ...employee,\n                employeeId: employee.employeeId,\n                fullName: account ? `${account.firstName} ${account.lastName}`.trim() : '',\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function createEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            // Log the received data for debugging\n            console.log('Received employee data:', body);\n\n            // Validate department exists\n            const department = departments.find(d => d.id === Number(body.departmentId));\n            if (!department) return error('Department not found');\n\n            const employee = {\n                ...body,\n                id: newEmployeeId(),\n                accountId: Number(body.accountId),\n                employeeId: body.employeeId,\n                departmentId: Number(body.departmentId),\n                position: body.position,\n                hireDate: body.hireDate,\n                salary: Number(body.salary),\n                status: body.status,\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Check each required field individually and log the result\n            const requiredFields = {\n                accountId: !!employee.accountId,\n                employeeId: !!employee.employeeId,\n                departmentId: !!employee.departmentId,\n                position: !!employee.position,\n                hireDate: !!employee.hireDate,\n                salary: !!employee.salary,\n                status: !!employee.status\n            };\n            \n            console.log('Field validation results:', requiredFields);\n            \n            // Check if any required field is missing\n            const missingFields = Object.entries(requiredFields)\n                .filter(([_, isValid]) => !isValid)\n                .map(([fieldName]) => fieldName);\n            \n            if (missingFields.length > 0) {\n                return error(`Required fields are missing: ${missingFields.join(', ')}`);\n            }\n\n            // Validate account exists\n            const account = accounts.find(a => a.id === employee.accountId);\n            if (!account) return error('Account not found');\n            \n            // Create workflow entry for new employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employee.id,\n                type: 'Added',\n                details: {\n                    task: `New employee ${employee.employeeId} was added`,\n                    additionalInfo: `Added to ${department.name} department as ${employee.position}`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(employee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...employee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function updateEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const oldEmployee = employees[employeeIndex];\n            const updatedEmployee = {\n                ...oldEmployee,\n                ...body,\n                id: employeeId,\n                accountId: body.accountId ? Number(body.accountId) : oldEmployee.accountId,\n                departmentId: body.departmentId ? Number(body.departmentId) : oldEmployee.departmentId,\n                position: body.position || oldEmployee.position,\n                salary: body.salary ? Number(body.salary) : oldEmployee.salary,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate department exists if changed\n            if (body.departmentId) {\n                const department = departments.find(d => d.id === updatedEmployee.departmentId);\n                if (!department) return error('Department not found');\n            }\n\n            // Validate account exists if changed\n            if (body.accountId) {\n                const account = accounts.find(a => a.id === updatedEmployee.accountId);\n                if (!account) return error('Account not found');\n            }\n            \n            const department = departments.find(d => d.id === updatedEmployee.departmentId);\n            const account = accounts.find(a => a.id === updatedEmployee.accountId);\n            \n            // Create workflow entry for updated employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Updated',\n                details: {\n                    task: `Employee ${employeeId} was updated`,\n                    additionalInfo: `Updated in ${department.name} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(updatedEmployee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...updatedEmployee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function deleteEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const employee = employees[employeeIndex];\n            \n            // Delete employee\n            employees = employees.filter(x => x.id !== employeeId);\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            \n            return ok({\n                ...employee,\n                status: 'Deleted'\n            });\n        }\n\n        function transferEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const employee = employees[employeeIndex];\n            const newDepartmentId = body.departmentId;\n            \n            // Validate department exists\n            const department = departments.find(d => d.id === newDepartmentId);\n            if (!department) return error('Department not found');\n\n            // Update employee department\n            employee.departmentId = newDepartmentId;\n            employee.lastModifiedDate = new Date().toISOString();\n            \n            // Create workflow entry for employee transfer\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Transferred',\n                details: {\n                    task: `Employee ${employeeId} was transferred to ${department.name} department`,\n                    additionalInfo: `Transferred from ${employees.find(x => x.id === employee.departmentId).name} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(employee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...employee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                status: 'Transferred'\n            });\n        }\n\n        // Department functions\n        function getDepartments() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(departments.map(department => {\n                return {\n                    ...department,\n                    id: department.id.toString(),\n                    name: department.name,\n                    description: department.description\n                };\n            }));\n        }\n\n        function getDepartmentById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            const department = departments.find(x => x.id === departmentId);\n            \n            if (!department) return notFound();\n            \n            return ok({\n                ...department,\n                id: department.id.toString(),\n                name: department.name,\n                description: department.description\n            });\n        }\n\n        function createDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const department = body;\n            \n            // Validate department name is unique\n            if (departments.find(x => x.name === department.name)) {\n                return error('Department name already exists');\n            }\n            \n            // Assign department id and save\n            department.id = newDepartmentId();\n            departments.push(department);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...department,\n                id: department.id.toString()\n            });\n        }\n\n        function updateDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\n            \n            if (departmentIndex === -1) return notFound();\n            \n            const oldDepartment = departments[departmentIndex];\n            const updatedDepartment = {\n                ...oldDepartment,\n                ...body,\n                id: departmentId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate department name is unique\n            if (departments.find(x => x.name === updatedDepartment.name && x.id !== updatedDepartment.id)) {\n                return error('Department name already exists');\n            }\n\n            departments.push(updatedDepartment);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...updatedDepartment,\n                id: updatedDepartment.id.toString()\n            });\n        }\n\n        function deleteDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const departmentId = idFromUrl();\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\n            \n            if (departmentIndex === -1) return notFound();\n            \n            const department = departments[departmentIndex];\n            \n            // Delete department\n            departments = departments.filter(x => x.id !== departmentId);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...department,\n                status: 'Deleted'\n            });\n        }\n\n        // Position functions\n        function getPositions() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(positions.map(position => {\n                return {\n                    ...position,\n                    id: position.id.toString(),\n                    name: position.name,\n                    description: position.description\n                };\n            }));\n        }\n\n        function getPositionById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            const position = positions.find(x => x.id === positionId);\n            \n            if (!position) return notFound();\n            \n            return ok({\n                ...position,\n                id: position.id.toString(),\n                name: position.name,\n                description: position.description\n            });\n        }\n\n        function createPosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const position = body;\n            \n            // Validate position name is unique\n            if (positions.find(x => x.name === position.name)) {\n                return error('Position name already exists');\n            }\n            \n            // Assign position id and save\n            position.id = newPositionId();\n            positions.push(position);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...position,\n                id: position.id.toString()\n            });\n        }\n\n        function updatePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            const positionIndex = positions.findIndex(x => x.id === positionId);\n            \n            if (positionIndex === -1) return notFound();\n            \n            const oldPosition = positions[positionIndex];\n            const updatedPosition = {\n                ...oldPosition,\n                ...body,\n                id: positionId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate position name is unique\n            if (positions.find(x => x.name === updatedPosition.name && x.id !== updatedPosition.id)) {\n                return error('Position name already exists');\n            }\n\n            positions.push(updatedPosition);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...updatedPosition,\n                id: updatedPosition.id.toString()\n            });\n        }\n\n        function deletePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const positionId = idFromUrl();\n            const positionIndex = positions.findIndex(x => x.id === positionId);\n            \n            if (positionIndex === -1) return notFound();\n            \n            const position = positions[positionIndex];\n            \n            // Delete position\n            positions = positions.filter(x => x.id !== positionId);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...position,\n                status: 'Deleted'\n            });\n        }\n\n        // Request type functions\n        function getRequestTypes() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(requestTypes.map(type => {\n                return {\n                    ...type,\n                    id: type.id.toString(),\n                    name: type.name,\n                    description: type.description\n                };\n            }));\n        }\n\n        function getRequestTypeById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const typeId = idFromUrl();\n            const type = requestTypes.find(x => x.id === typeId);\n            \n            if (!type) return notFound();\n            \n            return ok({\n                ...type,\n                id: type.id.toString(),\n                name: type.name,\n                description: type.description\n            });\n        }\n\n        function createRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const type = body;\n            \n            // Validate request type name is unique\n            if (requestTypes.find(x => x.name === type.name)) {\n                return error('Request type name already exists');\n            }\n            \n            // Assign request type id and save\n            type.id = newRequestTypeId();\n            requestTypes.push(type);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...type,\n                id: type.id.toString()\n            });\n        }\n\n        function updateRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const typeId = idFromUrl();\n            const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n            \n            if (typeIndex === -1) return notFound();\n            \n            const oldType = requestTypes[typeIndex];\n            const updatedType = {\n                ...oldType,\n                ...body,\n                id: typeId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate request type name is unique\n            if (requestTypes.find(x => x.name === updatedType.name && x.id !== updatedType.id)) {\n                return error('Request type name already exists');\n            }\n\n            requestTypes.push(updatedType);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...updatedType,\n                id: updatedType.id.toString()\n            });\n        }\n\n        function deleteRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const typeId = idFromUrl();\n            const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n            \n            if (typeIndex === -1) return notFound();\n            \n            const type = requestTypes[typeIndex];\n            \n            // Delete request type\n            requestTypes = requestTypes.filter(x => x.id !== typeId);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...type,\n                status: 'Deleted'\n            });\n        }\n\n        // Workflow functions\n        function getWorkflows() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            // Sort workflows in descending order by creation date\n            const sortedWorkflows = [...workflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        function getWorkflowById() {\n            if (!isAuthenticated()) return unauthorized();\n            const workflow = workflows.find(x => x.id === idFromUrl());\n            if (!workflow) return notFound();\n            \n            const details = typeof workflow.details === 'object' ? \n                `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                workflow.details || '';\n\n            return ok({\n                id: workflow.id.toString(),\n                type: workflow.type,\n                details: details,\n                status: workflow.status,\n                datetimecreated: workflow.datetimecreated || workflow.createdDate\n            });\n        }\n\n        function getWorkflowsByRequestId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const requestId = idFromUrl();\n            console.log('Looking for workflows with requestId:', requestId);\n\n            const request = requests.find(x => x.id === requestId);\n            if (!request) {\n                console.log('Request not found with id:', requestId);\n                return notFound();\n            }\n            \n            const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n            console.log('Found workflows:', requestWorkflows.length);\n\n            // Sort workflows in descending order\n            const sortedWorkflows = [...requestWorkflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        function createWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            console.log('Received workflow data:', body);\n\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: body.employeeId,\n                type: body.type,\n                details: body.details,\n                status: body.status,\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate required fields\n            const requiredFields = {\n                employeeId: !!workflow.employeeId,\n                type: !!workflow.type,\n                details: !!workflow.details,\n                status: !!workflow.status\n            };\n            \n            console.log('Field validation results:', requiredFields);\n            \n            // Check if any required field is missing\n            const missingFields = Object.entries(requiredFields)\n                .filter(([_, isValid]) => !isValid)\n                .map(([fieldName]) => fieldName);\n            \n            if (missingFields.length > 0) {\n                return error(`Required fields are missing: ${missingFields.join(', ')}`);\n            }\n\n            // Validate employee exists\n            const employee = employees.find(e => e.id === workflow.employeeId);\n            if (!employee) return error('Employee not found');\n            \n            employees.push(workflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function updateWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const workflowId = idFromUrl();\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n            \n            if (workflowIndex === -1) return notFound();\n            \n            const oldWorkflow = workflows[workflowIndex];\n            const updatedWorkflow = {\n                ...oldWorkflow,\n                ...body,\n                id: workflowId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate employee exists\n            const employee = employees.find(e => e.id === updatedWorkflow.employeeId);\n            if (!employee) return error('Employee not found');\n            \n            employees.push(updatedWorkflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...updatedWorkflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function updateWorkflowStatus() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflow = workflows.find(x => x.id === workflowId);\n            \n            if (!workflow) return notFound();\n            \n            const newStatus = body.status;\n\n            Object.assign(workflow, {\n                status: newStatus,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok({\n                ...workflow,\n                status: newStatus\n            });\n        }\n\n        function deleteWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n            \n            if (workflowIndex === -1) return notFound();\n            \n            const workflow = workflows[workflowIndex];\n            const employee = employees.find(e => e.id === workflow.employeeId);\n            \n            // Delete workflow\n            workflows = workflows.filter(x => x.id !== workflowId);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function deleteWorkflowItem() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflow = workflows.find(x => x.id === workflowId);\n            \n            if (!workflow) return notFound();\n            \n            // Delete workflow item\n            workflows = workflows.filter(x => x.id !== workflowId);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                status: 'Deleted'\n            });\n        }\n\n        function createAccount() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const account = body;\n            \n            if (accounts.find(x => x.email === account.email)) {\n                return error('Email already exists');\n            }\n            \n            account.id = newAccountId();\n            account.dateCreated = new Date().toISOString();\n            account.isVerified = true;\n            account.refreshTokens = [];\n            \n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n            \n            return ok(basicDetails(account));\n        }\n\n        function updateAccount() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const accountId = idFromUrl();\n            const account = accounts.find(x => x.id === accountId);\n            \n            if (!account) return notFound();\n            if (account.id !== currentAccount().id && !isAdmin()) return unauthorized();\n            \n            // Only allow admins to update role\n            if (!isAdmin()) {\n                delete body.role;\n            }\n            \n            // If email is being changed, make sure it's not already taken\n            if (body.email && body.email !== account.email && accounts.find(x => x.email === body.email)) {\n                return error('Email already exists');\n            }\n            \n            Object.assign(account, body);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n            \n            return ok(basicDetails(account));\n        }\n\n        function deleteAccount() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const accountId = idFromUrl();\n            const account = accounts.find(x => x.id === accountId);\n            \n            if (!account) return notFound();\n            if (account.id === currentAccount().id) return error('You cannot delete your own account');\n            \n            accounts = accounts.filter(x => x.id !== accountId);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n            \n            return ok();\n        }\n    }\n}\n\nexport const fakeBackendProvider = {\n    // use fake backend in place of Http service for backend-less development\n    provide: HTTP_INTERCEPTORS,\n    useClass: FakeBackendInterceptor,\n    multi: true\n};"]},"metadata":{},"sourceType":"module","externalDependencies":[]}