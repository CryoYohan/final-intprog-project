{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [{\n  id: 1,\n  name: 'HR',\n  description: 'Human Resources'\n}, {\n  id: 2,\n  name: 'IT',\n  description: 'Information Technology'\n}, {\n  id: 3,\n  name: 'Finance',\n  description: 'Finance Department'\n}, {\n  id: 4,\n  name: 'Marketing',\n  description: 'Marketing Department'\n}];\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [{\n  id: 1,\n  name: 'Manager',\n  description: 'Department Manager'\n}, {\n  id: 2,\n  name: 'Team Lead',\n  description: 'Team Leader'\n}, {\n  id: 3,\n  name: 'Senior Staff',\n  description: 'Senior Level Staff'\n}, {\n  id: 4,\n  name: 'Junior Staff',\n  description: 'Junior Level Staff'\n}];\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [{\n  id: 1,\n  name: 'Leave Request',\n  description: 'Request for leave or time off'\n}, {\n  id: 2,\n  name: 'Equipment Request',\n  description: 'Request for office equipment'\n}, {\n  id: 3,\n  name: 'Training Request',\n  description: 'Request for training or workshops'\n}, {\n  id: 4,\n  name: 'Other',\n  description: 'Other types of requests'\n}];\n// Helper functions for generating IDs\nfunction newAccountId() {\n  return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n}\nfunction newRequestId() {\n  return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n}\nfunction newRequestItemId() {\n  return requestItems.length ? Math.max(...requestItems.map(x => x.id)) + 1 : 1;\n}\nfunction newEmployeeId() {\n  return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n}\nfunction newWorkflowId() {\n  return workflows.length ? Math.max(...workflows.map(x => x.id)) + 1 : 1;\n}\nfunction newDepartmentId() {\n  return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n}\nfunction newPositionId() {\n  return positions.length ? Math.max(...positions.map(x => x.id)) + 1 : 1;\n}\nfunction newRequestTypeId() {\n  return requestTypes.length ? Math.max(...requestTypes.map(x => x.id)) + 1 : 1;\n}\n// Helper functions for JWT and refresh tokens\nfunction generateJwtToken(account) {\n  try {\n    const header = btoa(JSON.stringify({\n      alg: 'HS256',\n      typ: 'JWT'\n    }));\n    const now = new Date().getTime();\n    const payload = {\n      id: account.id,\n      role: account.role,\n      email: account.email,\n      iat: now,\n      exp: now + 24 * 60 * 60 * 1000 // 24 hours expiry\n    };\n\n    const payloadBase64 = btoa(JSON.stringify(payload));\n    const signature = btoa('fake-jwt-secret-key');\n    return `${header}.${payloadBase64}.${signature}`;\n  } catch (error) {\n    console.error('Error generating JWT token:', error);\n    throw error;\n  }\n}\nfunction generateRefreshToken() {\n  try {\n    const header = btoa(JSON.stringify({\n      alg: 'HS256',\n      typ: 'JWT'\n    }));\n    const now = new Date().getTime();\n    const payload = {\n      id: Math.random().toString(36).substr(2),\n      iat: now,\n      exp: now + 7 * 24 * 60 * 60 * 1000 // 7 days expiry\n    };\n\n    const payloadBase64 = btoa(JSON.stringify(payload));\n    const signature = btoa('fake-refresh-secret-key');\n    return `${header}.${payloadBase64}.${signature}`;\n  } catch (error) {\n    console.error('Error generating refresh token:', error);\n    throw error;\n  }\n}\nfunction isTokenExpired(token) {\n  if (!token) return true;\n  try {\n    const parts = token.split('.');\n    if (parts.length !== 3) return true;\n    const payload = JSON.parse(atob(parts[1]));\n    if (!payload || typeof payload.exp !== 'number') return true;\n    return payload.exp < new Date().getTime();\n  } catch (error) {\n    console.error('Error checking token expiration:', error);\n    return true;\n  }\n}\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      // Helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        }));\n      }\n      function error(message) {\n        return throwError(() => ({\n          error: {\n            message\n          }\n        }));\n      }\n      function unauthorized() {\n        return throwError(() => ({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }));\n      }\n      function notFound() {\n        return throwError(() => ({\n          status: 404,\n          error: {\n            message: 'Not Found'\n          }\n        }));\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status,\n          isVerified\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status,\n          isVerified\n        };\n      }\n      function isAuthenticated() {\n        try {\n          const authHeader = headers.get('Authorization');\n          if (!(authHeader === null || authHeader === void 0 ? void 0 : authHeader.startsWith('Bearer '))) return false;\n          const token = authHeader.split(' ')[1];\n          if (isTokenExpired(token)) {\n            return false;\n          }\n          const parts = token.split('.');\n          const payload = JSON.parse(atob(parts[1]));\n          const account = accounts.find(x => x.id === payload.id);\n          return !!account;\n        } catch (error) {\n          return false;\n        }\n      }\n      function isAdmin() {\n        var _a;\n        return ((_a = currentAccount()) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n      }\n      function currentAccount() {\n        if (!isAuthenticated()) return null;\n        try {\n          const authHeader = headers.get('Authorization');\n          if (!(authHeader === null || authHeader === void 0 ? void 0 : authHeader.startsWith('Bearer '))) return null;\n          const token = authHeader.split(' ')[1];\n          const parts = token.split('.');\n          const payload = JSON.parse(atob(parts[1]));\n          // Find account by ID from token payload\n          const account = accounts.find(x => x.id === payload.id);\n          if (!account) {\n            return null;\n          }\n          return account;\n        } catch (error) {\n          return null;\n        }\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        // Handle URLs that end with /status\n        if (urlParts[urlParts.length - 1] === 'status') {\n          return parseInt(urlParts[urlParts.length - 2]);\n        }\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function getWorkflowsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const internalId = parseInt(url.split('/').pop());\n        // Only include objects that are true workflows (type is 'Added', 'Updated', or 'Transferred' and do NOT have request-like properties)\n        const workflowTypes = ['Added', 'Updated', 'Transferred'];\n        const employeeWorkflows = workflows.filter(wf => {\n          return wf.employeeId === internalId && typeof wf.type === 'string' && workflowTypes.includes(wf.type) && !('items' in wf) && !('typeId' in wf) && !('description' in wf);\n        });\n        // Sort workflows in descending order by creation date\n        const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          // Ensure details is a string\n          let details = '';\n          if (typeof workflow.details === 'object') {\n            details = workflow.details.task || '';\n            if (workflow.details.additionalInfo) {\n              details += ` - ${workflow.details.additionalInfo}`;\n            }\n          } else {\n            details = workflow.details || '';\n          }\n          // Always provide datetimecreated\n          const datetimecreated = workflow.datetimecreated || workflow.createdDate;\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: datetimecreated,\n            employeeId: workflow.employeeId\n          };\n        }));\n      }\n      return handleRoute().pipe(delay(500), materialize(), dematerialize());\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case url.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case url.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case url.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case url.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case url.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          case url.endsWith('/accounts') && method === 'POST':\n            return createAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n            return updateAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n            return deleteAccount();\n          // request routes\n          case url.endsWith('/requests') && method === 'GET':\n            return getRequests();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return getRequestById();\n          case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n            return getRequestsByEmployeeId();\n          case url.endsWith('/requests/my-requests') && method === 'GET':\n            return getMyRequests();\n          case url.endsWith('/requests') && method === 'POST':\n            return createRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return updateRequest();\n          case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n            return changeRequestStatus();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n            return deleteRequest();\n          // employee routes\n          case url.endsWith('/employees') && method === 'GET':\n            return getEmployees();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n            return getEmployeeById();\n          case url.endsWith('/employees') && method === 'POST':\n            return createEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n            return updateEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n            return deleteEmployee();\n          case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n            return transferEmployee();\n          // department routes\n          case url.endsWith('/departments') && method === 'GET':\n            return getDepartments();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n            return getDepartmentById();\n          case url.endsWith('/departments') && method === 'POST':\n            return createDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n            return updateDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n            return deleteDepartment();\n          // position routes\n          case url.endsWith('/positions') && method === 'GET':\n            return getPositions();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n            return getPositionById();\n          case url.endsWith('/positions') && method === 'POST':\n            return createPosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n            return updatePosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n            return deletePosition();\n          // request type routes\n          case url.endsWith('/request-types') && method === 'GET':\n            return getRequestTypes();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n            return getRequestTypeById();\n          case url.endsWith('/request-types') && method === 'POST':\n            return createRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n            return updateRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n            return deleteRequestType();\n          // workflow routes\n          case url.endsWith('/workflows') && method === 'GET':\n            return getWorkflows();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n            return getWorkflowById();\n          case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByEmployeeId();\n          case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByRequestId();\n          case url.endsWith('/workflows') && method === 'POST':\n            return createWorkflow();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n            return updateWorkflow();\n          case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n            return updateWorkflowStatus();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflow();\n          case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflowItem();\n          default:\n            return next.handle(request);\n        }\n      }\n      // Authentication functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) return error('Email or password is incorrect');\n        if (password !== account.password) return error('Email or password is incorrect');\n        if (!account.isVerified) return error('Please verify your email before logging in');\n        try {\n          // Initialize refreshTokens array if it doesn't exist\n          if (!account.refreshTokens) {\n            account.refreshTokens = [];\n          }\n          // Generate refresh token that expires in 7 days\n          const refreshToken = generateRefreshToken();\n          // Remove any expired refresh tokens\n          account.refreshTokens = account.refreshTokens.filter(rt => !isTokenExpired(rt));\n          // Add new refresh token\n          account.refreshTokens.push(refreshToken);\n          localStorage.setItem(accountsKey, JSON.stringify(accounts));\n          const jwtToken = generateJwtToken(account);\n          return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n            jwtToken,\n            refreshToken\n          }));\n        } catch (error) {\n          return error('An error occurred during authentication');\n        }\n      }\n      function refreshToken() {\n        try {\n          // Find the account with a valid (not expired) refresh token\n          let foundAccount = null;\n          let foundRefreshToken = null;\n          for (const acc of accounts) {\n            if (Array.isArray(acc.refreshTokens) && acc.refreshTokens.length > 0) {\n              // Find the most recent valid refresh token\n              const validTokens = acc.refreshTokens.filter(rt => !isTokenExpired(rt));\n              if (validTokens.length > 0) {\n                foundAccount = acc;\n                foundRefreshToken = validTokens[validTokens.length - 1];\n                break;\n              }\n            }\n          }\n          if (!foundAccount || !foundRefreshToken) {\n            return unauthorized();\n          }\n          // Generate new tokens\n          const newRefreshToken = generateRefreshToken();\n          const jwtToken = generateJwtToken(foundAccount);\n          // Update refresh tokens - remove the used one, add the new one\n          foundAccount.refreshTokens = foundAccount.refreshTokens.filter(x => x !== foundRefreshToken && !isTokenExpired(x));\n          foundAccount.refreshTokens.push(newRefreshToken);\n          localStorage.setItem(accountsKey, JSON.stringify(accounts));\n          return ok(Object.assign(Object.assign({}, basicDetails(foundAccount)), {\n            jwtToken,\n            refreshToken: newRefreshToken\n          }));\n        } catch (error) {\n          return unauthorized();\n        }\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = body.refreshToken;\n        const account = accounts.find(x => {\n          var _a;\n          return (_a = x.refreshTokens) === null || _a === void 0 ? void 0 : _a.includes(refreshToken);\n        });\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // display email already registered message in alert\n          setTimeout(() => {\n            alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, {\n              autoclose: false\n            });\n          }, 1000);\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // first registered account is an admin\n          account.role = Role.Admin;\n          account.status = 'Active'; // Admin accounts get active status\n        } else {\n          account.role = Role.User;\n          account.status = 'Inactive'; // User accounts get inacitve status upon creation\n        }\n\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display verification email in alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoclose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can get own profile and admin accounts can get all profiles\n        if (account.id !== currentAccount().id && !isAdmin()) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      // Request functions\n      function getRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        // Only include objects that are true requests (have typeId or type matching requestTypes)\n        let filteredRequests = requests.filter(r => {\n          // Must have a typeId or a type that matches a requestType\n          return typeof r.typeId === 'number' || typeof r.type === 'string' && requestTypes.some(rt => rt.name === r.type);\n        });\n        if (!isAdmin()) {\n          const currentUserId = currentAccount().id;\n          filteredRequests = filteredRequests.filter(x => x.employeeId === currentUserId);\n        }\n        return ok(filteredRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const requestEmployee = employees.find(e => e.id === request.employeeId);\n          const requestAccount = accounts.find(a => a.id === (requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.accountId));\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return {\n            id: request.id,\n            employeeId: (requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.employeeId) || '',\n            type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type || '',\n            status: request.status,\n            createdDate: request.createdDate,\n            items: items,\n            employee: {\n              id: requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.id,\n              employeeId: requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.employeeId,\n              fullName: requestAccount ? `${requestAccount.firstName} ${requestAccount.lastName}`.trim() : ''\n            }\n          };\n        }));\n      }\n      function getRequestById() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        // Check authorization\n        if (!isAdmin() && request.employeeId !== currentAccount().id) {\n          return unauthorized();\n        }\n        // Add related data\n        const items = requestItems.filter(item => item.requestId === request.id);\n        const employee = employees.find(e => e.id === request.employeeId);\n        const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        // Format employee name with proper capitalization\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: items.map(item => ({\n            id: item.id,\n            name: item.name,\n            quantity: item.quantity\n          })),\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            fullName: fullName,\n            employeeId: employee.employeeId\n          }) : null,\n          type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type\n        }));\n      }\n      function getRequestsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const internalId = parseInt(url.split('/').pop());\n        const employee = employees.find(e => e.id === internalId);\n        if (!employee) {\n          return notFound();\n        }\n        const employeeRequests = requests.filter(x => x.employeeId === employee.id);\n        // Sort requests in descending order by creation date\n        const sortedRequests = [...employeeRequests].sort((a, b) => {\n          const dateA = new Date(a.createdDate);\n          const dateB = new Date(b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          const account = accounts.find(a => a.id === employee.accountId);\n          // Format employee name with proper capitalization\n          const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n          const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n          const fullName = `${firstName} ${lastName}`.trim();\n          return {\n            id: request.id,\n            type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type,\n            status: request.status,\n            createdDate: request.createdDate,\n            items: items,\n            employee: {\n              id: employee.id,\n              employeeId: employee.employeeId,\n              fullName: fullName\n            }\n          };\n        }));\n      }\n      function getMyRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        const currentUserId = currentAccount().id;\n        const myRequests = requests.filter(x => x.employeeId === currentUserId);\n        return ok(myRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const employee = employees.find(e => e.id === request.employeeId);\n          const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return Object.assign(Object.assign({}, request), {\n            items,\n            employee: employee ? Object.assign(Object.assign({}, employee), {\n              fullName: `${(account === null || account === void 0 ? void 0 : account.firstName) || ''} ${(account === null || account === void 0 ? void 0 : account.lastName) || ''}`.trim(),\n              employeeId: employee.employeeId\n            }) : null,\n            type: requestType ? requestType.name : request.type\n          });\n        }));\n      }\n      function createRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        // Find employee by employeeId\n        let targetEmployee;\n        if (body.employeeId) {\n          // Try to find by internal ID first\n          const employeeIdNum = Number(body.employeeId);\n          targetEmployee = employees.find(e => e.id === employeeIdNum);\n          if (!targetEmployee) {\n            // If not found by internal ID, try to find by employee ID string\n            targetEmployee = employees.find(e => e.employeeId === body.employeeId);\n          }\n          if (!targetEmployee) {\n            return error('Employee not found');\n          }\n        } else {\n          // If no employeeId provided, use current user\n          const currentUser = currentAccount();\n          targetEmployee = employees.find(e => e.accountId === currentUser.id);\n          if (!targetEmployee) {\n            return error('Current user is not an employee');\n          }\n        }\n        const request = {\n          id: newRequestId(),\n          employeeId: targetEmployee.id,\n          typeId: body.typeId ? Number(body.typeId) : null,\n          type: body.type,\n          description: body.description || '',\n          status: 'Pending',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Validate required fields\n        if (!request.type && !request.typeId) {\n          return error('Request type is required');\n        }\n        // Validate and process items if present\n        let requestItemsList = [];\n        if (body.items && Array.isArray(body.items)) {\n          try {\n            requestItemsList = body.items.map(item => {\n              if (!item.name || !item.quantity) {\n                throw new Error('Invalid item data');\n              }\n              return {\n                id: newRequestItemId(),\n                requestId: request.id,\n                name: item.name,\n                quantity: Number(item.quantity)\n              };\n            });\n          } catch (error) {\n            return error('Invalid item data provided');\n          }\n        }\n        // Save request and items\n        requests.push(request);\n        if (requestItemsList.length > 0) {\n          requestItems.push(...requestItemsList);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        const account = accounts.find(a => a.id === targetEmployee.accountId);\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        const response = Object.assign(Object.assign({}, request), {\n          items: requestItemsList,\n          employee: {\n            id: targetEmployee.id,\n            employeeId: targetEmployee.employeeId,\n            fullName: fullName\n          }\n        });\n        return ok(response);\n      }\n      function updateRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Update basic request fields\n        Object.assign(request, {\n          type: body.type,\n          description: body.description || request.description,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Handle item changes\n        if (body.items) {\n          // Remove all existing items for this request\n          requestItems = requestItems.filter(item => item.requestId !== requestId);\n          // Add new/updated items\n          const newItems = body.items.map(item => ({\n            id: item.id || newRequestItemId(),\n            requestId: requestId,\n            name: item.name,\n            quantity: Number(item.quantity)\n          }));\n          requestItems.push(...newItems);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // Get related data for response\n        const employee = employees.find(e => e.id === request.employeeId);\n        const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === requestId),\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            fullName: fullName,\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function changeRequestStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) {\n          return error('Request not found');\n        }\n        const newStatus = body.status;\n        if (!newStatus) {\n          return error('Status is required');\n        }\n        // Validate status value\n        const validStatuses = ['Pending', 'Approved', 'Rejected', 'Cancelled'];\n        if (!validStatuses.includes(newStatus)) {\n          return error('Invalid status value');\n        }\n        try {\n          // Update request\n          request.status = newStatus;\n          request.lastModifiedDate = new Date().toISOString();\n          // Update requests array\n          const requestIndex = requests.findIndex(x => x.id === requestId);\n          if (requestIndex === -1) {\n            return error('Request not found');\n          }\n          requests[requestIndex] = request;\n          localStorage.setItem(requestsKey, JSON.stringify(requests));\n          // Get related data for response\n          const employee = employees.find(e => e.id === request.employeeId);\n          const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          const items = requestItems.filter(item => item.requestId === request.id);\n          // Format employee name\n          const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n          const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n          const fullName = `${firstName} ${lastName}`.trim();\n          const response = Object.assign(Object.assign({}, request), {\n            type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type,\n            items: items,\n            employee: employee ? {\n              id: employee.id,\n              employeeId: employee.employeeId,\n              fullName: fullName\n            } : null\n          });\n          return ok(response);\n        } catch (error) {\n          return error('Failed to update request status');\n        }\n      }\n      function deleteRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Delete request and its items\n        requests = requests.filter(x => x.id !== requestId);\n        requestItems = requestItems.filter(x => x.requestId !== requestId);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        return ok();\n      }\n      // Employee functions\n      function getEmployees() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(employees.map(employee => {\n          const department = departments.find(d => d.id === employee.departmentId);\n          const account = accounts.find(a => a.id === employee.accountId);\n          // Format names with proper capitalization\n          const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n          const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n          return Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId,\n            fullName: `${firstName} ${lastName}`.trim(),\n            departmentName: (department === null || department === void 0 ? void 0 : department.name) || '',\n            department: department ? {\n              id: department.id,\n              name: department.name,\n              description: department.description\n            } : null,\n            account: account ? basicDetails(account) : null\n          });\n        }));\n      }\n      function getEmployeeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employee = employees.find(x => x.id === employeeId);\n        if (!employee) return notFound();\n        // Get fresh department data\n        const department = departments.find(d => d.id === employee.departmentId);\n        if (!department) return error('Department not found');\n        const account = accounts.find(a => a.id === employee.accountId);\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        // Return complete employee data with fresh relations\n        return ok(Object.assign(Object.assign({}, employee), {\n          employeeId: employee.employeeId,\n          fullName: `${firstName} ${lastName}`.trim(),\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function createEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        // Check if employee ID already exists\n        if (employees.find(x => x.employeeId === body.employeeId)) {\n          return error('Employee ID already exists');\n        }\n        // Validate department exists\n        const department = departments.find(d => d.id === Number(body.departmentId));\n        if (!department) return error('Department not found');\n        // Validate account exists and isn't already assigned to an employee\n        const account = accounts.find(a => a.id === Number(body.accountId));\n        if (!account) return error('Account not found');\n        if (employees.find(e => e.accountId === Number(body.accountId))) {\n          return error('Account is already assigned to another employee');\n        }\n        const employee = {\n          id: newEmployeeId(),\n          accountId: Number(body.accountId),\n          employeeId: body.employeeId,\n          departmentId: Number(body.departmentId),\n          position: body.position,\n          hireDate: body.hireDate,\n          salary: Number(body.salary),\n          status: body.status || 'Active',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Check each required field individually\n        const requiredFields = {\n          accountId: !!employee.accountId,\n          employeeId: !!employee.employeeId,\n          departmentId: !!employee.departmentId,\n          position: !!employee.position,\n          hireDate: !!employee.hireDate,\n          salary: !!employee.salary\n        };\n        // Check if any required field is missing\n        const missingFields = Object.entries(requiredFields).filter(([_, isValid]) => !isValid).map(([fieldName]) => fieldName);\n        if (missingFields.length > 0) {\n          return error(`Required fields are missing: ${missingFields.join(', ')}`);\n        }\n        // Format names\n        const firstName = account.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = account.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        // Create workflow entry for new employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employee.id,\n          type: 'Added',\n          details: {\n            task: `New employee ${employee.employeeId} was added`,\n            additionalInfo: `Added to ${department.name} department as ${employee.position}`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(employee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employee), {\n          fullName: `${firstName} ${lastName}`.trim(),\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          }\n        }));\n      }\n      function updateEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const oldEmployee = employees[employeeIndex];\n        const updatedEmployee = Object.assign(Object.assign(Object.assign({}, oldEmployee), body), {\n          id: employeeId,\n          accountId: body.accountId ? Number(body.accountId) : oldEmployee.accountId,\n          departmentId: body.departmentId ? Number(body.departmentId) : oldEmployee.departmentId,\n          position: body.position || oldEmployee.position,\n          salary: body.salary ? Number(body.salary) : oldEmployee.salary,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department exists if changed\n        if (body.departmentId) {\n          const department = departments.find(d => d.id === updatedEmployee.departmentId);\n          if (!department) return error('Department not found');\n        }\n        // Validate account exists if changed\n        if (body.accountId) {\n          const account = accounts.find(a => a.id === updatedEmployee.accountId);\n          if (!account) return error('Account not found');\n        }\n        const department = departments.find(d => d.id === updatedEmployee.departmentId);\n        const account = accounts.find(a => a.id === updatedEmployee.accountId);\n        // Create workflow entry for updated employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Updated',\n          details: {\n            task: `Employee ${employeeId} was updated`,\n            additionalInfo: `Updated in ${department.name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees[employeeIndex] = updatedEmployee;\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedEmployee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function deleteEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const employee = employees[employeeIndex];\n        // Delete employee\n        employees = employees.filter(x => x.id !== employeeId);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(Object.assign(Object.assign({}, employee), {\n          status: 'Deleted'\n        }));\n      }\n      function transferEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        // Find the employee index\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) {\n          return notFound();\n        }\n        // Get the current employee\n        const employee = employees[employeeIndex];\n        const oldDepartmentId = employee.departmentId;\n        const newDepartmentId = Number(body.departmentId);\n        // Validate departments exist\n        const oldDepartment = departments.find(d => d.id === oldDepartmentId);\n        const newDepartment = departments.find(d => d.id === newDepartmentId);\n        if (!oldDepartment || !newDepartment) {\n          return error('Department not found');\n        }\n        // Don't do anything if the department hasn't changed\n        if (oldDepartmentId === newDepartmentId) {\n          return error('Employee is already in this department');\n        }\n        // Update the employee's department (replace in array, do NOT push)\n        employees[employeeIndex] = Object.assign(Object.assign({}, employee), {\n          departmentId: newDepartmentId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Get employee account for name\n        const account = accounts.find(a => a.id === employee.accountId);\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        // Create workflow entry for transfer\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Transferred',\n          details: {\n            task: `Employee ${employee.employeeId} was transferred`,\n            additionalInfo: `From ${oldDepartment.name} to ${newDepartment.name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        workflows.push(workflow);\n        // Save changes\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employees[employeeIndex]), {\n          fullName: `${firstName} ${lastName}`.trim(),\n          departmentName: newDepartment.name,\n          department: {\n            id: newDepartment.id,\n            name: newDepartment.name,\n            description: newDepartment.description\n          }\n        }));\n      }\n      // Department functions\n      function getDepartments() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(departments.map(department => {\n          return Object.assign(Object.assign({}, department), {\n            id: department.id.toString(),\n            name: department.name,\n            description: department.description\n          });\n        }));\n      }\n      function getDepartmentById() {\n        if (!isAuthenticated()) return unauthorized();\n        const departmentId = idFromUrl();\n        const department = departments.find(x => x.id === departmentId);\n        if (!department) return notFound();\n        return ok(Object.assign(Object.assign({}, department), {\n          id: department.id.toString(),\n          name: department.name,\n          description: department.description\n        }));\n      }\n      function createDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const department = body;\n        // Validate department name is unique\n        if (departments.find(x => x.name === department.name)) {\n          return error('Department name already exists');\n        }\n        // Assign department id and save\n        department.id = newDepartmentId();\n        departments.push(department);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, department), {\n          id: department.id.toString()\n        }));\n      }\n      function updateDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        const oldDepartment = departments[departmentIndex];\n        const updatedDepartment = Object.assign(Object.assign(Object.assign({}, oldDepartment), body), {\n          id: departmentId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department name is unique\n        if (departments.find(x => x.name === updatedDepartment.name && x.id !== updatedDepartment.id)) {\n          return error('Department name already exists');\n        }\n        departments.push(updatedDepartment);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, updatedDepartment), {\n          id: updatedDepartment.id.toString()\n        }));\n      }\n      function deleteDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        const department = departments[departmentIndex];\n        // Delete department\n        departments = departments.filter(x => x.id !== departmentId);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, department), {\n          status: 'Deleted'\n        }));\n      }\n      // Position functions\n      function getPositions() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(positions.map(position => {\n          return Object.assign(Object.assign({}, position), {\n            id: position.id.toString(),\n            name: position.name,\n            description: position.description\n          });\n        }));\n      }\n      function getPositionById() {\n        if (!isAuthenticated()) return unauthorized();\n        const positionId = idFromUrl();\n        const position = positions.find(x => x.id === positionId);\n        if (!position) return notFound();\n        return ok(Object.assign(Object.assign({}, position), {\n          id: position.id.toString(),\n          name: position.name,\n          description: position.description\n        }));\n      }\n      function createPosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const position = body;\n        // Validate position name is unique\n        if (positions.find(x => x.name === position.name)) {\n          return error('Position name already exists');\n        }\n        // Assign position id and save\n        position.id = newPositionId();\n        positions.push(position);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, position), {\n          id: position.id.toString()\n        }));\n      }\n      function updatePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        const oldPosition = positions[positionIndex];\n        const updatedPosition = Object.assign(Object.assign(Object.assign({}, oldPosition), body), {\n          id: positionId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate position name is unique\n        if (positions.find(x => x.name === updatedPosition.name && x.id !== updatedPosition.id)) {\n          return error('Position name already exists');\n        }\n        positions.push(updatedPosition);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, updatedPosition), {\n          id: updatedPosition.id.toString()\n        }));\n      }\n      function deletePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        const position = positions[positionIndex];\n        // Delete position\n        positions = positions.filter(x => x.id !== positionId);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, position), {\n          status: 'Deleted'\n        }));\n      }\n      // Request type functions\n      function getRequestTypes() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(requestTypes.map(type => {\n          return Object.assign(Object.assign({}, type), {\n            id: type.id.toString(),\n            name: type.name,\n            description: type.description\n          });\n        }));\n      }\n      function getRequestTypeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const typeId = idFromUrl();\n        const type = requestTypes.find(x => x.id === typeId);\n        if (!type) return notFound();\n        return ok(Object.assign(Object.assign({}, type), {\n          id: type.id.toString(),\n          name: type.name,\n          description: type.description\n        }));\n      }\n      function createRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const type = body;\n        // Validate request type name is unique\n        if (requestTypes.find(x => x.name === type.name)) {\n          return error('Request type name already exists');\n        }\n        // Assign request type id and save\n        type.id = newRequestTypeId();\n        requestTypes.push(type);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, type), {\n          id: type.id.toString()\n        }));\n      }\n      function updateRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const typeId = idFromUrl();\n        const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n        if (typeIndex === -1) return notFound();\n        const oldType = requestTypes[typeIndex];\n        const updatedType = Object.assign(Object.assign(Object.assign({}, oldType), body), {\n          id: typeId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate request type name is unique\n        if (requestTypes.find(x => x.name === updatedType.name && x.id !== updatedType.id)) {\n          return error('Request type name already exists');\n        }\n        requestTypes.push(updatedType);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, updatedType), {\n          id: updatedType.id.toString()\n        }));\n      }\n      function deleteRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const typeId = idFromUrl();\n        const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n        if (typeIndex === -1) return notFound();\n        const type = requestTypes[typeIndex];\n        // Delete request type\n        requestTypes = requestTypes.filter(x => x.id !== typeId);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, type), {\n          status: 'Deleted'\n        }));\n      }\n      // Workflow functions\n      function getWorkflows() {\n        if (!isAuthenticated()) return unauthorized();\n        // Only include objects that are true workflows (type is 'Added', 'Updated', or 'Transferred' and do NOT have request-like properties)\n        const workflowTypes = ['Added', 'Updated', 'Transferred'];\n        const sortedWorkflows = [...workflows].filter(wf => {\n          return typeof wf.type === 'string' && workflowTypes.includes(wf.type) && !('items' in wf) && !('typeId' in wf) && !('description' in wf);\n        }).sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        const result = sortedWorkflows.map(workflow => {\n          // Ensure details is a string\n          let details = '';\n          if (typeof workflow.details === 'object') {\n            details = workflow.details.task || '';\n            if (workflow.details.additionalInfo) {\n              details += ` - ${workflow.details.additionalInfo}`;\n            }\n          } else {\n            details = workflow.details || '';\n          }\n          // Always provide datetimecreated\n          const datetimecreated = workflow.datetimecreated || workflow.createdDate;\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: datetimecreated,\n            employeeId: workflow.employeeId\n          };\n        });\n        return ok(result);\n      }\n      function getWorkflowById() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflow = workflows.find(x => x.id === idFromUrl());\n        if (!workflow) return notFound();\n        const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n        return ok({\n          id: workflow.id.toString(),\n          type: workflow.type,\n          details: details,\n          status: workflow.status,\n          datetimecreated: workflow.datetimecreated || workflow.createdDate\n        });\n      }\n      function getWorkflowsByRequestId() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) {\n          return notFound();\n        }\n        const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n        // Sort workflows in descending order\n        const sortedWorkflows = [...requestWorkflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function createWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        // Format details as a string\n        let details = '';\n        if (typeof body.details === 'object') {\n          details = body.details.task || '';\n          if (body.details.additionalInfo) {\n            details += ` - ${body.details.additionalInfo}`;\n          }\n        } else {\n          details = body.details || '';\n        }\n        const now = new Date().toISOString();\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: body.employeeId,\n          type: body.type,\n          details: details,\n          status: 'ForReviewing',\n          createdDate: now,\n          datetimecreated: now,\n          lastModifiedDate: now\n        };\n        // Validate required fields\n        const requiredFields = {\n          employeeId: !!workflow.employeeId,\n          type: !!workflow.type,\n          details: !!workflow.details,\n          status: !!workflow.status\n        };\n        // Check if any required field is missing\n        const missingFields = Object.entries(requiredFields).filter(([_, isValid]) => !isValid).map(([fieldName]) => fieldName);\n        if (missingFields.length > 0) {\n          return error(`Required fields are missing: ${missingFields.join(', ')}`);\n        }\n        // Validate employee exists\n        const employee = employees.find(e => e.id === workflow.employeeId);\n        if (!employee) return error('Employee not found');\n        workflows.push(workflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function updateWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        const oldWorkflow = workflows[workflowIndex];\n        const updatedWorkflow = Object.assign(Object.assign(Object.assign({}, oldWorkflow), body), {\n          id: workflowId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate employee exists\n        const employee = employees.find(e => e.id === updatedWorkflow.employeeId);\n        if (!employee) return error('Employee not found');\n        workflows[workflowIndex] = updatedWorkflow;\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedWorkflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function updateWorkflowStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        const newStatus = body.status;\n        Object.assign(workflow, {\n          status: newStatus,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          status: newStatus\n        }));\n      }\n      function deleteWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        const workflow = workflows[workflowIndex];\n        const employee = employees.find(e => e.id === workflow.employeeId);\n        // Delete workflow\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function deleteWorkflowItem() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        // Delete workflow item\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          status: 'Deleted'\n        }));\n      }\n      function createAccount() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          return error('Email already exists');\n        }\n        account.id = newAccountId();\n        account.dateCreated = new Date().toISOString();\n        account.isVerified = true;\n        account.refreshTokens = [];\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      function updateAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        const accountId = idFromUrl();\n        const account = accounts.find(x => x.id === accountId);\n        if (!account) return notFound();\n        if (account.id !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Only allow admins to update role\n        if (!isAdmin()) {\n          delete body.role;\n        }\n        // If email is being changed, make sure it's not already taken\n        if (body.email && body.email !== account.email && accounts.find(x => x.email === body.email)) {\n          return error('Email already exists');\n        }\n        Object.assign(account, body);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(basicDetails(account));\n      }\n      function deleteAccount() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const accountId = idFromUrl();\n        const account = accounts.find(x => x.id === accountId);\n        if (!account) return notFound();\n        if (account.id === currentAccount().id) return error('You cannot delete your own account');\n        accounts = accounts.filter(x => x.id !== accountId);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  // use fake backend in place of Http service for backend-less development\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","materialize","dematerialize","Role","accountsKey","accounts","JSON","parse","localStorage","getItem","employeesKey","employees","departmentsKey","departments","id","name","description","requestsKey","requests","requestItemsKey","requestItems","workflowsKey","workflows","positionsKey","positions","requestTypesKey","requestTypes","newAccountId","length","Math","max","map","x","newRequestId","newRequestItemId","newEmployeeId","newWorkflowId","newDepartmentId","newPositionId","newRequestTypeId","generateJwtToken","account","header","btoa","stringify","alg","typ","now","Date","getTime","payload","role","email","iat","exp","payloadBase64","signature","error","console","generateRefreshToken","random","toString","substr","isTokenExpired","token","parts","split","atob","FakeBackendInterceptor","constructor","alertService","intercept","request","next","url","method","headers","body","ok","status","message","unauthorized","notFound","basicDetails","title","firstName","lastName","isVerified","isAuthenticated","authHeader","get","startsWith","find","isAdmin","Admin","currentAccount","idFromUrl","urlParts","parseInt","getWorkflowsByEmployeeId","internalId","pop","workflowTypes","employeeWorkflows","filter","wf","employeeId","type","includes","sortedWorkflows","sort","a","b","dateA","datetimecreated","createdDate","dateB","workflow","details","task","additionalInfo","handleRoute","pipe","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","getAccounts","match","getAccountById","createAccount","updateAccount","deleteAccount","getRequests","getRequestById","getRequestsByEmployeeId","getMyRequests","createRequest","updateRequest","changeRequestStatus","deleteRequest","getEmployees","getEmployeeById","createEmployee","updateEmployee","deleteEmployee","transferEmployee","getDepartments","getDepartmentById","createDepartment","updateDepartment","deleteDepartment","getPositions","getPositionById","createPosition","updatePosition","deletePosition","getRequestTypes","getRequestTypeById","createRequestType","updateRequestType","deleteRequestType","getWorkflows","getWorkflowById","getWorkflowsByRequestId","createWorkflow","updateWorkflow","updateWorkflowStatus","deleteWorkflow","deleteWorkflowItem","handle","password","refreshTokens","rt","push","setItem","jwtToken","foundAccount","foundRefreshToken","acc","Array","isArray","validTokens","newRefreshToken","setTimeout","info","location","origin","autoclose","User","dateCreated","toISOString","verificationToken","confirmPassword","verifyUrl","filteredRequests","r","typeId","some","currentUserId","items","item","requestId","requestEmployee","e","requestAccount","accountId","requestType","t","employee","fullName","trim","charAt","toUpperCase","slice","toLowerCase","quantity","Object","employeeRequests","sortedRequests","myRequests","targetEmployee","employeeIdNum","Number","currentUser","lastModifiedDate","requestItemsList","Error","response","assign","newItems","newStatus","validStatuses","requestIndex","findIndex","department","d","departmentId","departmentName","position","hireDate","salary","requiredFields","missingFields","entries","_","isValid","fieldName","join","employeeIndex","oldEmployee","updatedEmployee","oldDepartmentId","oldDepartment","newDepartment","departmentIndex","updatedDepartment","positionId","positionIndex","oldPosition","updatedPosition","typeIndex","oldType","updatedType","result","requestWorkflows","workflowId","workflowIndex","oldWorkflow","updatedWorkflow","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project7\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\n\nimport { AlertService } from '@app/_services';\nimport { Role } from '@app/_models';\n\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [\n    { id: 1, name: 'HR', description: 'Human Resources' },\n    { id: 2, name: 'IT', description: 'Information Technology' },\n    { id: 3, name: 'Finance', description: 'Finance Department' },\n    { id: 4, name: 'Marketing', description: 'Marketing Department' }\n];\n\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [\n    { id: 1, name: 'Manager', description: 'Department Manager' },\n    { id: 2, name: 'Team Lead', description: 'Team Leader' },\n    { id: 3, name: 'Senior Staff', description: 'Senior Level Staff' },\n    { id: 4, name: 'Junior Staff', description: 'Junior Level Staff' }\n];\n\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [\n    { id: 1, name: 'Leave Request', description: 'Request for leave or time off' },\n    { id: 2, name: 'Equipment Request', description: 'Request for office equipment' },\n    { id: 3, name: 'Training Request', description: 'Request for training or workshops' },\n    { id: 4, name: 'Other', description: 'Other types of requests' }\n];\n\n// Helper functions for generating IDs\nfunction newAccountId(): number {\n    return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n}\n\nfunction newRequestId(): number {\n    return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n}\n\nfunction newRequestItemId(): number {\n    return requestItems.length ? Math.max(...requestItems.map(x => x.id)) + 1 : 1;\n}\n\nfunction newEmployeeId(): number {\n    return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n}\n\nfunction newWorkflowId(): number {\n    return workflows.length ? Math.max(...workflows.map(x => x.id)) + 1 : 1;\n}\n\nfunction newDepartmentId(): number {\n    return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n}\n\nfunction newPositionId(): number {\n    return positions.length ? Math.max(...positions.map(x => x.id)) + 1 : 1;\n}\n\nfunction newRequestTypeId(): number {\n    return requestTypes.length ? Math.max(...requestTypes.map(x => x.id)) + 1 : 1;\n}\n\n// Helper functions for JWT and refresh tokens\nfunction generateJwtToken(account: any): string {\n    try {\n        const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));\n        const now = new Date().getTime();\n        const payload = {\n            id: account.id,\n            role: account.role,\n            email: account.email,\n            iat: now,\n            exp: now + (24 * 60 * 60 * 1000) // 24 hours expiry\n        };\n        const payloadBase64 = btoa(JSON.stringify(payload));\n        const signature = btoa('fake-jwt-secret-key');\n        return `${header}.${payloadBase64}.${signature}`;\n    } catch (error) {\n        console.error('Error generating JWT token:', error);\n        throw error;\n    }\n}\n\nfunction generateRefreshToken(): string {\n    try {\n        const header = btoa(JSON.stringify({ alg: 'HS256', typ: 'JWT' }));\n        const now = new Date().getTime();\n        const payload = {\n            id: Math.random().toString(36).substr(2),\n            iat: now,\n            exp: now + (7 * 24 * 60 * 60 * 1000) // 7 days expiry\n        };\n        const payloadBase64 = btoa(JSON.stringify(payload));\n        const signature = btoa('fake-refresh-secret-key');\n        return `${header}.${payloadBase64}.${signature}`;\n    } catch (error) {\n        console.error('Error generating refresh token:', error);\n        throw error;\n    }\n}\n\nfunction isTokenExpired(token: string): boolean {\n    if (!token) return true;\n    \n    try {\n        const parts = token.split('.');\n        if (parts.length !== 3) return true;\n        \n        const payload = JSON.parse(atob(parts[1]));\n        if (!payload || typeof payload.exp !== 'number') return true;\n        \n        return payload.exp < new Date().getTime();\n    } catch (error) {\n        console.error('Error checking token expiration:', error);\n        return true;\n    }\n}\n\n@Injectable()\nexport class FakeBackendInterceptor implements HttpInterceptor {\n    constructor(private alertService: AlertService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { url, method, headers, body } = request;\n        const alertService = this.alertService;\n\n        // Helper functions\n        function ok(body?: any) {\n            return of(new HttpResponse({ status: 200, body }));\n        }\n\n        function error(message: string) {\n            return throwError(() => ({ error: { message } }));\n        }\n\n        function unauthorized() {\n            return throwError(() => ({ status: 401, error: { message: 'Unauthorized' } }));\n        }\n\n        function notFound() {\n            return throwError(() => ({ status: 404, error: { message: 'Not Found' } }));\n        }\n\n        function basicDetails(account: any) {\n            const { id, title, firstName, lastName, email, role, status, isVerified } = account;\n            return { id, title, firstName, lastName, email, role, status, isVerified };\n        }\n\n        function isAuthenticated() {\n            try {\n                const authHeader = headers.get('Authorization');\n                if (!authHeader?.startsWith('Bearer ')) return false;\n                \n                const token = authHeader.split(' ')[1];\n                if (isTokenExpired(token)) {\n                    return false;\n                }\n                \n                const parts = token.split('.');\n                const payload = JSON.parse(atob(parts[1]));\n                const account = accounts.find(x => x.id === payload.id);\n                \n                return !!account;\n            } catch (error) {\n                return false;\n            }\n        }\n\n        function isAdmin() {\n            return currentAccount()?.role === Role.Admin;\n        }\n\n        function currentAccount() {\n            if (!isAuthenticated()) return null;\n            \n            try {\n                const authHeader = headers.get('Authorization');\n                if (!authHeader?.startsWith('Bearer ')) return null;\n                \n                const token = authHeader.split(' ')[1];\n                const parts = token.split('.');\n                const payload = JSON.parse(atob(parts[1]));\n                \n                // Find account by ID from token payload\n                const account = accounts.find(x => x.id === payload.id);\n                if (!account) {\n                    return null;\n                }\n                \n                return account;\n            } catch (error) {\n                return null;\n            }\n        }\n\n        function idFromUrl() {\n            const urlParts = url.split('/');\n            // Handle URLs that end with /status\n            if (urlParts[urlParts.length - 1] === 'status') {\n                return parseInt(urlParts[urlParts.length - 2]);\n            }\n            return parseInt(urlParts[urlParts.length - 1]);\n        }\n\n        function getWorkflowsByEmployeeId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const internalId = parseInt(url.split('/').pop());\n\n            // Only include objects that are true workflows (type is 'Added', 'Updated', or 'Transferred' and do NOT have request-like properties)\n            const workflowTypes = ['Added', 'Updated', 'Transferred'];\n            const employeeWorkflows = workflows.filter(wf => {\n                return (\n                    wf.employeeId === internalId &&\n                    typeof wf.type === 'string' &&\n                    workflowTypes.includes(wf.type) &&\n                    !('items' in wf) &&\n                    !('typeId' in wf) &&\n                    !('description' in wf)\n                );\n            });\n\n            // Sort workflows in descending order by creation date\n            const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                // Ensure details is a string\n                let details = '';\n                if (typeof workflow.details === 'object') {\n                    details = workflow.details.task || '';\n                    if (workflow.details.additionalInfo) {\n                        details += ` - ${workflow.details.additionalInfo}`;\n                    }\n                } else {\n                    details = workflow.details || '';\n                }\n                // Always provide datetimecreated\n                const datetimecreated = workflow.datetimecreated || workflow.createdDate;\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: datetimecreated,\n                    employeeId: workflow.employeeId\n                };\n            }));\n        }\n\n        return handleRoute().pipe(\n            delay(500),\n            materialize(),\n            dematerialize()\n        );\n\n        function handleRoute() {\n            switch (true) {\n                case url.endsWith('/accounts/authenticate') && method === 'POST':\n                    return authenticate();\n                case url.endsWith('/accounts/refresh-token') && method === 'POST':\n                    return refreshToken();\n                case url.endsWith('/accounts/revoke-token') && method === 'POST':\n                    return revokeToken();\n                case url.endsWith('/accounts/register') && method === 'POST':\n                    return register();\n                case url.endsWith('/accounts/verify-email') && method === 'POST':\n                    return verifyEmail();\n                case url.endsWith('/accounts') && method === 'GET':\n                    return getAccounts();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n                    return getAccountById();\n                case url.endsWith('/accounts') && method === 'POST':\n                    return createAccount();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n                    return updateAccount();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n                    return deleteAccount();\n                    \n                // request routes\n                case url.endsWith('/requests') && method === 'GET':\n                    return getRequests();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n                    return getRequestById();\n                case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n                    return getRequestsByEmployeeId();\n                case url.endsWith('/requests/my-requests') && method === 'GET':\n                    return getMyRequests();\n                case url.endsWith('/requests') && method === 'POST':\n                    return createRequest();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n                    return updateRequest();\n                case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n                    return changeRequestStatus();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequest();\n                    \n                // employee routes\n                case url.endsWith('/employees') && method === 'GET':\n                    return getEmployees();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n                    return getEmployeeById();\n                case url.endsWith('/employees') && method === 'POST':\n                    return createEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n                    return updateEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n                    return deleteEmployee();\n                case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n                    return transferEmployee();\n\n                // department routes\n                case url.endsWith('/departments') && method === 'GET':\n                    return getDepartments();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n                    return getDepartmentById();\n                case url.endsWith('/departments') && method === 'POST':\n                    return createDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n                    return updateDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n                    return deleteDepartment();\n                    \n                // position routes\n                case url.endsWith('/positions') && method === 'GET':\n                    return getPositions();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n                    return getPositionById();\n                case url.endsWith('/positions') && method === 'POST':\n                    return createPosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n                    return updatePosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n                    return deletePosition();\n\n                // request type routes\n                case url.endsWith('/request-types') && method === 'GET':\n                    return getRequestTypes();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n                    return getRequestTypeById();\n                case url.endsWith('/request-types') && method === 'POST':\n                    return createRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n                    return updateRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequestType();\n\n                // workflow routes\n                case url.endsWith('/workflows') && method === 'GET':\n                    return getWorkflows();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n                    return getWorkflowById();\n                case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByEmployeeId();\n                case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByRequestId();\n                case url.endsWith('/workflows') && method === 'POST':\n                    return createWorkflow();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n                    return updateWorkflow();\n                case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n                    return updateWorkflowStatus();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflow();\n                case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflowItem();\n                    \n                default:\n                    return next.handle(request);\n            }\n        }\n\n        // Authentication functions\n        function authenticate() {\n            const { email, password } = body;\n            const account = accounts.find(x => x.email === email);\n        \n            if (!account) return error('Email or password is incorrect');\n            if (password !== account.password) return error('Email or password is incorrect');\n            if (!account.isVerified) return error('Please verify your email before logging in');\n\n            try {\n                // Initialize refreshTokens array if it doesn't exist\n                if (!account.refreshTokens) {\n                    account.refreshTokens = [];\n                }\n\n                // Generate refresh token that expires in 7 days\n                const refreshToken = generateRefreshToken();\n                \n                // Remove any expired refresh tokens\n                account.refreshTokens = account.refreshTokens.filter(rt => !isTokenExpired(rt));\n                \n                // Add new refresh token\n                account.refreshTokens.push(refreshToken);\n                localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n                const jwtToken = generateJwtToken(account);\n        \n                return ok({\n                    ...basicDetails(account),\n                    jwtToken,\n                    refreshToken\n                });\n            } catch (error) {\n                return error('An error occurred during authentication');\n            }\n        }\n\n        function refreshToken() {\n            try {\n                // Find the account with a valid (not expired) refresh token\n                let foundAccount = null;\n                let foundRefreshToken = null;\n                for (const acc of accounts) {\n                    if (Array.isArray(acc.refreshTokens) && acc.refreshTokens.length > 0) {\n                        // Find the most recent valid refresh token\n                        const validTokens = acc.refreshTokens.filter(rt => !isTokenExpired(rt));\n                        if (validTokens.length > 0) {\n                            foundAccount = acc;\n                            foundRefreshToken = validTokens[validTokens.length - 1];\n                            break;\n                        }\n                    }\n                }\n                if (!foundAccount || !foundRefreshToken) {\n                    return unauthorized();\n                }\n\n                // Generate new tokens\n                const newRefreshToken = generateRefreshToken();\n                const jwtToken = generateJwtToken(foundAccount);\n\n                // Update refresh tokens - remove the used one, add the new one\n                foundAccount.refreshTokens = foundAccount.refreshTokens.filter(x => x !== foundRefreshToken && !isTokenExpired(x));\n                foundAccount.refreshTokens.push(newRefreshToken);\n                localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n                return ok({\n                    ...basicDetails(foundAccount),\n                    jwtToken,\n                    refreshToken: newRefreshToken\n                });\n            } catch (error) {\n                return unauthorized();\n            }\n        }\n\n        function revokeToken() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const refreshToken = body.refreshToken;\n            const account = accounts.find(x => x.refreshTokens?.includes(refreshToken));\n\n            // revoke token and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function register() {\n            const account = body;\n\n            if (accounts.find(x => x.email === account.email)) {\n                // display email already registered message in alert\n                setTimeout(() => {\n                    alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, { autoclose: false });\n                }, 1000);\n\n                // always return ok() response to prevent email enumeration\n                return ok();\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            if (account.id === 1) {\n                // first registered account is an admin\n                account.role = Role.Admin;\n                account.status = 'Active'; // Admin accounts get active status\n            } else {\n                account.role = Role.User;\n                account.status = 'Inactive'; // User accounts get inacitve status upon creation\n            }\n            account.dateCreated = new Date().toISOString();\n            account.verificationToken = new Date().getTime().toString();\n            account.isVerified = false;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // display verification email in alert\n            setTimeout(() => {\n                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, { autoclose: false });\n            }, 1000);\n\n            return ok();\n        }\n\n        function verifyEmail() {\n            const { token } = body;\n            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n\n            if (!account) return error('Verification failed');\n\n            // set is verified flag to true if token is valid\n            account.isVerified = true;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function getAccounts() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(accounts.map(x => basicDetails(x)));\n        }\n\n        function getAccountById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let account = accounts.find(x => x.id === idFromUrl());\n\n            // user accounts can get own profile and admin accounts can get all profiles\n            if (account.id !== currentAccount().id && !isAdmin()) {\n                return unauthorized();\n            }\n\n            return ok(basicDetails(account));\n        }\n\n        // Request functions\n        function getRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            // Only include objects that are true requests (have typeId or type matching requestTypes)\n            let filteredRequests = requests.filter(r => {\n                // Must have a typeId or a type that matches a requestType\n                return (typeof r.typeId === 'number') || (typeof r.type === 'string' && requestTypes.some(rt => rt.name === r.type));\n            });\n            if (!isAdmin()) {\n                const currentUserId = currentAccount().id;\n                filteredRequests = filteredRequests.filter(x => x.employeeId === currentUserId);\n            }\n\n            return ok(filteredRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const requestEmployee = employees.find(e => e.id === request.employeeId);\n                const requestAccount = accounts.find(a => a.id === requestEmployee?.accountId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n\n                return {\n                    id: request.id,\n                    employeeId: requestEmployee?.employeeId || '',\n                    type: requestType?.name || request.type || '',\n                    status: request.status,\n                    createdDate: request.createdDate,\n                    items: items,\n                    employee: {\n                        id: requestEmployee?.id,\n                        employeeId: requestEmployee?.employeeId,\n                        fullName: requestAccount ? `${requestAccount.firstName} ${requestAccount.lastName}`.trim() : ''\n                    }\n                };\n            }));\n        }\n\n        function getRequestById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            // Check authorization\n            if (!isAdmin() && request.employeeId !== currentAccount().id) {\n                return unauthorized();\n            }\n\n            // Add related data\n            const items = requestItems.filter(item => item.requestId === request.id);\n            const employee = employees.find(e => e.id === request.employeeId);\n            const account = accounts.find(a => a.id === employee?.accountId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n\n            // Format employee name with proper capitalization\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                items: items.map(item => ({\n                    id: item.id,\n                    name: item.name,\n                    quantity: item.quantity\n                })),\n                employee: employee ? {\n                    ...employee,\n                    fullName: fullName,\n                    employeeId: employee.employeeId\n                } : null,\n                type: requestType?.name || request.type\n            });\n        }\n\n        function getRequestsByEmployeeId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const internalId = parseInt(url.split('/').pop());\n\n            const employee = employees.find(e => e.id === internalId);\n            if (!employee) {\n                return notFound();\n            }\n            \n            const employeeRequests = requests.filter(x => x.employeeId === employee.id);\n\n            // Sort requests in descending order by creation date\n            const sortedRequests = [...employeeRequests].sort((a, b) => {\n                const dateA = new Date(a.createdDate);\n                const dateB = new Date(b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                const account = accounts.find(a => a.id === employee.accountId);\n                \n                // Format employee name with proper capitalization\n                const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n                const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n                const fullName = `${firstName} ${lastName}`.trim();\n\n                return {\n                    id: request.id,\n                    type: requestType?.name || request.type,\n                    status: request.status,\n                    createdDate: request.createdDate,\n                    items: items,\n                    employee: {\n                        id: employee.id,\n                        employeeId: employee.employeeId,\n                        fullName: fullName\n                    }\n                };\n            }));\n        }\n\n        function getMyRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const currentUserId = currentAccount().id;\n            const myRequests = requests.filter(x => x.employeeId === currentUserId);\n\n            return ok(myRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const employee = employees.find(e => e.id === request.employeeId);\n                const account = accounts.find(a => a.id === employee?.accountId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                return {\n                    ...request,\n                    items,\n                    employee: employee ? {\n                        ...employee,\n                        fullName: `${account?.firstName || ''} ${account?.lastName || ''}`.trim(),\n                        employeeId: employee.employeeId\n                    } : null,\n                    type: requestType ? requestType.name : request.type\n                };\n            }));\n        }\n\n        function createRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            // Find employee by employeeId\n            let targetEmployee;\n            if (body.employeeId) {\n                // Try to find by internal ID first\n                const employeeIdNum = Number(body.employeeId);\n                targetEmployee = employees.find(e => e.id === employeeIdNum);\n                \n                if (!targetEmployee) {\n                    // If not found by internal ID, try to find by employee ID string\n                    targetEmployee = employees.find(e => e.employeeId === body.employeeId);\n                }\n                \n                if (!targetEmployee) {\n                    return error('Employee not found');\n                }\n            } else {\n                // If no employeeId provided, use current user\n                const currentUser = currentAccount();\n                targetEmployee = employees.find(e => e.accountId === currentUser.id);\n                if (!targetEmployee) {\n                    return error('Current user is not an employee');\n                }\n            }\n\n            const request = {\n                id: newRequestId(),\n                employeeId: targetEmployee.id,\n                typeId: body.typeId ? Number(body.typeId) : null,\n                type: body.type,\n                description: body.description || '',\n                status: 'Pending',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            // Validate required fields\n            if (!request.type && !request.typeId) {\n                return error('Request type is required');\n            }\n\n            // Validate and process items if present\n            let requestItemsList = [];\n            if (body.items && Array.isArray(body.items)) {\n                try {\n                    requestItemsList = body.items.map(item => {\n                        if (!item.name || !item.quantity) {\n                            throw new Error('Invalid item data');\n                        }\n                        return {\n                    id: newRequestItemId(),\n                    requestId: request.id,\n                    name: item.name,\n                            quantity: Number(item.quantity)\n                        };\n                    });\n                } catch (error) {\n                    return error('Invalid item data provided');\n                }\n            }\n\n            // Save request and items\n            requests.push(request);\n            if (requestItemsList.length > 0) {\n                requestItems.push(...requestItemsList);\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n            }\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            const account = accounts.find(a => a.id === targetEmployee.accountId);\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            const response = {\n                ...request,\n                items: requestItemsList,\n                employee: {\n                    id: targetEmployee.id,\n                    employeeId: targetEmployee.employeeId,\n                    fullName: fullName\n                }\n            };\n\n            return ok(response);\n        }\n\n        function updateRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Update basic request fields\n            Object.assign(request, {\n                type: body.type,\n                description: body.description || request.description,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            // Handle item changes\n            if (body.items) {\n                // Remove all existing items for this request\n                requestItems = requestItems.filter(item => item.requestId !== requestId);\n\n                // Add new/updated items\n                const newItems = body.items.map(item => ({\n                    id: item.id || newRequestItemId(),\n                        requestId: requestId,\n                        name: item.name,\n                    quantity: Number(item.quantity)\n                    }));\n\n                requestItems.push(...newItems);\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n            }\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            // Get related data for response\n            const employee = employees.find(e => e.id === request.employeeId);\n            const account = accounts.find(a => a.id === employee?.accountId);\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                items: requestItems.filter(item => item.requestId === requestId),\n                employee: employee ? {\n                    ...employee,\n                    fullName: fullName,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function changeRequestStatus() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n            \n            if (!request) {\n                return error('Request not found');\n            }\n\n            const newStatus = body.status;\n            if (!newStatus) {\n                return error('Status is required');\n            }\n\n            // Validate status value\n            const validStatuses = ['Pending', 'Approved', 'Rejected', 'Cancelled'];\n            if (!validStatuses.includes(newStatus)) {\n                return error('Invalid status value');\n            }\n\n            try {\n                // Update request\n                request.status = newStatus;\n                request.lastModifiedDate = new Date().toISOString();\n\n                // Update requests array\n                const requestIndex = requests.findIndex(x => x.id === requestId);\n                if (requestIndex === -1) {\n                    return error('Request not found');\n                }\n                requests[requestIndex] = request;\n                localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n                // Get related data for response\n                const employee = employees.find(e => e.id === request.employeeId);\n                const account = accounts.find(a => a.id === employee?.accountId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                const items = requestItems.filter(item => item.requestId === request.id);\n\n                // Format employee name\n                const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n                const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n                const fullName = `${firstName} ${lastName}`.trim();\n\n                const response = {\n                    ...request,\n                    type: requestType?.name || request.type,\n                    items: items,\n                    employee: employee ? {\n                        id: employee.id,\n                        employeeId: employee.employeeId,\n                        fullName: fullName\n                    } : null\n                };\n\n                return ok(response);\n            } catch (error) {\n                return error('Failed to update request status');\n            }\n        }\n\n        function deleteRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Delete request and its items\n            requests = requests.filter(x => x.id !== requestId);\n            requestItems = requestItems.filter(x => x.requestId !== requestId);\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n\n            return ok();\n        }\n\n        // Employee functions\n        function getEmployees() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(employees.map(employee => {\n                const department = departments.find(d => d.id === employee.departmentId);\n                const account = accounts.find(a => a.id === employee.accountId);\n                \n                // Format names with proper capitalization\n                const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n                const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n                \n                return {\n                    ...employee,\n                    employeeId: employee.employeeId,\n                    fullName: `${firstName} ${lastName}`.trim(),\n                    departmentName: department?.name || '',\n                    department: department ? {\n                        id: department.id,\n                        name: department.name,\n                        description: department.description\n                    } : null,\n                    account: account ? basicDetails(account) : null\n                };\n            }));\n        }\n\n        function getEmployeeById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employee = employees.find(x => x.id === employeeId);\n            \n            if (!employee) return notFound();\n            \n            // Get fresh department data\n            const department = departments.find(d => d.id === employee.departmentId);\n            if (!department) return error('Department not found');\n            \n            const account = accounts.find(a => a.id === employee.accountId);\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            \n            // Return complete employee data with fresh relations\n            return ok({\n                ...employee,\n                employeeId: employee.employeeId,\n                fullName: `${firstName} ${lastName}`.trim(),\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function createEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            // Check if employee ID already exists\n            if (employees.find(x => x.employeeId === body.employeeId)) {\n                return error('Employee ID already exists');\n            }\n\n            // Validate department exists\n            const department = departments.find(d => d.id === Number(body.departmentId));\n            if (!department) return error('Department not found');\n\n            // Validate account exists and isn't already assigned to an employee\n            const account = accounts.find(a => a.id === Number(body.accountId));\n            if (!account) return error('Account not found');\n            if (employees.find(e => e.accountId === Number(body.accountId))) {\n                return error('Account is already assigned to another employee');\n            }\n\n            const employee = {\n                id: newEmployeeId(),\n                accountId: Number(body.accountId),\n                employeeId: body.employeeId,\n                departmentId: Number(body.departmentId),\n                position: body.position,\n                hireDate: body.hireDate,\n                salary: Number(body.salary),\n                status: body.status || 'Active',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Check each required field individually\n            const requiredFields = {\n                accountId: !!employee.accountId,\n                employeeId: !!employee.employeeId,\n                departmentId: !!employee.departmentId,\n                position: !!employee.position,\n                hireDate: !!employee.hireDate,\n                salary: !!employee.salary\n            };\n            \n            // Check if any required field is missing\n            const missingFields = Object.entries(requiredFields)\n                .filter(([_, isValid]) => !isValid)\n                .map(([fieldName]) => fieldName);\n            \n            if (missingFields.length > 0) {\n                return error(`Required fields are missing: ${missingFields.join(', ')}`);\n            }\n\n            // Format names\n            const firstName = account.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            \n            // Create workflow entry for new employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employee.id,\n                type: 'Added',\n                details: {\n                    task: `New employee ${employee.employeeId} was added`,\n                    additionalInfo: `Added to ${department.name} department as ${employee.position}`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(employee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...employee,\n                fullName: `${firstName} ${lastName}`.trim(),\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                }\n            });\n        }\n\n        function updateEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const oldEmployee = employees[employeeIndex];\n            const updatedEmployee = {\n                ...oldEmployee,\n                ...body,\n                id: employeeId,\n                accountId: body.accountId ? Number(body.accountId) : oldEmployee.accountId,\n                departmentId: body.departmentId ? Number(body.departmentId) : oldEmployee.departmentId,\n                position: body.position || oldEmployee.position,\n                salary: body.salary ? Number(body.salary) : oldEmployee.salary,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate department exists if changed\n            if (body.departmentId) {\n                const department = departments.find(d => d.id === updatedEmployee.departmentId);\n                if (!department) return error('Department not found');\n            }\n\n            // Validate account exists if changed\n            if (body.accountId) {\n                const account = accounts.find(a => a.id === updatedEmployee.accountId);\n                if (!account) return error('Account not found');\n            }\n            \n            const department = departments.find(d => d.id === updatedEmployee.departmentId);\n            const account = accounts.find(a => a.id === updatedEmployee.accountId);\n            \n            // Create workflow entry for updated employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Updated',\n                details: {\n                    task: `Employee ${employeeId} was updated`,\n                    additionalInfo: `Updated in ${department.name} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees[employeeIndex] = updatedEmployee;\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...updatedEmployee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function deleteEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const employee = employees[employeeIndex];\n            \n            // Delete employee\n            employees = employees.filter(x => x.id !== employeeId);\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            \n            return ok({\n                ...employee,\n                status: 'Deleted'\n            });\n        }\n\n        function transferEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const employeeId = idFromUrl();\n            // Find the employee index\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            if (employeeIndex === -1) {\n                return notFound();\n            }\n\n            // Get the current employee\n            const employee = employees[employeeIndex];\n            const oldDepartmentId = employee.departmentId;\n            const newDepartmentId = Number(body.departmentId);\n\n            // Validate departments exist\n            const oldDepartment = departments.find(d => d.id === oldDepartmentId);\n            const newDepartment = departments.find(d => d.id === newDepartmentId);\n            if (!oldDepartment || !newDepartment) {\n                return error('Department not found');\n            }\n\n            // Don't do anything if the department hasn't changed\n            if (oldDepartmentId === newDepartmentId) {\n                return error('Employee is already in this department');\n            }\n\n            // Update the employee's department (replace in array, do NOT push)\n            employees[employeeIndex] = {\n                ...employee,\n                departmentId: newDepartmentId,\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            // Get employee account for name\n            const account = accounts.find(a => a.id === employee.accountId);\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n\n            // Create workflow entry for transfer\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Transferred',\n                details: {\n                    task: `Employee ${employee.employeeId} was transferred`,\n                    additionalInfo: `From ${oldDepartment.name} to ${newDepartment.name} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            workflows.push(workflow);\n\n            // Save changes\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok({\n                ...employees[employeeIndex],\n                fullName: `${firstName} ${lastName}`.trim(),\n                departmentName: newDepartment.name,\n                department: {\n                    id: newDepartment.id,\n                    name: newDepartment.name,\n                    description: newDepartment.description\n                }\n            });\n        }\n\n        // Department functions\n        function getDepartments() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(departments.map(department => {\n                return {\n                    ...department,\n                    id: department.id.toString(),\n                    name: department.name,\n                    description: department.description\n                };\n            }));\n        }\n\n        function getDepartmentById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            const department = departments.find(x => x.id === departmentId);\n            \n            if (!department) return notFound();\n            \n            return ok({\n                ...department,\n                id: department.id.toString(),\n                name: department.name,\n                description: department.description\n            });\n        }\n\n        function createDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const department = body;\n            \n            // Validate department name is unique\n            if (departments.find(x => x.name === department.name)) {\n                return error('Department name already exists');\n            }\n            \n            // Assign department id and save\n            department.id = newDepartmentId();\n            departments.push(department);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...department,\n                id: department.id.toString()\n            });\n        }\n\n        function updateDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\n            \n            if (departmentIndex === -1) return notFound();\n            \n            const oldDepartment = departments[departmentIndex];\n            const updatedDepartment = {\n                ...oldDepartment,\n                ...body,\n                id: departmentId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate department name is unique\n            if (departments.find(x => x.name === updatedDepartment.name && x.id !== updatedDepartment.id)) {\n                return error('Department name already exists');\n            }\n\n            departments.push(updatedDepartment);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...updatedDepartment,\n                id: updatedDepartment.id.toString()\n            });\n        }\n\n        function deleteDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const departmentId = idFromUrl();\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\n            \n            if (departmentIndex === -1) return notFound();\n            \n            const department = departments[departmentIndex];\n            \n            // Delete department\n            departments = departments.filter(x => x.id !== departmentId);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...department,\n                status: 'Deleted'\n            });\n        }\n\n        // Position functions\n        function getPositions() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(positions.map(position => {\n                return {\n                    ...position,\n                    id: position.id.toString(),\n                    name: position.name,\n                    description: position.description\n                };\n            }));\n        }\n\n        function getPositionById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            const position = positions.find(x => x.id === positionId);\n            \n            if (!position) return notFound();\n            \n            return ok({\n                ...position,\n                id: position.id.toString(),\n                name: position.name,\n                description: position.description\n            });\n        }\n\n        function createPosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const position = body;\n            \n            // Validate position name is unique\n            if (positions.find(x => x.name === position.name)) {\n                return error('Position name already exists');\n            }\n            \n            // Assign position id and save\n            position.id = newPositionId();\n            positions.push(position);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...position,\n                id: position.id.toString()\n            });\n        }\n\n        function updatePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            const positionIndex = positions.findIndex(x => x.id === positionId);\n            \n            if (positionIndex === -1) return notFound();\n            \n            const oldPosition = positions[positionIndex];\n            const updatedPosition = {\n                ...oldPosition,\n                ...body,\n                id: positionId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate position name is unique\n            if (positions.find(x => x.name === updatedPosition.name && x.id !== updatedPosition.id)) {\n                return error('Position name already exists');\n            }\n\n            positions.push(updatedPosition);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...updatedPosition,\n                id: updatedPosition.id.toString()\n            });\n        }\n\n        function deletePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const positionId = idFromUrl();\n            const positionIndex = positions.findIndex(x => x.id === positionId);\n            \n            if (positionIndex === -1) return notFound();\n            \n            const position = positions[positionIndex];\n            \n            // Delete position\n            positions = positions.filter(x => x.id !== positionId);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...position,\n                status: 'Deleted'\n            });\n        }\n\n        // Request type functions\n        function getRequestTypes() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(requestTypes.map(type => {\n                return {\n                    ...type,\n                    id: type.id.toString(),\n                    name: type.name,\n                    description: type.description\n                };\n            }));\n        }\n\n        function getRequestTypeById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const typeId = idFromUrl();\n            const type = requestTypes.find(x => x.id === typeId);\n            \n            if (!type) return notFound();\n            \n            return ok({\n                ...type,\n                id: type.id.toString(),\n                name: type.name,\n                description: type.description\n            });\n        }\n\n        function createRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const type = body;\n            \n            // Validate request type name is unique\n            if (requestTypes.find(x => x.name === type.name)) {\n                return error('Request type name already exists');\n            }\n            \n            // Assign request type id and save\n            type.id = newRequestTypeId();\n            requestTypes.push(type);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...type,\n                id: type.id.toString()\n            });\n        }\n\n        function updateRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const typeId = idFromUrl();\n            const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n            \n            if (typeIndex === -1) return notFound();\n            \n            const oldType = requestTypes[typeIndex];\n            const updatedType = {\n                ...oldType,\n                ...body,\n                id: typeId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate request type name is unique\n            if (requestTypes.find(x => x.name === updatedType.name && x.id !== updatedType.id)) {\n                return error('Request type name already exists');\n            }\n\n            requestTypes.push(updatedType);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...updatedType,\n                id: updatedType.id.toString()\n            });\n        }\n\n        function deleteRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const typeId = idFromUrl();\n            const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n            \n            if (typeIndex === -1) return notFound();\n            \n            const type = requestTypes[typeIndex];\n            \n            // Delete request type\n            requestTypes = requestTypes.filter(x => x.id !== typeId);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...type,\n                status: 'Deleted'\n            });\n        }\n\n        // Workflow functions\n        function getWorkflows() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            // Only include objects that are true workflows (type is 'Added', 'Updated', or 'Transferred' and do NOT have request-like properties)\n            const workflowTypes = ['Added', 'Updated', 'Transferred'];\n            const sortedWorkflows = [...workflows]\n                .filter(wf => {\n                    return (\n                        typeof wf.type === 'string' &&\n                        workflowTypes.includes(wf.type) &&\n                        !('items' in wf) &&\n                        !('typeId' in wf) &&\n                        !('description' in wf)\n                    );\n                })\n                .sort((a, b) => {\n                    const dateA = new Date(a.datetimecreated || a.createdDate);\n                    const dateB = new Date(b.datetimecreated || b.createdDate);\n                    return dateB.getTime() - dateA.getTime();\n                });\n\n            const result = sortedWorkflows.map(workflow => {\n                // Ensure details is a string\n                let details = '';\n                if (typeof workflow.details === 'object') {\n                    details = workflow.details.task || '';\n                    if (workflow.details.additionalInfo) {\n                        details += ` - ${workflow.details.additionalInfo}`;\n                    }\n                } else {\n                    details = workflow.details || '';\n                }\n                // Always provide datetimecreated\n                const datetimecreated = workflow.datetimecreated || workflow.createdDate;\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: datetimecreated,\n                    employeeId: workflow.employeeId\n                };\n            });\n            return ok(result);\n        }\n\n        function getWorkflowById() {\n            if (!isAuthenticated()) return unauthorized();\n            const workflow = workflows.find(x => x.id === idFromUrl());\n            if (!workflow) return notFound();\n            \n            const details = typeof workflow.details === 'object' ? \n                `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                workflow.details || '';\n\n            return ok({\n                id: workflow.id.toString(),\n                type: workflow.type,\n                details: details,\n                status: workflow.status,\n                datetimecreated: workflow.datetimecreated || workflow.createdDate\n            });\n        }\n\n        function getWorkflowsByRequestId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const requestId = idFromUrl();\n\n            const request = requests.find(x => x.id === requestId);\n            if (!request) {\n                return notFound();\n            }\n            \n            const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n\n            // Sort workflows in descending order\n            const sortedWorkflows = [...requestWorkflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        function createWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            // Format details as a string\n            let details = '';\n            if (typeof body.details === 'object') {\n                details = body.details.task || '';\n                if (body.details.additionalInfo) {\n                    details += ` - ${body.details.additionalInfo}`;\n                }\n            } else {\n                details = body.details || '';\n            }\n\n            const now = new Date().toISOString();\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: body.employeeId,\n                type: body.type,\n                details: details,\n                status: 'ForReviewing', // Default status\n                createdDate: now,\n                datetimecreated: now,\n                lastModifiedDate: now\n            };\n            \n            // Validate required fields\n            const requiredFields = {\n                employeeId: !!workflow.employeeId,\n                type: !!workflow.type,\n                details: !!workflow.details,\n                status: !!workflow.status\n            };\n            \n            // Check if any required field is missing\n            const missingFields = Object.entries(requiredFields)\n                .filter(([_, isValid]) => !isValid)\n                .map(([fieldName]) => fieldName);\n            \n            if (missingFields.length > 0) {\n                return error(`Required fields are missing: ${missingFields.join(', ')}`);\n            }\n\n            // Validate employee exists\n            const employee = employees.find(e => e.id === workflow.employeeId);\n            if (!employee) return error('Employee not found');\n            \n            workflows.push(workflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function updateWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const workflowId = idFromUrl();\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n            \n            if (workflowIndex === -1) return notFound();\n            \n            const oldWorkflow = workflows[workflowIndex];\n            const updatedWorkflow = {\n                ...oldWorkflow,\n                ...body,\n                id: workflowId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate employee exists\n            const employee = employees.find(e => e.id === updatedWorkflow.employeeId);\n            if (!employee) return error('Employee not found');\n            \n            workflows[workflowIndex] = updatedWorkflow;\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...updatedWorkflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function updateWorkflowStatus() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflow = workflows.find(x => x.id === workflowId);\n            \n            if (!workflow) return notFound();\n            \n            const newStatus = body.status;\n\n            Object.assign(workflow, {\n                status: newStatus,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok({\n                ...workflow,\n                status: newStatus\n            });\n        }\n\n        function deleteWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n            \n            if (workflowIndex === -1) return notFound();\n            \n            const workflow = workflows[workflowIndex];\n            const employee = employees.find(e => e.id === workflow.employeeId);\n            \n            // Delete workflow\n            workflows = workflows.filter(x => x.id !== workflowId);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function deleteWorkflowItem() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflow = workflows.find(x => x.id === workflowId);\n            \n            if (!workflow) return notFound();\n            \n            // Delete workflow item\n            workflows = workflows.filter(x => x.id !== workflowId);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                status: 'Deleted'\n            });\n        }\n\n        function createAccount() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const account = body;\n            \n            if (accounts.find(x => x.email === account.email)) {\n                return error('Email already exists');\n            }\n            \n            account.id = newAccountId();\n            account.dateCreated = new Date().toISOString();\n            account.isVerified = true;\n            account.refreshTokens = [];\n            \n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n            \n            return ok(basicDetails(account));\n        }\n\n        function updateAccount() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const accountId = idFromUrl();\n            const account = accounts.find(x => x.id === accountId);\n            \n            if (!account) return notFound();\n            if (account.id !== currentAccount().id && !isAdmin()) return unauthorized();\n            \n            // Only allow admins to update role\n            if (!isAdmin()) {\n                delete body.role;\n            }\n            \n            // If email is being changed, make sure it's not already taken\n            if (body.email && body.email !== account.email && accounts.find(x => x.email === body.email)) {\n                return error('Email already exists');\n            }\n            \n            Object.assign(account, body);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n            \n            return ok(basicDetails(account));\n        }\n\n        function deleteAccount() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const accountId = idFromUrl();\n            const account = accounts.find(x => x.id === accountId);\n            \n            if (!account) return notFound();\n            if (account.id === currentAccount().id) return error('You cannot delete your own account');\n            \n            accounts = accounts.filter(x => x.id !== accountId);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n            \n            return ok();\n        }\n    }\n}\n\nexport const fakeBackendProvider = {\n    // use fake backend in place of Http service for backend-less development\n    provide: HTTP_INTERCEPTORS,\n    useClass: FakeBackendInterceptor,\n    multi: true\n};"]},"metadata":{},"sourceType":"module","externalDependencies":[]}