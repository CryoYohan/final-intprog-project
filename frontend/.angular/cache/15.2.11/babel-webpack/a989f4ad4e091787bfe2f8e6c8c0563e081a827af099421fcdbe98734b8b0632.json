{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\n// arrays in local storage for data persistence\nconst accountsKey = 'request-management-accounts';\nconst employeesKey = 'request-management-employees';\nconst departmentsKey = 'request-management-departments';\nconst requestsKey = 'request-management-requests';\nconst workflowsKey = 'request-management-workflows';\n// retrieve data from local storage\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [];\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      return handleRoute();\n      function handleRoute() {\n        switch (true) {\n          // accounts\n          case url.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case url.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case url.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case url.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case url.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case url.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          // employees\n          case url.endsWith('/employees') && method === 'POST':\n            return createEmployee();\n          case url.endsWith('/employees') && method === 'GET':\n            return getEmployees();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n            return getEmployeeById();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n            return updateEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n            return deleteEmployee();\n          case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'POST':\n            return transferEmployee();\n          // departments\n          case url.endsWith('/departments') && method === 'POST':\n            return createDepartment();\n          case url.endsWith('/departments') && method === 'GET':\n            return getDepartments();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n            return getDepartmentById();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n            return updateDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n            return deleteDepartment();\n          // requests\n          case url.endsWith('/requests') && method === 'POST':\n            return createRequest();\n          case url.endsWith('/requests') && method === 'GET':\n            return getRequests();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return getRequestById();\n          case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n            return getRequestsByEmployee();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return updateRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n            return deleteRequest();\n          // workflows\n          case url.endsWith('/workflows') && method === 'POST':\n            return createWorkflow();\n          case url.endsWith('/workflows') && method === 'GET':\n            return getWorkflows();\n          case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByEmployee();\n          case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n            return updateWorkflowStatus();\n          case url.endsWith('/workflows/onboarding') && method === 'POST':\n            return initiateOnboarding();\n          default:\n            // pass through any requests not handled above\n            return next.handle(request);\n        }\n      }\n      // route functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) return error('Email or password is incorrect');\n        if (password !== account.password) return error('Email or password is incorrect');\n        if (!account.isVerified) return error('Please verify your email before logging in');\n        if (account.status === 'Inactive') return error('Account is inactive');\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return unauthorized();\n        const account = accounts.find(x => {\n          var _a;\n          return (_a = x.refreshTokens) === null || _a === void 0 ? void 0 : _a.includes(refreshToken);\n        });\n        if (!account) return unauthorized();\n        // replace old refresh token with a new one\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // Return ok response to prevent email enumeration\n          return ok();\n        }\n        // Assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // First registered account is an admin\n          account.role = Role.Admin;\n          account.status = 'Active';\n        } else {\n          account.role = Role.User;\n          account.status = 'Inactive';\n        }\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // Set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        const account = accounts.find(x => x.id === idFromUrl());\n        return account ? ok(basicDetails(account)) : notFound();\n      }\n      function getEmployees() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(employees.map(x => {\n          const account = accounts.find(a => a.id === x.accountId);\n          const department = departments.find(d => d.id === x.departmentId);\n          return Object.assign(Object.assign({}, x), {\n            account: basicDetails(account),\n            departmentName: department === null || department === void 0 ? void 0 : department.name\n          });\n        }));\n      }\n      function getEmployeeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const employee = employees.find(x => x.id === idFromUrl());\n        if (!employee) return notFound();\n        const account = accounts.find(x => x.id === employee.accountId);\n        const department = departments.find(x => x.id === employee.departmentId);\n        return ok(Object.assign(Object.assign({}, employee), {\n          account: basicDetails(account),\n          departmentName: department === null || department === void 0 ? void 0 : department.name\n        }));\n      }\n      function createEmployee() {\n        if (!isAdmin()) return unauthorized();\n        const employee = body;\n        employee.id = newId(employees);\n        employees.push(employee);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(employee);\n      }\n      function updateEmployee() {\n        if (!isAdmin()) return unauthorized();\n        const employee = employees.find(x => x.id === idFromUrl());\n        if (!employee) return notFound();\n        Object.assign(employee, body);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(employee);\n      }\n      function deleteEmployee() {\n        if (!isAdmin()) return unauthorized();\n        employees = employees.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok();\n      }\n      function transferEmployee() {\n        if (!isAdmin()) return unauthorized();\n        const employee = employees.find(x => x.id === idFromUrl());\n        if (!employee) return notFound();\n        const {\n          departmentId\n        } = body;\n        if (!departments.find(x => x.id === departmentId)) return error('Department not found');\n        employee.departmentId = departmentId;\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(employee);\n      }\n      function getDepartments() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(departments);\n      }\n      function createDepartment() {\n        if (!isAdmin()) return unauthorized();\n        const department = body;\n        department.id = newId(departments);\n        departments.push(department);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(department);\n      }\n      function updateDepartment() {\n        if (!isAdmin()) return unauthorized();\n        const department = departments.find(x => x.id === idFromUrl());\n        if (!department) return notFound();\n        Object.assign(department, body);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(department);\n      }\n      function deleteDepartment() {\n        if (!isAdmin()) return unauthorized();\n        departments = departments.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok();\n      }\n      function getRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        if (!isAdmin() && !isModerator()) {\n          // Regular users can only see their own requests\n          const employee = employees.find(x => x.accountId === currentAccount().id);\n          return ok(requests.filter(x => x.employeeId === (employee === null || employee === void 0 ? void 0 : employee.id)));\n        }\n        return ok(requests);\n      }\n      function getRequestsByEmployee() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeRequests = requests.filter(x => x.employeeId === employeeId);\n        if (!isAdmin() && !isModerator() && !isOwnEmployee(employeeId)) {\n          return unauthorized();\n        }\n        return ok(employeeRequests);\n      }\n      function createRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = body;\n        request.id = newId(requests);\n        request.status = 'Pending';\n        request.createdDate = new Date().toISOString();\n        requests.push(request);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        return ok(request);\n      }\n      function updateRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        if (!isAdmin() && !isModerator() && !isOwnRequest(request.id)) {\n          return unauthorized();\n        }\n        Object.assign(request, body);\n        request.lastModifiedDate = new Date().toISOString();\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        return ok(request);\n      }\n      function deleteRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        if (!isAdmin() && !isOwnRequest(request.id)) {\n          return unauthorized();\n        }\n        requests = requests.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        return ok();\n      }\n      function getWorkflows() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(workflows);\n      }\n      function getWorkflowsByEmployee() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = idFromUrl();\n        return ok(workflows.filter(x => x.employeeId === employeeId));\n      }\n      function createWorkflow() {\n        if (!isAdmin()) return unauthorized();\n        const workflow = body;\n        workflow.id = newId(workflows);\n        workflow.createdDate = new Date().toISOString();\n        workflows.push(workflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(workflow);\n      }\n      function updateWorkflowStatus() {\n        if (!isAdmin()) return unauthorized();\n        const workflow = workflows.find(x => x.id === idFromUrl());\n        if (!workflow) return notFound();\n        workflow.status = body.status;\n        workflow.lastModifiedDate = new Date().toISOString();\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(workflow);\n      }\n      function initiateOnboarding() {\n        if (!isAdmin()) return unauthorized();\n        const workflow = Object.assign(Object.assign({\n          id: newId(workflows),\n          type: 'Onboarding',\n          status: 'Pending'\n        }, body), {\n          createdDate: new Date().toISOString()\n        });\n        workflows.push(workflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(workflow);\n      }\n      function getRequestById() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        if (!isAdmin() && !isModerator() && !isOwnRequest(request.id)) {\n          return unauthorized();\n        }\n        return ok(request);\n      }\n      function getDepartmentById() {\n        if (!isAuthenticated()) return unauthorized();\n        const department = departments.find(x => x.id === idFromUrl());\n        return department ? ok(department) : notFound();\n      }\n      // helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        })).pipe(delay(500)); // delay observable to simulate server api call\n      }\n\n      function error(message) {\n        return throwError(() => ({\n          error: {\n            message\n          }\n        })).pipe(materialize(), delay(500), dematerialize());\n      }\n      function unauthorized() {\n        return throwError(() => ({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        })).pipe(materialize(), delay(500), dematerialize());\n      }\n      function notFound() {\n        return throwError(() => ({\n          status: 404,\n          error: {\n            message: 'Not Found'\n          }\n        })).pipe(materialize(), delay(500), dematerialize());\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status\n        };\n      }\n      function isAuthenticated() {\n        return !!currentAccount();\n      }\n      function isAdmin() {\n        var _a;\n        return ((_a = currentAccount()) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n      }\n      function isModerator() {\n        var _a;\n        return ((_a = currentAccount()) === null || _a === void 0 ? void 0 : _a.role) === Role.Moderator;\n      }\n      function currentAccount() {\n        var _a;\n        if (!((_a = headers.get('Authorization')) === null || _a === void 0 ? void 0 : _a.startsWith('Bearer '))) return null;\n        const token = headers.get('Authorization').split('.')[1];\n        const tokenData = JSON.parse(atob(token));\n        return accounts.find(x => x.id === tokenData.id);\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function newId(items) {\n        return items.length ? Math.max(...items.map(x => x.id)) + 1 : 1;\n      }\n      function generateJwtToken(account) {\n        const token = {\n          id: account.id,\n          role: account.role,\n          email: account.email\n        };\n        return `fake-jwt-token.${btoa(JSON.stringify(token))}`;\n      }\n      function generateRefreshToken() {\n        return `fake-refresh-token-${Math.floor(Math.random() * 1000000000)}`;\n      }\n      function getRefreshToken() {\n        var _a;\n        return (_a = headers.get('Authorization')) === null || _a === void 0 ? void 0 : _a.split(' ')[1];\n      }\n      function isOwnEmployee(employeeId) {\n        const employee = employees.find(x => x.id === employeeId);\n        return (employee === null || employee === void 0 ? void 0 : employee.accountId) === currentAccount().id;\n      }\n      function isOwnRequest(requestId) {\n        const request = requests.find(x => x.id === requestId);\n        const employee = employees.find(x => x.accountId === currentAccount().id);\n        return (request === null || request === void 0 ? void 0 : request.employeeId) === (employee === null || employee === void 0 ? void 0 : employee.id);\n      }\n      function newAccountId() {\n        return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)();\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}