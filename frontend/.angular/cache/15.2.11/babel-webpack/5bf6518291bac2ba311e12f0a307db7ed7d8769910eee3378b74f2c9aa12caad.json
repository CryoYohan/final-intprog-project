{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [{\n  id: 1,\n  name: 'HR',\n  description: 'Human Resources'\n}, {\n  id: 2,\n  name: 'IT',\n  description: 'Information Technology'\n}, {\n  id: 3,\n  name: 'Finance',\n  description: 'Finance Department'\n}, {\n  id: 4,\n  name: 'Marketing',\n  description: 'Marketing Department'\n}];\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [{\n  id: 1,\n  name: 'Manager',\n  description: 'Department Manager'\n}, {\n  id: 2,\n  name: 'Team Lead',\n  description: 'Team Leader'\n}, {\n  id: 3,\n  name: 'Senior Staff',\n  description: 'Senior Level Staff'\n}, {\n  id: 4,\n  name: 'Junior Staff',\n  description: 'Junior Level Staff'\n}];\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [{\n  id: 1,\n  name: 'Leave Request',\n  description: 'Request for leave or time off'\n}, {\n  id: 2,\n  name: 'Equipment Request',\n  description: 'Request for office equipment'\n}, {\n  id: 3,\n  name: 'Training Request',\n  description: 'Request for training or workshops'\n}, {\n  id: 4,\n  name: 'Other',\n  description: 'Other types of requests'\n}];\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      return handleRoute().pipe(delay(500),\n      // Simulate server delay\n      materialize(), dematerialize());\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case url.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case url.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case url.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case url.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case url.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          case url.endsWith('/accounts') && method === 'POST':\n            return createAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n            return updateAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n            return deleteAccount();\n          // request routes\n          case url.endsWith('/requests') && method === 'GET':\n            return getRequests();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return getRequestById();\n          case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n            return getRequestsByEmployeeId();\n          case url.endsWith('/requests/my-requests') && method === 'GET':\n            return getMyRequests();\n          case url.endsWith('/requests') && method === 'POST':\n            return createRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return updateRequest();\n          case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n            return changeRequestStatus();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n            return deleteRequest();\n          // employee routes\n          case url.endsWith('/employees') && method === 'GET':\n            return getEmployees();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n            return getEmployeeById();\n          case url.endsWith('/employees') && method === 'POST':\n            return createEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n            return updateEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n            return deleteEmployee();\n          case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n            return transferEmployee();\n          // department routes\n          case url.endsWith('/departments') && method === 'GET':\n            return getDepartments();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n            return getDepartmentById();\n          case url.endsWith('/departments') && method === 'POST':\n            return createDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n            return updateDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n            return deleteDepartment();\n          // position routes\n          case url.endsWith('/positions') && method === 'GET':\n            return getPositions();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n            return getPositionById();\n          case url.endsWith('/positions') && method === 'POST':\n            return createPosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n            return updatePosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n            return deletePosition();\n          // request type routes\n          case url.endsWith('/request-types') && method === 'GET':\n            return getRequestTypes();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n            return getRequestTypeById();\n          case url.endsWith('/request-types') && method === 'POST':\n            return createRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n            return updateRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n            return deleteRequestType();\n          // workflow routes\n          case url.endsWith('/workflows') && method === 'GET':\n            return getWorkflows();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n            return getWorkflowById();\n          case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByEmployeeId();\n          case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByRequestId();\n          case url.endsWith('/workflows') && method === 'POST':\n            return createWorkflow();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n            return updateWorkflow();\n          case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n            return updateWorkflowStatus();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflow();\n          case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflowItem();\n          default:\n            return next.handle(request);\n        }\n      }\n      // Authentication functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) return error('Email or password is incorrect');\n        if (password !== account.password) return error('Email or password is incorrect');\n        if (!account.isVerified) return error('Please verify your email before logging in');\n        // Generate refresh token and save\n        const refreshToken = generateRefreshToken();\n        account.refreshTokens = account.refreshTokens || [];\n        account.refreshTokens.push(refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // Return basic details and tokens\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account),\n          refreshToken\n        }));\n      }\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return unauthorized();\n        const account = accounts.find(x => {\n          var _a;\n          return (_a = x.refreshTokens) === null || _a === void 0 ? void 0 : _a.includes(refreshToken);\n        });\n        if (!account) return unauthorized();\n        // Generate new refresh token and save\n        const newRefreshToken = generateRefreshToken();\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        account.refreshTokens.push(newRefreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // Return basic details and tokens\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account),\n          refreshToken: newRefreshToken\n        }));\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // display email already registered message in alert\n          setTimeout(() => {\n            alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, {\n              autoclose: false\n            });\n          }, 1000);\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // first registered account is an admin\n          account.role = Role.Admin;\n          account.status = 'Active'; // Admin accounts get active status\n        } else {\n          account.role = Role.User;\n          account.status = 'Inactive'; // User accounts get inacitve status upon creation\n        }\n\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display verification email in alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoclose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can get own profile and admin accounts can get all profiles\n        if (account.id !== currentAccount().id && !isAdmin()) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      // Request functions\n      function getRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        // Return all requests for admins, or filtered for regular users\n        let filteredRequests = [...requests];\n        if (!isAdmin()) {\n          const currentUserId = currentAccount().id;\n          filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n        }\n        return ok(filteredRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const employee = employees.find(e => e.id === request.employeeId);\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return Object.assign(Object.assign({}, request), {\n            items,\n            employee,\n            type: requestType\n          });\n        }));\n      }\n      function getRequestById() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        // Check authorization\n        if (!isAdmin() && request.employeeId !== currentAccount().id) {\n          return unauthorized();\n        }\n        // Add related data\n        const items = requestItems.filter(item => item.requestId === request.id);\n        const employee = employees.find(e => e.id === request.employeeId);\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        return ok(Object.assign(Object.assign({}, request), {\n          items,\n          employee,\n          type: requestType\n        }));\n      }\n      function getRequestsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = parseInt(url.split('/').pop());\n        const employeeRequests = requests.filter(x => x.employeeId === employeeId);\n        return ok(employeeRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const employee = employees.find(e => e.id === request.employeeId);\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return Object.assign(Object.assign({}, request), {\n            items,\n            employee,\n            type: requestType\n          });\n        }));\n      }\n      function getMyRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        const currentUserId = currentAccount().id;\n        const myRequests = requests.filter(x => x.employeeId === currentUserId);\n        return ok(myRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const employee = employees.find(e => e.id === request.employeeId);\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return Object.assign(Object.assign({}, request), {\n            items,\n            employee,\n            type: requestType\n          });\n        }));\n      }\n      function createRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        console.log('Received request data:', body);\n        // Find request type by name (case-insensitive)\n        const requestType = requestTypes.find(t => t.name.toLowerCase() === (body.type || '').toLowerCase() || t.name.toLowerCase().includes('request') && t.name.toLowerCase().startsWith(body.type.toLowerCase()));\n        console.log('Found request type:', requestType);\n        if (!requestType) {\n          console.log('Available request types:', requestTypes);\n          return error('Invalid request type');\n        }\n        const request = {\n          id: newRequestId(),\n          employeeId: body.employeeId || currentAccount().id,\n          typeId: requestType.id,\n          type: requestType.name,\n          description: body.description || '',\n          status: 'Pending',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Validate required fields\n        if (!request.type) {\n          return error('Request type is required');\n        }\n        // Validate and process items if present\n        let requestItemsList = [];\n        if (body.items && Array.isArray(body.items)) {\n          try {\n            requestItemsList = body.items.map(item => {\n              if (!item.name || !item.quantity) {\n                throw new Error('Invalid item data');\n              }\n              return {\n                id: newRequestItemId(),\n                requestId: request.id,\n                name: item.name,\n                quantity: Number(item.quantity)\n              };\n            });\n          } catch (error) {\n            return error('Invalid item data provided');\n          }\n        }\n        // Get employee data for workflow\n        const employee = employees.find(e => e.id === request.employeeId);\n        // Create workflow entry for new request\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: request.employeeId,\n          requestId: request.id,\n          type: 'Request Created',\n          details: {\n            task: `New ${request.type} created`,\n            additionalInfo: `Request Status: ${request.status}`\n          },\n          status: 'ForReviewing',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Save everything\n        requests.push(request);\n        if (requestItemsList.length > 0) {\n          requestItems.push(...requestItemsList);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        workflows.push(workflow);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItemsList,\n          type: requestType,\n          employee: employee\n        }));\n      }\n      function updateRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        console.log('Received update data:', body);\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Validate request type if changed\n        if (body.typeId) {\n          const typeId = Number(body.typeId);\n          const requestType = requestTypes.find(t => t.id === typeId);\n          if (!requestType) {\n            return error('Invalid request type');\n          }\n          request.typeId = typeId;\n        }\n        // Update basic request fields\n        Object.assign(request, {\n          description: body.description || request.description,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Handle item changes\n        if (body.itemChanges) {\n          try {\n            // Delete items\n            if (body.itemChanges.delete && Array.isArray(body.itemChanges.delete)) {\n              requestItems = requestItems.filter(item => item.requestId !== requestId || !body.itemChanges.delete.includes(item.id));\n            }\n            // Update items\n            if (body.itemChanges.update && Array.isArray(body.itemChanges.update)) {\n              body.itemChanges.update.forEach(updatedItem => {\n                if (!updatedItem.name || !updatedItem.quantity) {\n                  throw new Error('Invalid item data');\n                }\n                const item = requestItems.find(x => x.id === updatedItem.id);\n                if (item) {\n                  Object.assign(item, {\n                    name: updatedItem.name,\n                    quantity: Number(updatedItem.quantity)\n                  });\n                }\n              });\n            }\n            // Add new items\n            if (body.itemChanges.add && Array.isArray(body.itemChanges.add)) {\n              const newItems = body.itemChanges.add.map(item => {\n                if (!item.name || !item.quantity) {\n                  throw new Error('Invalid item data');\n                }\n                return {\n                  id: newRequestItemId(),\n                  requestId: requestId,\n                  name: item.name,\n                  quantity: Number(item.quantity)\n                };\n              });\n              requestItems.push(...newItems);\n            }\n            localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n          } catch (error) {\n            return error('Invalid item data provided');\n          }\n        }\n        // Get related data\n        const employee = employees.find(e => e.id === request.employeeId);\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        // Create workflow entry for updated request\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: request.employeeId,\n          requestId: request.id,\n          type: 'Request Updated',\n          details: {\n            task: `${requestType.name} updated`,\n            additionalInfo: `Request Status: ${request.status}`\n          },\n          status: 'ForReviewing',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        workflows.push(workflow);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === requestId),\n          type: requestType,\n          employee: employee\n        }));\n      }\n      function changeRequestStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        const oldStatus = request.status;\n        const newStatus = body.status;\n        Object.assign(request, {\n          status: newStatus,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Create workflow entry for status change\n        const employee = employees.find(e => e.id === request.employeeId);\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: request.employeeId,\n          type: 'Request Status Changed',\n          details: {\n            task: `${requestType.name} status changed for ${employee.firstName} ${employee.lastName}`,\n            additionalInfo: `Status changed from ${oldStatus} to ${newStatus}`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        workflows.push(workflow);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === request.id),\n          employee,\n          type: requestType\n        }));\n      }\n      function deleteRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Delete request and its items\n        requests = requests.filter(x => x.id !== requestId);\n        requestItems = requestItems.filter(x => x.requestId !== requestId);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        return ok();\n      }\n      // Employee functions\n      function getEmployees() {\n        if (!isAuthenticated()) return unauthorized();\n        // Map employees with their current department and account information\n        return ok(employees.map(employee => {\n          const department = departments.find(d => d.id === employee.departmentId);\n          const account = accounts.find(a => a.id === employee.accountId);\n          return Object.assign(Object.assign({}, employee), {\n            departmentName: department === null || department === void 0 ? void 0 : department.name,\n            department: department ? {\n              id: department.id,\n              name: department.name,\n              description: department.description\n            } : null,\n            account: basicDetails(account)\n          });\n        }));\n      }\n      function getEmployeeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employee = employees.find(x => x.id === employeeId);\n        if (!employee) return notFound();\n        // Get fresh department data\n        const department = departments.find(d => d.id === employee.departmentId);\n        if (!department) return error('Department not found');\n        const account = accounts.find(a => a.id === employee.accountId);\n        // Return complete employee data with fresh relations\n        return ok(Object.assign(Object.assign({}, employee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function createEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        // Log the received data for debugging\n        console.log('Received employee data:', body);\n        // Validate department exists\n        const department = departments.find(d => d.id === Number(body.departmentId));\n        if (!department) return error('Department not found');\n        const employee = Object.assign(Object.assign({}, body), {\n          id: newEmployeeId(),\n          accountId: Number(body.accountId),\n          employeeId: body.employeeId,\n          departmentId: Number(body.departmentId),\n          position: body.position,\n          hireDate: body.hireDate,\n          salary: Number(body.salary),\n          status: body.status,\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Check each required field individually and log the result\n        const requiredFields = {\n          accountId: !!employee.accountId,\n          employeeId: !!employee.employeeId,\n          departmentId: !!employee.departmentId,\n          position: !!employee.position,\n          hireDate: !!employee.hireDate,\n          salary: !!employee.salary,\n          status: !!employee.status\n        };\n        console.log('Field validation results:', requiredFields);\n        // Check if any required field is missing\n        const missingFields = Object.entries(requiredFields).filter(([_, isValid]) => !isValid).map(([fieldName]) => fieldName);\n        if (missingFields.length > 0) {\n          return error(`Required fields are missing: ${missingFields.join(', ')}`);\n        }\n        // Validate account exists\n        const account = accounts.find(a => a.id === employee.accountId);\n        if (!account) return error('Account not found');\n        // Create workflow entry for new employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employee.id,\n          type: 'Added',\n          details: {\n            task: `New employee ${employee.employeeId} was added`,\n            additionalInfo: `Added to ${department.name} department as ${employee.position}`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(employee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function updateEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const oldEmployee = employees[employeeIndex];\n        const updatedEmployee = Object.assign(Object.assign(Object.assign({}, oldEmployee), body), {\n          id: employeeId,\n          accountId: body.accountId ? Number(body.accountId) : oldEmployee.accountId,\n          departmentId: body.departmentId ? Number(body.departmentId) : oldEmployee.departmentId,\n          position: body.position || oldEmployee.position,\n          salary: body.salary ? Number(body.salary) : oldEmployee.salary,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department exists if changed\n        if (body.departmentId) {\n          const department = departments.find(d => d.id === updatedEmployee.departmentId);\n          if (!department) return error('Department not found');\n        }\n        // Validate account exists if changed\n        if (body.accountId) {\n          const account = accounts.find(a => a.id === updatedEmployee.accountId);\n          if (!account) return error('Account not found');\n        }\n        const department = departments.find(d => d.id === updatedEmployee.departmentId);\n        const account = accounts.find(a => a.id === updatedEmployee.accountId);\n        // Create workflow entry for updated employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Updated',\n          details: {\n            task: `Employee ${updatedEmployee.employeeId} was updated`,\n            additionalInfo: `Updated in ${department.name} department as ${updatedEmployee.position}`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees[employeeIndex] = updatedEmployee;\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedEmployee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function deleteEmployee() {\n        var _a;\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employee = employees.find(x => x.id === employeeId);\n        if (!employee) return notFound();\n        // Create workflow entry for deleted employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Deleted',\n          details: {\n            task: `The Employee Named ${employee.firstName} ${employee.lastName} was deleted`,\n            additionalInfo: `Deleted from ${((_a = departments.find(d => d.id === employee.departmentId)) === null || _a === void 0 ? void 0 : _a.name) || 'Unknown'} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees = employees.filter(x => x.id !== employeeId);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok();\n      }\n      function transferEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employee = employees.find(x => x.id === employeeId);\n        if (!employee) return notFound();\n        const oldDepartment = departments.find(d => d.id === employee.departmentId);\n        const newDepartmentId = Number(body.departmentId);\n        const newDepartment = departments.find(d => d.id === newDepartmentId);\n        if (!newDepartment) return error('New department not found');\n        if (employee.departmentId === newDepartmentId) return error('Employee is already in this department');\n        // Create a completely new employee object with updated data\n        const updatedEmployee = Object.assign(Object.assign({}, employee), {\n          departmentId: newDepartmentId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Update the employee in the employees array\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex !== -1) {\n          employees[employeeIndex] = updatedEmployee;\n        }\n        // Create workflow entry for department transfer\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Department Transfer',\n          details: {\n            task: `Employee ${employee.employeeId} was transferred`,\n            additionalInfo: `Transferred from ${(oldDepartment === null || oldDepartment === void 0 ? void 0 : oldDepartment.name) || 'Unknown'} to ${newDepartment.name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        workflows.push(workflow);\n        // Save changes to localStorage\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        const account = accounts.find(a => a.id === updatedEmployee.accountId);\n        // Return complete updated employee data with fresh department info\n        return ok(Object.assign(Object.assign({}, updatedEmployee), {\n          departmentName: newDepartment.name,\n          department: {\n            id: newDepartment.id,\n            name: newDepartment.name,\n            description: newDepartment.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      // Department functions\n      function getDepartments() {\n        if (!isAuthenticated()) return unauthorized();\n        // Return consistent department structure\n        return ok(departments.map(dept => ({\n          id: dept.id,\n          name: dept.name,\n          description: dept.description\n        })));\n      }\n      function getDepartmentById() {\n        if (!isAuthenticated()) return unauthorized();\n        const department = departments.find(x => x.id === idFromUrl());\n        if (!department) return notFound();\n        // Return consistent department structure\n        return ok({\n          id: department.id,\n          name: department.name,\n          description: department.description\n        });\n      }\n      function createDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const department = body;\n        department.id = newDepartmentId();\n        department.createdDate = new Date().toISOString();\n        department.lastModifiedDate = new Date().toISOString();\n        departments.push(department);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(department);\n      }\n      function updateDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        departments[departmentIndex] = Object.assign(Object.assign(Object.assign({}, departments[departmentIndex]), body), {\n          id: departmentId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(departments[departmentIndex]);\n      }\n      function deleteDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        // Check if department has employees\n        if (employees.some(e => e.departmentId === departmentId)) {\n          return error('Cannot delete department with existing employees');\n        }\n        departments = departments.filter(x => x.id !== departmentId);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok();\n      }\n      // Position functions\n      function getPositions() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(positions);\n      }\n      function getPositionById() {\n        if (!isAuthenticated()) return unauthorized();\n        const position = positions.find(x => x.id === idFromUrl());\n        if (!position) return notFound();\n        return ok(position);\n      }\n      function createPosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const position = Object.assign(Object.assign({}, body), {\n          id: newPositionId(),\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        });\n        if (!position.name || !position.description) {\n          return error('Name and description are required');\n        }\n        positions.push(position);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(position);\n      }\n      function updatePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        positions[positionIndex] = Object.assign(Object.assign(Object.assign({}, positions[positionIndex]), body), {\n          id: positionId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(positions[positionIndex]);\n      }\n      function deletePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        // Check if position has employees\n        if (employees.some(e => e.positionId === positionId)) {\n          return error('Cannot delete position with existing employees');\n        }\n        positions = positions.filter(x => x.id !== positionId);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok();\n      }\n      // Request Type functions\n      function getRequestTypes() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(requestTypes);\n      }\n      function getRequestTypeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestType = requestTypes.find(x => x.id === idFromUrl());\n        if (!requestType) return notFound();\n        return ok(requestType);\n      }\n      function createRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const requestType = Object.assign(Object.assign({}, body), {\n          id: newRequestTypeId(),\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        });\n        if (!requestType.name || !requestType.description) {\n          return error('Name and description are required');\n        }\n        requestTypes.push(requestType);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(requestType);\n      }\n      function updateRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const requestTypeId = idFromUrl();\n        const requestTypeIndex = requestTypes.findIndex(x => x.id === requestTypeId);\n        if (requestTypeIndex === -1) return notFound();\n        requestTypes[requestTypeIndex] = Object.assign(Object.assign(Object.assign({}, requestTypes[requestTypeIndex]), body), {\n          id: requestTypeId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(requestTypes[requestTypeIndex]);\n      }\n      function deleteRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const requestTypeId = idFromUrl();\n        // Check if request type is in use\n        if (requests.some(r => r.typeId === requestTypeId)) {\n          return error('Cannot delete request type that is in use');\n        }\n        requestTypes = requestTypes.filter(x => x.id !== requestTypeId);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok();\n      }\n      function newPositionId() {\n        return positions.length ? Math.max(...positions.map(x => x.id)) + 1 : 1;\n      }\n      function newRequestTypeId() {\n        return requestTypes.length ? Math.max(...requestTypes.map(x => x.id)) + 1 : 1;\n      }\n      // Workflow functions\n      function getWorkflows() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(workflows.map(workflow => Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        })));\n      }\n      function getWorkflowById() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflow = workflows.find(x => x.id === idFromUrl());\n        if (!workflow) return notFound();\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        }));\n      }\n      function getWorkflowsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = parseInt(url.split('/').pop());\n        const employeeWorkflows = workflows.filter(x => x.employeeId === employeeId);\n        return ok(employeeWorkflows.map(workflow => Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        })));\n      }\n      function getWorkflowsByRequestId() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = parseInt(url.split('/').pop());\n        const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n        return ok(requestWorkflows.map(workflow => Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        })));\n      }\n      function createWorkflow() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflow = body;\n        workflow.id = newWorkflowId();\n        workflow.createdDate = new Date().toISOString();\n        workflow.lastModifiedDate = new Date().toISOString();\n        workflow.status = workflow.status || 'ForReviewing'; // Default status\n        workflows.push(workflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        }));\n      }\n      function updateWorkflow() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        workflows[workflowIndex] = Object.assign(Object.assign(Object.assign({}, workflows[workflowIndex]), body), {\n          id: workflowId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflows[workflowIndex]), {\n          employee: employees.find(e => e.id === workflows[workflowIndex].employeeId)\n        }));\n      }\n      function updateWorkflowStatus() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        workflow.status = body.status;\n        workflow.lastModifiedDate = new Date().toISOString();\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        }));\n      }\n      function deleteWorkflow() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflowId = idFromUrl();\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok();\n      }\n      function deleteWorkflowItem() {\n        if (!isAuthenticated()) return unauthorized();\n        const itemId = idFromUrl();\n        const workflow = workflows.find(x => {\n          var _a;\n          return (_a = x.items) === null || _a === void 0 ? void 0 : _a.some(item => item.id === itemId);\n        });\n        if (workflow) {\n          workflow.items = workflow.items.filter(item => item.id !== itemId);\n          localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        }\n        return ok();\n      }\n      function newWorkflowId() {\n        return workflows.length ? Math.max(...workflows.map(x => parseInt(x.id))) + 1 : 1;\n      }\n      // Account functions\n      function createAccount() {\n        const account = Object.assign(Object.assign({}, body), {\n          id: newAccountId(),\n          dateCreated: new Date().toISOString(),\n          status: body.status || 'Active',\n          isVerified: true,\n          refreshTokens: []\n        });\n        // Validate required fields\n        if (!account.firstName || !account.lastName || !account.email || !account.password) {\n          return error('Required fields are missing');\n        }\n        // Check if email already exists\n        if (accounts.find(x => x.email === account.email)) {\n          return error(`Email ${account.email} is already registered`);\n        }\n        // Set role if not provided\n        if (!account.role) {\n          account.role = Role.User;\n        }\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function updateAccount() {\n        if (!isAuthenticated()) return unauthorized();\n        const accountId = idFromUrl();\n        const account = accounts.find(x => x.id === accountId);\n        if (!account) return notFound();\n        // Users can only update their own account, admins can update any account\n        if (account.id !== currentAccount().id && !isAdmin()) {\n          return unauthorized();\n        }\n        // Only allow admins to update role\n        if (body.role && !isAdmin()) {\n          delete body.role;\n        }\n        // If email is being changed, make sure it's not already taken\n        if (body.email && body.email !== account.email && accounts.find(x => x.email === body.email)) {\n          return error(`Email ${body.email} is already taken`);\n        }\n        // Copy body to account and save\n        Object.assign(account, body);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function deleteAccount() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const accountId = idFromUrl();\n        // Prevent deleting own account\n        if (accountId === currentAccount().id) {\n          return error('You cannot delete your own account');\n        }\n        accounts = accounts.filter(x => x.id !== accountId);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      // Helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        }));\n      }\n      function error(message) {\n        return throwError(() => ({\n          error: {\n            message\n          }\n        }));\n      }\n      function unauthorized() {\n        return throwError(() => ({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }));\n      }\n      function notFound() {\n        return throwError(() => ({\n          status: 404,\n          error: {\n            message: 'Not Found'\n          }\n        }));\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status,\n          isVerified\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status,\n          isVerified\n        };\n      }\n      function isAuthenticated() {\n        return !!currentAccount();\n      }\n      function isAdmin() {\n        var _a;\n        return ((_a = currentAccount()) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n      }\n      function currentAccount() {\n        var _a;\n        // Check if the authorization header exists and has a JWT token\n        if (!((_a = headers.get('Authorization')) === null || _a === void 0 ? void 0 : _a.startsWith('Bearer '))) return null;\n        // Get the account from the JWT token (in a real app this would validate the token)\n        const jwtToken = JSON.parse(atob(headers.get('Authorization').split('.')[1]));\n        const account = accounts.find(x => x.id === jwtToken.id);\n        return account;\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function newRequestId() {\n        return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n      }\n      function newRequestItemId() {\n        return requestItems.length ? Math.max(...requestItems.map(x => x.id)) + 1 : 1;\n      }\n      function newAccountId() {\n        return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n      }\n      function generateJwtToken(account) {\n        // Create a JWT token that expires in 15 minutes\n        const tokenPayload = {\n          id: account.id,\n          role: account.role,\n          email: account.email,\n          exp: Math.floor(Date.now() / 1000) + 15 * 60 // 15 minutes from now\n        };\n\n        return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;\n      }\n      function generateRefreshToken() {\n        return `fake-refresh-token-${Math.floor(Math.random() * 1000000000)}`;\n      }\n      function getRefreshToken() {\n        // Check Authorization header for refresh token\n        const authHeader = headers.get('Authorization');\n        if (!(authHeader === null || authHeader === void 0 ? void 0 : authHeader.startsWith('Bearer '))) return null;\n        return authHeader.split(' ')[1];\n      }\n      function newEmployeeId() {\n        return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n      }\n      function newDepartmentId() {\n        return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","materialize","dematerialize","Role","accountsKey","accounts","JSON","parse","localStorage","getItem","employeesKey","employees","departmentsKey","departments","id","name","description","requestsKey","requests","requestItemsKey","requestItems","workflowsKey","workflows","positionsKey","positions","requestTypesKey","requestTypes","FakeBackendInterceptor","constructor","alertService","intercept","request","next","url","method","headers","body","handleRoute","pipe","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","getAccounts","match","getAccountById","createAccount","updateAccount","deleteAccount","getRequests","getRequestById","getRequestsByEmployeeId","getMyRequests","createRequest","updateRequest","changeRequestStatus","deleteRequest","getEmployees","getEmployeeById","createEmployee","updateEmployee","deleteEmployee","transferEmployee","getDepartments","getDepartmentById","createDepartment","updateDepartment","deleteDepartment","getPositions","getPositionById","createPosition","updatePosition","deletePosition","getRequestTypes","getRequestTypeById","createRequestType","updateRequestType","deleteRequestType","getWorkflows","getWorkflowById","getWorkflowsByEmployeeId","getWorkflowsByRequestId","createWorkflow","updateWorkflow","updateWorkflowStatus","deleteWorkflow","deleteWorkflowItem","handle","email","password","account","find","x","error","isVerified","generateRefreshToken","refreshTokens","push","setItem","stringify","ok","basicDetails","jwtToken","generateJwtToken","getRefreshToken","unauthorized","includes","newRefreshToken","filter","isAuthenticated","setTimeout","info","location","origin","autoclose","newAccountId","role","Admin","status","User","dateCreated","Date","toISOString","verificationToken","getTime","toString","confirmPassword","verifyUrl","token","map","idFromUrl","currentAccount","isAdmin","filteredRequests","currentUserId","employeeId","items","item","requestId","employee","e","requestType","t","typeId","type","notFound","parseInt","split","pop","employeeRequests","myRequests","console","log","toLowerCase","startsWith","newRequestId","createdDate","lastModifiedDate","requestItemsList","Array","isArray","quantity","Error","newRequestItemId","Number","workflow","newWorkflowId","details","task","additionalInfo","length","Object","assign","itemChanges","delete","update","forEach","updatedItem","add","newItems","oldStatus","newStatus","firstName","lastName","department","d","departmentId","a","accountId","departmentName","newEmployeeId","position","hireDate","salary","requiredFields","missingFields","entries","_","isValid","fieldName","join","employeeIndex","findIndex","oldEmployee","updatedEmployee","oldDepartment","newDepartmentId","newDepartment","dept","departmentIndex","some","newPositionId","positionId","positionIndex","newRequestTypeId","requestTypeId","requestTypeIndex","r","Math","max","employeeWorkflows","requestWorkflows","workflowId","workflowIndex","itemId","message","title","get","atob","urlParts","tokenPayload","exp","floor","now","btoa","random","authHeader","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\n\nimport { AlertService } from '@app/_services';\nimport { Role } from '@app/_models';\n\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [\n    { id: 1, name: 'HR', description: 'Human Resources' },\n    { id: 2, name: 'IT', description: 'Information Technology' },\n    { id: 3, name: 'Finance', description: 'Finance Department' },\n    { id: 4, name: 'Marketing', description: 'Marketing Department' }\n];\n\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [\n    { id: 1, name: 'Manager', description: 'Department Manager' },\n    { id: 2, name: 'Team Lead', description: 'Team Leader' },\n    { id: 3, name: 'Senior Staff', description: 'Senior Level Staff' },\n    { id: 4, name: 'Junior Staff', description: 'Junior Level Staff' }\n];\n\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [\n    { id: 1, name: 'Leave Request', description: 'Request for leave or time off' },\n    { id: 2, name: 'Equipment Request', description: 'Request for office equipment' },\n    { id: 3, name: 'Training Request', description: 'Request for training or workshops' },\n    { id: 4, name: 'Other', description: 'Other types of requests' }\n];\n\n@Injectable()\nexport class FakeBackendInterceptor implements HttpInterceptor {\n    constructor(private alertService: AlertService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { url, method, headers, body } = request;\n        const alertService = this.alertService;\n\n        return handleRoute().pipe(\n            delay(500), // Simulate server delay\n            materialize(),\n            dematerialize()\n        );\n\n        function handleRoute() {\n            switch (true) {\n                case url.endsWith('/accounts/authenticate') && method === 'POST':\n                    return authenticate();\n                case url.endsWith('/accounts/refresh-token') && method === 'POST':\n                    return refreshToken();\n                case url.endsWith('/accounts/revoke-token') && method === 'POST':\n                    return revokeToken();\n                case url.endsWith('/accounts/register') && method === 'POST':\n                    return register();\n                case url.endsWith('/accounts/verify-email') && method === 'POST':\n                    return verifyEmail();\n                case url.endsWith('/accounts') && method === 'GET':\n                    return getAccounts();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n                    return getAccountById();\n                case url.endsWith('/accounts') && method === 'POST':\n                    return createAccount();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n                    return updateAccount();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n                    return deleteAccount();\n                    \n                // request routes\n                case url.endsWith('/requests') && method === 'GET':\n                    return getRequests();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n                    return getRequestById();\n                case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n                    return getRequestsByEmployeeId();\n                case url.endsWith('/requests/my-requests') && method === 'GET':\n                    return getMyRequests();\n                case url.endsWith('/requests') && method === 'POST':\n                    return createRequest();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n                    return updateRequest();\n                case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n                    return changeRequestStatus();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequest();\n                    \n                // employee routes\n                case url.endsWith('/employees') && method === 'GET':\n                    return getEmployees();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n                    return getEmployeeById();\n                case url.endsWith('/employees') && method === 'POST':\n                    return createEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n                    return updateEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n                    return deleteEmployee();\n                case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n                    return transferEmployee();\n\n                // department routes\n                case url.endsWith('/departments') && method === 'GET':\n                    return getDepartments();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n                    return getDepartmentById();\n                case url.endsWith('/departments') && method === 'POST':\n                    return createDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n                    return updateDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n                    return deleteDepartment();\n                    \n                // position routes\n                case url.endsWith('/positions') && method === 'GET':\n                    return getPositions();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n                    return getPositionById();\n                case url.endsWith('/positions') && method === 'POST':\n                    return createPosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n                    return updatePosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n                    return deletePosition();\n\n                // request type routes\n                case url.endsWith('/request-types') && method === 'GET':\n                    return getRequestTypes();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n                    return getRequestTypeById();\n                case url.endsWith('/request-types') && method === 'POST':\n                    return createRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n                    return updateRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequestType();\n\n                // workflow routes\n                case url.endsWith('/workflows') && method === 'GET':\n                    return getWorkflows();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n                    return getWorkflowById();\n                case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByEmployeeId();\n                case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByRequestId();\n                case url.endsWith('/workflows') && method === 'POST':\n                    return createWorkflow();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n                    return updateWorkflow();\n                case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n                    return updateWorkflowStatus();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflow();\n                case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflowItem();\n                    \n                default:\n                    return next.handle(request);\n            }\n        }\n\n        // Authentication functions\n        function authenticate() {\n            const { email, password } = body;\n            const account = accounts.find(x => x.email === email);\n        \n            if (!account) return error('Email or password is incorrect');\n            if (password !== account.password) return error('Email or password is incorrect');\n            if (!account.isVerified) return error('Please verify your email before logging in');\n\n            // Generate refresh token and save\n            const refreshToken = generateRefreshToken();\n            account.refreshTokens = account.refreshTokens || [];\n            account.refreshTokens.push(refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // Return basic details and tokens\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account),\n                refreshToken\n            });\n        }\n\n        function refreshToken() {\n            const refreshToken = getRefreshToken();\n            \n            if (!refreshToken) return unauthorized();\n\n            const account = accounts.find(x => x.refreshTokens?.includes(refreshToken));\n            \n            if (!account) return unauthorized();\n\n            // Generate new refresh token and save\n            const newRefreshToken = generateRefreshToken();\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            account.refreshTokens.push(newRefreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // Return basic details and tokens\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account),\n                refreshToken: newRefreshToken\n            });\n        }\n\n        function revokeToken() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const refreshToken = getRefreshToken();\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n\n            // revoke token and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function register() {\n            const account = body;\n\n            if (accounts.find(x => x.email === account.email)) {\n                // display email already registered message in alert\n                setTimeout(() => {\n                    alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, { autoclose: false });\n                }, 1000);\n\n                // always return ok() response to prevent email enumeration\n                return ok();\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            if (account.id === 1) {\n                // first registered account is an admin\n                account.role = Role.Admin;\n                account.status = 'Active'; // Admin accounts get active status\n            } else {\n                account.role = Role.User;\n                account.status = 'Inactive'; // User accounts get inacitve status upon creation\n            }\n            account.dateCreated = new Date().toISOString();\n            account.verificationToken = new Date().getTime().toString();\n            account.isVerified = false;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // display verification email in alert\n            setTimeout(() => {\n                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, { autoclose: false });\n            }, 1000);\n\n            return ok();\n        }\n\n        function verifyEmail() {\n            const { token } = body;\n            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n\n            if (!account) return error('Verification failed');\n\n            // set is verified flag to true if token is valid\n            account.isVerified = true;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function getAccounts() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(accounts.map(x => basicDetails(x)));\n        }\n\n        function getAccountById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let account = accounts.find(x => x.id === idFromUrl());\n\n            // user accounts can get own profile and admin accounts can get all profiles\n            if (account.id !== currentAccount().id && !isAdmin()) {\n                return unauthorized();\n            }\n\n            return ok(basicDetails(account));\n        }\n\n        // Request functions\n        function getRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            // Return all requests for admins, or filtered for regular users\n            let filteredRequests = [...requests];\n            if (!isAdmin()) {\n                const currentUserId = currentAccount().id;\n                filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n            }\n\n            return ok(filteredRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const employee = employees.find(e => e.id === request.employeeId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                return {\n                    ...request,\n                    items,\n                    employee,\n                    type: requestType\n                };\n            }));\n        }\n\n        function getRequestById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            // Check authorization\n            if (!isAdmin() && request.employeeId !== currentAccount().id) {\n                return unauthorized();\n            }\n\n            // Add related data\n            const items = requestItems.filter(item => item.requestId === request.id);\n            const employee = employees.find(e => e.id === request.employeeId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n\n            return ok({\n                ...request,\n                items,\n                employee,\n                type: requestType\n            });\n        }\n\n        function getRequestsByEmployeeId() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const employeeId = parseInt(url.split('/').pop());\n            const employeeRequests = requests.filter(x => x.employeeId === employeeId);\n\n            return ok(employeeRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const employee = employees.find(e => e.id === request.employeeId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                return {\n                    ...request,\n                    items,\n                    employee,\n                    type: requestType\n                };\n            }));\n        }\n\n        function getMyRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const currentUserId = currentAccount().id;\n            const myRequests = requests.filter(x => x.employeeId === currentUserId);\n\n            return ok(myRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const employee = employees.find(e => e.id === request.employeeId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                return {\n                    ...request,\n                    items,\n                    employee,\n                    type: requestType\n                };\n            }));\n        }\n\n        function createRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            console.log('Received request data:', body);\n\n            // Find request type by name (case-insensitive)\n            const requestType = requestTypes.find(t => \n                t.name.toLowerCase() === (body.type || '').toLowerCase() ||\n                t.name.toLowerCase().includes('request') && t.name.toLowerCase().startsWith(body.type.toLowerCase())\n            );\n\n            console.log('Found request type:', requestType);\n            \n            if (!requestType) {\n                console.log('Available request types:', requestTypes);\n                return error('Invalid request type');\n            }\n\n            const request = {\n                id: newRequestId(),\n                employeeId: body.employeeId || currentAccount().id,\n                typeId: requestType.id,\n                type: requestType.name, // Use the exact name from the request type\n                description: body.description || '',\n                status: 'Pending',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            // Validate required fields\n            if (!request.type) {\n                return error('Request type is required');\n            }\n\n            // Validate and process items if present\n            let requestItemsList = [];\n            if (body.items && Array.isArray(body.items)) {\n                try {\n                    requestItemsList = body.items.map(item => {\n                        if (!item.name || !item.quantity) {\n                            throw new Error('Invalid item data');\n                        }\n                        return {\n                            id: newRequestItemId(),\n                            requestId: request.id,\n                            name: item.name,\n                            quantity: Number(item.quantity)\n                        };\n                    });\n                } catch (error) {\n                    return error('Invalid item data provided');\n                }\n            }\n\n            // Get employee data for workflow\n            const employee = employees.find(e => e.id === request.employeeId);\n            \n            // Create workflow entry for new request\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: request.employeeId,\n                requestId: request.id,\n                type: 'Request Created',\n                details: {\n                    task: `New ${request.type} created`,\n                    additionalInfo: `Request Status: ${request.status}`\n                },\n                status: 'ForReviewing',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            // Save everything\n            requests.push(request);\n            if (requestItemsList.length > 0) {\n                requestItems.push(...requestItemsList);\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n            }\n            workflows.push(workflow);\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok({\n                ...request,\n                items: requestItemsList,\n                type: requestType,\n                employee: employee\n            });\n        }\n\n        function updateRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            console.log('Received update data:', body);\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Validate request type if changed\n            if (body.typeId) {\n                const typeId = Number(body.typeId);\n                const requestType = requestTypes.find(t => t.id === typeId);\n                if (!requestType) {\n                    return error('Invalid request type');\n                }\n                request.typeId = typeId;\n            }\n\n            // Update basic request fields\n            Object.assign(request, {\n                description: body.description || request.description,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            // Handle item changes\n            if (body.itemChanges) {\n                try {\n                    // Delete items\n                    if (body.itemChanges.delete && Array.isArray(body.itemChanges.delete)) {\n                        requestItems = requestItems.filter(item => \n                            item.requestId !== requestId || \n                            !body.itemChanges.delete.includes(item.id)\n                        );\n                    }\n\n                    // Update items\n                    if (body.itemChanges.update && Array.isArray(body.itemChanges.update)) {\n                        body.itemChanges.update.forEach(updatedItem => {\n                            if (!updatedItem.name || !updatedItem.quantity) {\n                                throw new Error('Invalid item data');\n                            }\n                            const item = requestItems.find(x => x.id === updatedItem.id);\n                            if (item) {\n                                Object.assign(item, {\n                                    name: updatedItem.name,\n                                    quantity: Number(updatedItem.quantity)\n                                });\n                            }\n                        });\n                    }\n\n                    // Add new items\n                    if (body.itemChanges.add && Array.isArray(body.itemChanges.add)) {\n                        const newItems = body.itemChanges.add.map(item => {\n                            if (!item.name || !item.quantity) {\n                                throw new Error('Invalid item data');\n                            }\n                            return {\n                                id: newRequestItemId(),\n                                requestId: requestId,\n                                name: item.name,\n                                quantity: Number(item.quantity)\n                            };\n                        });\n                        requestItems.push(...newItems);\n                    }\n\n                    localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n                } catch (error) {\n                    return error('Invalid item data provided');\n                }\n            }\n\n            // Get related data\n            const employee = employees.find(e => e.id === request.employeeId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n\n            // Create workflow entry for updated request\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: request.employeeId,\n                requestId: request.id,\n                type: 'Request Updated',\n                details: {\n                    task: `${requestType.name} updated`,\n                    additionalInfo: `Request Status: ${request.status}`\n                },\n                status: 'ForReviewing',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            workflows.push(workflow);\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok({\n                ...request,\n                items: requestItems.filter(item => item.requestId === requestId),\n                type: requestType,\n                employee: employee\n            });\n        }\n\n        function changeRequestStatus() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            const oldStatus = request.status;\n            const newStatus = body.status;\n\n            Object.assign(request, {\n                status: newStatus,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            // Create workflow entry for status change\n            const employee = employees.find(e => e.id === request.employeeId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: request.employeeId,\n                type: 'Request Status Changed',\n                details: {\n                    task: `${requestType.name} status changed for ${employee.firstName} ${employee.lastName}`,\n                    additionalInfo: `Status changed from ${oldStatus} to ${newStatus}`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            workflows.push(workflow);\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok({\n                ...request,\n                items: requestItems.filter(item => item.requestId === request.id),\n                employee,\n                type: requestType\n            });\n        }\n\n        function deleteRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Delete request and its items\n            requests = requests.filter(x => x.id !== requestId);\n            requestItems = requestItems.filter(x => x.requestId !== requestId);\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n\n            return ok();\n        }\n\n        // Employee functions\n        function getEmployees() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            // Map employees with their current department and account information\n            return ok(employees.map(employee => {\n                const department = departments.find(d => d.id === employee.departmentId);\n                const account = accounts.find(a => a.id === employee.accountId);\n                return {\n                    ...employee,\n                    departmentName: department?.name,\n                    department: department ? {\n                        id: department.id,\n                        name: department.name,\n                        description: department.description\n                    } : null,\n                    account: basicDetails(account)\n                };\n            }));\n        }\n\n        function getEmployeeById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employee = employees.find(x => x.id === employeeId);\n            \n            if (!employee) return notFound();\n            \n            // Get fresh department data\n            const department = departments.find(d => d.id === employee.departmentId);\n            if (!department) return error('Department not found');\n            \n            const account = accounts.find(a => a.id === employee.accountId);\n            \n            // Return complete employee data with fresh relations\n            return ok({\n                ...employee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function createEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            // Log the received data for debugging\n            console.log('Received employee data:', body);\n\n            // Validate department exists\n            const department = departments.find(d => d.id === Number(body.departmentId));\n            if (!department) return error('Department not found');\n\n            const employee = {\n                ...body,\n                id: newEmployeeId(),\n                accountId: Number(body.accountId),\n                employeeId: body.employeeId,\n                departmentId: Number(body.departmentId),\n                position: body.position,\n                hireDate: body.hireDate,\n                salary: Number(body.salary),\n                status: body.status,\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Check each required field individually and log the result\n            const requiredFields = {\n                accountId: !!employee.accountId,\n                employeeId: !!employee.employeeId,\n                departmentId: !!employee.departmentId,\n                position: !!employee.position,\n                hireDate: !!employee.hireDate,\n                salary: !!employee.salary,\n                status: !!employee.status\n            };\n            \n            console.log('Field validation results:', requiredFields);\n            \n            // Check if any required field is missing\n            const missingFields = Object.entries(requiredFields)\n                .filter(([_, isValid]) => !isValid)\n                .map(([fieldName]) => fieldName);\n            \n            if (missingFields.length > 0) {\n                return error(`Required fields are missing: ${missingFields.join(', ')}`);\n            }\n\n            // Validate account exists\n            const account = accounts.find(a => a.id === employee.accountId);\n            if (!account) return error('Account not found');\n            \n            // Create workflow entry for new employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employee.id,\n                type: 'Added',\n                details: {\n                    task: `New employee ${employee.employeeId} was added`,\n                    additionalInfo: `Added to ${department.name} department as ${employee.position}`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(employee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...employee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function updateEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const oldEmployee = employees[employeeIndex];\n            const updatedEmployee = {\n                ...oldEmployee,\n                ...body,\n                id: employeeId,\n                accountId: body.accountId ? Number(body.accountId) : oldEmployee.accountId,\n                departmentId: body.departmentId ? Number(body.departmentId) : oldEmployee.departmentId,\n                position: body.position || oldEmployee.position,\n                salary: body.salary ? Number(body.salary) : oldEmployee.salary,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate department exists if changed\n            if (body.departmentId) {\n                const department = departments.find(d => d.id === updatedEmployee.departmentId);\n                if (!department) return error('Department not found');\n            }\n\n            // Validate account exists if changed\n            if (body.accountId) {\n                const account = accounts.find(a => a.id === updatedEmployee.accountId);\n                if (!account) return error('Account not found');\n            }\n            \n            const department = departments.find(d => d.id === updatedEmployee.departmentId);\n            const account = accounts.find(a => a.id === updatedEmployee.accountId);\n            \n            // Create workflow entry for updated employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Updated',\n                details: {\n                    task: `Employee ${updatedEmployee.employeeId} was updated`,\n                    additionalInfo: `Updated in ${department.name} department as ${updatedEmployee.position}`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees[employeeIndex] = updatedEmployee;\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...updatedEmployee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function deleteEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employee = employees.find(x => x.id === employeeId);\n            \n            if (!employee) return notFound();\n            \n            // Create workflow entry for deleted employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Deleted',\n                details: {\n                    task: `The Employee Named ${employee.firstName} ${employee.lastName} was deleted`,\n                    additionalInfo: `Deleted from ${departments.find(d => d.id === employee.departmentId)?.name || 'Unknown'} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees = employees.filter(x => x.id !== employeeId);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok();\n        }\n\n        function transferEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employee = employees.find(x => x.id === employeeId);\n            \n            if (!employee) return notFound();\n            \n            const oldDepartment = departments.find(d => d.id === employee.departmentId);\n            const newDepartmentId = Number(body.departmentId);\n            const newDepartment = departments.find(d => d.id === newDepartmentId);\n            \n            if (!newDepartment) return error('New department not found');\n            if (employee.departmentId === newDepartmentId) return error('Employee is already in this department');\n            \n            // Create a completely new employee object with updated data\n            const updatedEmployee = {\n                ...employee,\n                departmentId: newDepartmentId,\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            // Update the employee in the employees array\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            if (employeeIndex !== -1) {\n                employees[employeeIndex] = updatedEmployee;\n            }\n            \n            // Create workflow entry for department transfer\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Department Transfer',\n                details: {\n                    task: `Employee ${employee.employeeId} was transferred`,\n                    additionalInfo: `Transferred from ${oldDepartment?.name || 'Unknown'} to ${newDepartment.name} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            workflows.push(workflow);\n            \n            // Save changes to localStorage\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            const account = accounts.find(a => a.id === updatedEmployee.accountId);\n            \n            // Return complete updated employee data with fresh department info\n            return ok({\n                ...updatedEmployee,\n                departmentName: newDepartment.name,\n                department: {\n                    id: newDepartment.id,\n                    name: newDepartment.name,\n                    description: newDepartment.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        // Department functions\n        function getDepartments() {\n            if (!isAuthenticated()) return unauthorized();\n            // Return consistent department structure\n            return ok(departments.map(dept => ({\n                id: dept.id,\n                name: dept.name,\n                description: dept.description\n            })));\n        }\n\n        function getDepartmentById() {\n            if (!isAuthenticated()) return unauthorized();\n            const department = departments.find(x => x.id === idFromUrl());\n            if (!department) return notFound();\n            // Return consistent department structure\n            return ok({\n                id: department.id,\n                name: department.name,\n                description: department.description\n            });\n        }\n\n        function createDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const department = body;\n            department.id = newDepartmentId();\n            department.createdDate = new Date().toISOString();\n            department.lastModifiedDate = new Date().toISOString();\n            \n            departments.push(department);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok(department);\n        }\n\n        function updateDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\n            \n            if (departmentIndex === -1) return notFound();\n            \n            departments[departmentIndex] = {\n                ...departments[departmentIndex],\n                ...body,\n                id: departmentId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok(departments[departmentIndex]);\n        }\n\n        function deleteDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            \n            // Check if department has employees\n            if (employees.some(e => e.departmentId === departmentId)) {\n                return error('Cannot delete department with existing employees');\n            }\n            \n            departments = departments.filter(x => x.id !== departmentId);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok();\n        }\n\n        // Position functions\n        function getPositions() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(positions);\n        }\n\n        function getPositionById() {\n            if (!isAuthenticated()) return unauthorized();\n            const position = positions.find(x => x.id === idFromUrl());\n            if (!position) return notFound();\n            return ok(position);\n        }\n\n        function createPosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const position = {\n                ...body,\n                id: newPositionId(),\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            if (!position.name || !position.description) {\n                return error('Name and description are required');\n            }\n            \n            positions.push(position);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok(position);\n        }\n\n        function updatePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            const positionIndex = positions.findIndex(x => x.id === positionId);\n            \n            if (positionIndex === -1) return notFound();\n            \n            positions[positionIndex] = {\n                ...positions[positionIndex],\n                ...body,\n                id: positionId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok(positions[positionIndex]);\n        }\n\n        function deletePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            \n            // Check if position has employees\n            if (employees.some(e => e.positionId === positionId)) {\n                return error('Cannot delete position with existing employees');\n            }\n            \n            positions = positions.filter(x => x.id !== positionId);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok();\n        }\n\n        // Request Type functions\n        function getRequestTypes() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(requestTypes);\n        }\n\n        function getRequestTypeById() {\n            if (!isAuthenticated()) return unauthorized();\n            const requestType = requestTypes.find(x => x.id === idFromUrl());\n            if (!requestType) return notFound();\n            return ok(requestType);\n        }\n\n        function createRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const requestType = {\n                ...body,\n                id: newRequestTypeId(),\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            if (!requestType.name || !requestType.description) {\n                return error('Name and description are required');\n            }\n            \n            requestTypes.push(requestType);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok(requestType);\n        }\n\n        function updateRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const requestTypeId = idFromUrl();\n            const requestTypeIndex = requestTypes.findIndex(x => x.id === requestTypeId);\n            \n            if (requestTypeIndex === -1) return notFound();\n            \n            requestTypes[requestTypeIndex] = {\n                ...requestTypes[requestTypeIndex],\n                ...body,\n                id: requestTypeId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok(requestTypes[requestTypeIndex]);\n        }\n\n        function deleteRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const requestTypeId = idFromUrl();\n            \n            // Check if request type is in use\n            if (requests.some(r => r.typeId === requestTypeId)) {\n                return error('Cannot delete request type that is in use');\n            }\n            \n            requestTypes = requestTypes.filter(x => x.id !== requestTypeId);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok();\n        }\n\n        function newPositionId() {\n            return positions.length ? Math.max(...positions.map(x => x.id)) + 1 : 1;\n        }\n\n        function newRequestTypeId() {\n            return requestTypes.length ? Math.max(...requestTypes.map(x => x.id)) + 1 : 1;\n        }\n\n        // Workflow functions\n        function getWorkflows() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(workflows.map(workflow => ({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            })));\n        }\n\n        function getWorkflowById() {\n            if (!isAuthenticated()) return unauthorized();\n            const workflow = workflows.find(x => x.id === idFromUrl());\n            if (!workflow) return notFound();\n            return ok({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            });\n        }\n\n        function getWorkflowsByEmployeeId() {\n            if (!isAuthenticated()) return unauthorized();\n            const employeeId = parseInt(url.split('/').pop());\n            const employeeWorkflows = workflows.filter(x => x.employeeId === employeeId);\n            return ok(employeeWorkflows.map(workflow => ({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            })));\n        }\n\n        function getWorkflowsByRequestId() {\n            if (!isAuthenticated()) return unauthorized();\n            const requestId = parseInt(url.split('/').pop());\n            const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n            return ok(requestWorkflows.map(workflow => ({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            })));\n        }\n\n        function createWorkflow() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const workflow = body;\n            workflow.id = newWorkflowId();\n            workflow.createdDate = new Date().toISOString();\n            workflow.lastModifiedDate = new Date().toISOString();\n            workflow.status = workflow.status || 'ForReviewing'; // Default status\n            \n            workflows.push(workflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            });\n        }\n\n        function updateWorkflow() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const workflowId = idFromUrl();\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n            \n            if (workflowIndex === -1) return notFound();\n            \n            workflows[workflowIndex] = {\n                ...workflows[workflowIndex],\n                ...body,\n                id: workflowId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflows[workflowIndex],\n                employee: employees.find(e => e.id === workflows[workflowIndex].employeeId)\n            });\n        }\n\n        function updateWorkflowStatus() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const workflowId = idFromUrl();\n            const workflow = workflows.find(x => x.id === workflowId);\n            \n            if (!workflow) return notFound();\n            \n            workflow.status = body.status;\n            workflow.lastModifiedDate = new Date().toISOString();\n            \n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            });\n        }\n\n        function deleteWorkflow() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const workflowId = idFromUrl();\n            workflows = workflows.filter(x => x.id !== workflowId);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok();\n        }\n\n        function deleteWorkflowItem() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const itemId = idFromUrl();\n            const workflow = workflows.find(x => x.items?.some(item => item.id === itemId));\n            \n            if (workflow) {\n                workflow.items = workflow.items.filter(item => item.id !== itemId);\n                localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            }\n            \n            return ok();\n        }\n\n        function newWorkflowId() {\n            return workflows.length ? Math.max(...workflows.map(x => parseInt(x.id))) + 1 : 1;\n        }\n\n        // Account functions\n        function createAccount() {\n            const account = {\n                ...body,\n                id: newAccountId(),\n                dateCreated: new Date().toISOString(),\n                status: body.status || 'Active',\n                isVerified: true, // Admin-created accounts are auto-verified\n                refreshTokens: []\n            };\n\n            // Validate required fields\n            if (!account.firstName || !account.lastName || !account.email || !account.password) {\n                return error('Required fields are missing');\n            }\n\n            // Check if email already exists\n            if (accounts.find(x => x.email === account.email)) {\n                return error(`Email ${account.email} is already registered`);\n            }\n\n            // Set role if not provided\n            if (!account.role) {\n                account.role = Role.User;\n            }\n\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account)\n            });\n        }\n\n        function updateAccount() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const accountId = idFromUrl();\n            const account = accounts.find(x => x.id === accountId);\n\n            if (!account) return notFound();\n\n            // Users can only update their own account, admins can update any account\n            if (account.id !== currentAccount().id && !isAdmin()) {\n                return unauthorized();\n            }\n\n            // Only allow admins to update role\n            if (body.role && !isAdmin()) {\n                delete body.role;\n            }\n\n            // If email is being changed, make sure it's not already taken\n            if (body.email && body.email !== account.email && accounts.find(x => x.email === body.email)) {\n                return error(`Email ${body.email} is already taken`);\n            }\n\n            // Copy body to account and save\n            Object.assign(account, body);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account)\n            });\n        }\n\n        function deleteAccount() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const accountId = idFromUrl();\n            \n            // Prevent deleting own account\n            if (accountId === currentAccount().id) {\n                return error('You cannot delete your own account');\n            }\n\n            accounts = accounts.filter(x => x.id !== accountId);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        // Helper functions\n        function ok(body?: any) {\n            return of(new HttpResponse({ status: 200, body }));\n        }\n\n        function error(message: string) {\n            return throwError(() => ({ error: { message } }));\n        }\n\n        function unauthorized() {\n            return throwError(() => ({ status: 401, error: { message: 'Unauthorized' } }));\n        }\n\n        function notFound() {\n            return throwError(() => ({ status: 404, error: { message: 'Not Found' } }));\n        }\n\n        function basicDetails(account: any) {\n            const { id, title, firstName, lastName, email, role, status, isVerified } = account;\n            return { id, title, firstName, lastName, email, role, status, isVerified };\n        }\n\n        function isAuthenticated() {\n            return !!currentAccount();\n        }\n\n        function isAdmin() {\n            return currentAccount()?.role === Role.Admin;\n        }\n\n        function currentAccount() {\n            // Check if the authorization header exists and has a JWT token\n            if (!headers.get('Authorization')?.startsWith('Bearer ')) return null;\n\n            // Get the account from the JWT token (in a real app this would validate the token)\n            const jwtToken = JSON.parse(atob(headers.get('Authorization').split('.')[1]));\n            const account = accounts.find(x => x.id === jwtToken.id);\n            return account;\n        }\n\n        function idFromUrl() {\n            const urlParts = url.split('/');\n            return parseInt(urlParts[urlParts.length - 1]);\n        }\n\n        function newRequestId() {\n            return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n        }\n\n        function newRequestItemId() {\n            return requestItems.length ? Math.max(...requestItems.map(x => x.id)) + 1 : 1;\n        }\n\n        function newAccountId() {\n            return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n        }\n\n        function generateJwtToken(account: any) {\n            // Create a JWT token that expires in 15 minutes\n            const tokenPayload = {\n                id: account.id,\n                role: account.role,\n                email: account.email,\n                exp: Math.floor(Date.now() / 1000) + (15 * 60) // 15 minutes from now\n            };\n            return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;\n        }\n\n        function generateRefreshToken() {\n            return `fake-refresh-token-${Math.floor(Math.random() * 1000000000)}`;\n        }\n\n        function getRefreshToken() {\n            // Check Authorization header for refresh token\n            const authHeader = headers.get('Authorization');\n            if (!authHeader?.startsWith('Bearer ')) return null;\n            \n            return authHeader.split(' ')[1];\n        }\n\n        function newEmployeeId() {\n            return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n        }\n\n        function newDepartmentId() {\n            return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n        }\n    }\n}\n\nexport const fakeBackendProvider = {\n    provide: HTTP_INTERCEPTORS,\n    useClass: FakeBackendInterceptor,\n    multi: true\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}