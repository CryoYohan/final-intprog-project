{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [{\n  id: 1,\n  name: 'HR',\n  description: 'Human Resources'\n}, {\n  id: 2,\n  name: 'IT',\n  description: 'Information Technology'\n}, {\n  id: 3,\n  name: 'Finance',\n  description: 'Finance Department'\n}, {\n  id: 4,\n  name: 'Marketing',\n  description: 'Marketing Department'\n}];\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [{\n  id: 1,\n  name: 'Manager',\n  description: 'Department Manager'\n}, {\n  id: 2,\n  name: 'Team Lead',\n  description: 'Team Leader'\n}, {\n  id: 3,\n  name: 'Senior Staff',\n  description: 'Senior Level Staff'\n}, {\n  id: 4,\n  name: 'Junior Staff',\n  description: 'Junior Level Staff'\n}];\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [{\n  id: 1,\n  name: 'Leave Request',\n  description: 'Request for leave or time off'\n}, {\n  id: 2,\n  name: 'Equipment Request',\n  description: 'Request for office equipment'\n}, {\n  id: 3,\n  name: 'Training Request',\n  description: 'Request for training or workshops'\n}, {\n  id: 4,\n  name: 'Other',\n  description: 'Other types of requests'\n}];\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      return handleRoute().pipe(delay(500),\n      // Simulate server delay\n      materialize(), dematerialize());\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case url.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case url.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case url.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case url.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case url.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          // request routes\n          case url.endsWith('/requests') && method === 'GET':\n            return getRequests();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return getRequestById();\n          case url.endsWith('/requests/my-requests') && method === 'GET':\n            return getMyRequests();\n          case url.endsWith('/requests') && method === 'POST':\n            return createRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return updateRequest();\n          case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n            return changeRequestStatus();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n            return deleteRequest();\n          // employee routes\n          case url.endsWith('/employees') && method === 'GET':\n            return getEmployees();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n            return getEmployeeById();\n          case url.endsWith('/employees') && method === 'POST':\n            return createEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n            return updateEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n            return deleteEmployee();\n          case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n            return transferEmployee();\n          // department routes\n          case url.endsWith('/departments') && method === 'GET':\n            return getDepartments();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n            return getDepartmentById();\n          case url.endsWith('/departments') && method === 'POST':\n            return createDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n            return updateDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n            return deleteDepartment();\n          // position routes\n          case url.endsWith('/positions') && method === 'GET':\n            return getPositions();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n            return getPositionById();\n          case url.endsWith('/positions') && method === 'POST':\n            return createPosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n            return updatePosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n            return deletePosition();\n          // request type routes\n          case url.endsWith('/request-types') && method === 'GET':\n            return getRequestTypes();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n            return getRequestTypeById();\n          case url.endsWith('/request-types') && method === 'POST':\n            return createRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n            return updateRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n            return deleteRequestType();\n          // workflow routes\n          case url.endsWith('/workflows') && method === 'GET':\n            return getWorkflows();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n            return getWorkflowById();\n          case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByEmployeeId();\n          case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByRequestId();\n          case url.endsWith('/workflows') && method === 'POST':\n            return createWorkflow();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n            return updateWorkflow();\n          case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n            return updateWorkflowStatus();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflow();\n          case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflowItem();\n          default:\n            return next.handle(request);\n        }\n      }\n      // Authentication functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) return error('Email or password is incorrect');\n        if (password !== account.password) return error('Email or password is incorrect');\n        if (!account.isVerified) return error('Please verify your email before logging in');\n        // Generate refresh token and save\n        const refreshToken = generateRefreshToken();\n        account.refreshTokens = account.refreshTokens || [];\n        account.refreshTokens.push(refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // Return basic details and tokens\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account),\n          refreshToken\n        }));\n      }\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return unauthorized();\n        const account = accounts.find(x => {\n          var _a;\n          return (_a = x.refreshTokens) === null || _a === void 0 ? void 0 : _a.includes(refreshToken);\n        });\n        if (!account) return unauthorized();\n        // Generate new refresh token and save\n        const newRefreshToken = generateRefreshToken();\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        account.refreshTokens.push(newRefreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // Return basic details and tokens\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account),\n          refreshToken: newRefreshToken\n        }));\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // display email already registered message in alert\n          setTimeout(() => {\n            alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, {\n              autoclose: false\n            });\n          }, 1000);\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // first registered account is an admin\n          account.role = Role.Admin;\n          account.status = 'Active'; // Admin accounts get active status\n        } else {\n          account.role = Role.User;\n          account.status = 'Inactive'; // User accounts get inacitve status upon creation\n        }\n\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display verification email in alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoclose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can get own profile and admin accounts can get all profiles\n        if (account.id !== currentAccount().id && !isAdmin()) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      // Request functions\n      function getRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        // Return all requests for admins, or filtered for regular users\n        let filteredRequests = [...requests];\n        if (!isAdmin()) {\n          const currentUserId = currentAccount().id;\n          filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n        }\n        return ok(filteredRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const employee = employees.find(e => e.id === request.employeeId);\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return Object.assign(Object.assign({}, request), {\n            items,\n            employee,\n            type: requestType\n          });\n        }));\n      }\n      function getRequestById() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        // Check authorization\n        if (!isAdmin() && request.employeeId !== currentAccount().id) {\n          return unauthorized();\n        }\n        // Add related data\n        const items = requestItems.filter(item => item.requestId === request.id);\n        const employee = employees.find(e => e.id === request.employeeId);\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        return ok(Object.assign(Object.assign({}, request), {\n          items,\n          employee,\n          type: requestType\n        }));\n      }\n      function getMyRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        const currentUserId = currentAccount().id;\n        const myRequests = requests.filter(x => x.employeeId === currentUserId);\n        return ok(myRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const employee = employees.find(e => e.id === request.employeeId);\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return Object.assign(Object.assign({}, request), {\n            items,\n            employee,\n            type: requestType\n          });\n        }));\n      }\n      function createRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        // Validate request type\n        if (!body.typeId || !requestTypes.find(t => t.id === body.typeId)) {\n          return error('Invalid request type');\n        }\n        const request = Object.assign(Object.assign({\n          id: newRequestId(),\n          employeeId: currentAccount().id\n        }, body), {\n          status: 'Pending',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate and process items\n        if (body.items) {\n          if (!Array.isArray(body.items)) {\n            return error('Items must be an array');\n          }\n          const items = body.items.map(item => {\n            if (!item.name || !item.quantity) {\n              throw new Error('Invalid item data');\n            }\n            return {\n              id: newRequestItemId(),\n              requestId: request.id,\n              name: item.name,\n              quantity: parseInt(item.quantity)\n            };\n          });\n          requestItems.push(...items);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        // Create workflow entry for new request\n        const employee = employees.find(e => e.id === request.employeeId);\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: request.employeeId,\n          type: 'Request Created',\n          details: {\n            task: `New ${requestType.name} created by ${employee.firstName} ${employee.lastName}`,\n            additionalInfo: `Request Status: ${request.status}`\n          },\n          status: 'ForReviewing',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        delete request.items; // Remove items from main request object\n        requests.push(request);\n        workflows.push(workflow);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, request), {\n          items: body.items,\n          employee,\n          type: requestType\n        }));\n      }\n      function updateRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Validate request type if changed\n        if (body.typeId && !requestTypes.find(t => t.id === body.typeId)) {\n          return error('Invalid request type');\n        }\n        // Update request\n        Object.assign(request, Object.assign(Object.assign({}, body), {\n          lastModifiedDate: new Date().toISOString()\n        }));\n        // Handle item changes\n        if (body.itemChanges) {\n          try {\n            // Delete items\n            if (body.itemChanges.delete) {\n              requestItems = requestItems.filter(item => item.requestId !== requestId || !body.itemChanges.delete.includes(item.id));\n            }\n            // Update items\n            if (body.itemChanges.update) {\n              body.itemChanges.update.forEach(updatedItem => {\n                if (!updatedItem.name || !updatedItem.quantity) {\n                  throw new Error('Invalid item data');\n                }\n                const item = requestItems.find(x => x.id === updatedItem.id);\n                if (item) {\n                  Object.assign(item, Object.assign(Object.assign({}, updatedItem), {\n                    quantity: parseInt(updatedItem.quantity)\n                  }));\n                }\n              });\n            }\n            // Add new items\n            if (body.itemChanges.add) {\n              const newItems = body.itemChanges.add.map(item => {\n                if (!item.name || !item.quantity) {\n                  throw new Error('Invalid item data');\n                }\n                return {\n                  id: newRequestItemId(),\n                  requestId: requestId,\n                  name: item.name,\n                  quantity: parseInt(item.quantity)\n                };\n              });\n              requestItems.push(...newItems);\n            }\n            localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n          } catch (error) {\n            return error('Invalid item data provided');\n          }\n        }\n        // Create workflow entry for updated request\n        const employee = employees.find(e => e.id === request.employeeId);\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: request.employeeId,\n          type: 'Request Updated',\n          details: {\n            task: `${requestType.name} updated by ${employee.firstName} ${employee.lastName}`,\n            additionalInfo: `Request Status: ${request.status}`\n          },\n          status: 'ForReviewing',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        workflows.push(workflow);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === requestId),\n          employee,\n          type: requestType\n        }));\n      }\n      function changeRequestStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        const oldStatus = request.status;\n        const newStatus = body.status;\n        Object.assign(request, {\n          status: newStatus,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Create workflow entry for status change\n        const employee = employees.find(e => e.id === request.employeeId);\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: request.employeeId,\n          type: 'Request Status Changed',\n          details: {\n            task: `${requestType.name} status changed for ${employee.firstName} ${employee.lastName}`,\n            additionalInfo: `Status changed from ${oldStatus} to ${newStatus}`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        workflows.push(workflow);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === request.id),\n          employee,\n          type: requestType\n        }));\n      }\n      function deleteRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Delete request and its items\n        requests = requests.filter(x => x.id !== requestId);\n        requestItems = requestItems.filter(x => x.requestId !== requestId);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        return ok();\n      }\n      // Employee functions\n      function getEmployees() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(employees.map(employee => Object.assign(Object.assign({}, employee), {\n          department: departments.find(d => d.id === employee.departmentId)\n        })));\n      }\n      function getEmployeeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const employee = employees.find(x => x.id === idFromUrl());\n        if (!employee) return notFound();\n        return ok(Object.assign(Object.assign({}, employee), {\n          department: departments.find(d => d.id === employee.departmentId)\n        }));\n      }\n      function createEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employee = Object.assign(Object.assign({}, body), {\n          id: newEmployeeId(),\n          status: 'Active',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate required fields\n        if (!employee.firstName || !employee.lastName || !employee.departmentId || !employee.positionId) {\n          return error('Required fields are missing');\n        }\n        // Validate department exists\n        const department = departments.find(d => d.id === employee.departmentId);\n        if (!department) return error('Department not found');\n        // Validate position exists\n        const position = positions.find(p => p.id === employee.positionId);\n        if (!position) return error('Position not found');\n        // Create workflow entry for new employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employee.id,\n          type: 'Added',\n          details: {\n            task: `The Employee Named ${employee.firstName} ${employee.lastName} was added`,\n            additionalInfo: `Added to ${department.name} department as ${position.name}`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(employee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employee), {\n          department,\n          position\n        }));\n      }\n      function updateEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const oldEmployee = employees[employeeIndex];\n        const updatedEmployee = Object.assign(Object.assign(Object.assign({}, oldEmployee), body), {\n          id: employeeId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department exists if changed\n        if (body.departmentId) {\n          const department = departments.find(d => d.id === body.departmentId);\n          if (!department) return error('Department not found');\n        }\n        // Validate position exists if changed\n        if (body.positionId) {\n          const position = positions.find(p => p.id === body.positionId);\n          if (!position) return error('Position not found');\n        }\n        const department = departments.find(d => d.id === updatedEmployee.departmentId);\n        const position = positions.find(p => p.id === updatedEmployee.positionId);\n        // Create workflow entry for updated employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Updated',\n          details: {\n            task: `The Employee Named ${updatedEmployee.firstName} ${updatedEmployee.lastName} was updated`,\n            additionalInfo: `Updated in ${department.name} department as ${position.name}`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees[employeeIndex] = updatedEmployee;\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedEmployee), {\n          department,\n          position\n        }));\n      }\n      function deleteEmployee() {\n        var _a;\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employee = employees.find(x => x.id === employeeId);\n        if (!employee) return notFound();\n        // Create workflow entry for deleted employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Deleted',\n          details: {\n            task: `The Employee Named ${employee.firstName} ${employee.lastName} was deleted`,\n            additionalInfo: `Deleted from ${((_a = departments.find(d => d.id === employee.departmentId)) === null || _a === void 0 ? void 0 : _a.name) || 'Unknown'} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees = employees.filter(x => x.id !== employeeId);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok();\n      }\n      function transferEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employee = employees.find(x => x.id === employeeId);\n        if (!employee) return notFound();\n        const oldDepartment = departments.find(d => d.id === employee.departmentId);\n        const newDepartment = departments.find(d => d.id === body.departmentId);\n        if (!newDepartment) return error('New department not found');\n        // Update employee's department\n        employee.departmentId = body.departmentId;\n        employee.lastModifiedDate = new Date().toISOString();\n        // Create workflow entry for department transfer\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Department Transfer',\n          details: {\n            task: `The Employee Named ${employee.firstName} ${employee.lastName} was transferred`,\n            additionalInfo: `Transferred from ${(oldDepartment === null || oldDepartment === void 0 ? void 0 : oldDepartment.name) || 'Unknown'} to ${newDepartment.name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employee), {\n          department: newDepartment\n        }));\n      }\n      // Department functions\n      function getDepartments() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(departments);\n      }\n      function getDepartmentById() {\n        if (!isAuthenticated()) return unauthorized();\n        const department = departments.find(x => x.id === idFromUrl());\n        if (!department) return notFound();\n        return ok(department);\n      }\n      function createDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const department = body;\n        department.id = newDepartmentId();\n        department.createdDate = new Date().toISOString();\n        department.lastModifiedDate = new Date().toISOString();\n        departments.push(department);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(department);\n      }\n      function updateDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        departments[departmentIndex] = Object.assign(Object.assign(Object.assign({}, departments[departmentIndex]), body), {\n          id: departmentId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(departments[departmentIndex]);\n      }\n      function deleteDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        // Check if department has employees\n        if (employees.some(e => e.departmentId === departmentId)) {\n          return error('Cannot delete department with existing employees');\n        }\n        departments = departments.filter(x => x.id !== departmentId);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok();\n      }\n      // Position functions\n      function getPositions() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(positions);\n      }\n      function getPositionById() {\n        if (!isAuthenticated()) return unauthorized();\n        const position = positions.find(x => x.id === idFromUrl());\n        if (!position) return notFound();\n        return ok(position);\n      }\n      function createPosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const position = Object.assign(Object.assign({}, body), {\n          id: newPositionId(),\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        });\n        if (!position.name || !position.description) {\n          return error('Name and description are required');\n        }\n        positions.push(position);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(position);\n      }\n      function updatePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        positions[positionIndex] = Object.assign(Object.assign(Object.assign({}, positions[positionIndex]), body), {\n          id: positionId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(positions[positionIndex]);\n      }\n      function deletePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        // Check if position has employees\n        if (employees.some(e => e.positionId === positionId)) {\n          return error('Cannot delete position with existing employees');\n        }\n        positions = positions.filter(x => x.id !== positionId);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok();\n      }\n      // Request Type functions\n      function getRequestTypes() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(requestTypes);\n      }\n      function getRequestTypeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestType = requestTypes.find(x => x.id === idFromUrl());\n        if (!requestType) return notFound();\n        return ok(requestType);\n      }\n      function createRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const requestType = Object.assign(Object.assign({}, body), {\n          id: newRequestTypeId(),\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        });\n        if (!requestType.name || !requestType.description) {\n          return error('Name and description are required');\n        }\n        requestTypes.push(requestType);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(requestType);\n      }\n      function updateRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const requestTypeId = idFromUrl();\n        const requestTypeIndex = requestTypes.findIndex(x => x.id === requestTypeId);\n        if (requestTypeIndex === -1) return notFound();\n        requestTypes[requestTypeIndex] = Object.assign(Object.assign(Object.assign({}, requestTypes[requestTypeIndex]), body), {\n          id: requestTypeId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(requestTypes[requestTypeIndex]);\n      }\n      function deleteRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const requestTypeId = idFromUrl();\n        // Check if request type is in use\n        if (requests.some(r => r.typeId === requestTypeId)) {\n          return error('Cannot delete request type that is in use');\n        }\n        requestTypes = requestTypes.filter(x => x.id !== requestTypeId);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok();\n      }\n      function newPositionId() {\n        return positions.length ? Math.max(...positions.map(x => x.id)) + 1 : 1;\n      }\n      function newRequestTypeId() {\n        return requestTypes.length ? Math.max(...requestTypes.map(x => x.id)) + 1 : 1;\n      }\n      // Workflow functions\n      function getWorkflows() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(workflows.map(workflow => Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        })));\n      }\n      function getWorkflowById() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflow = workflows.find(x => x.id === idFromUrl());\n        if (!workflow) return notFound();\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        }));\n      }\n      function getWorkflowsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = parseInt(url.split('/').pop());\n        const employeeWorkflows = workflows.filter(x => x.employeeId === employeeId);\n        return ok(employeeWorkflows.map(workflow => Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        })));\n      }\n      function getWorkflowsByRequestId() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = parseInt(url.split('/').pop());\n        const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n        return ok(requestWorkflows.map(workflow => Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        })));\n      }\n      function createWorkflow() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflow = body;\n        workflow.id = newWorkflowId();\n        workflow.createdDate = new Date().toISOString();\n        workflow.lastModifiedDate = new Date().toISOString();\n        workflow.status = workflow.status || 'ForReviewing'; // Default status\n        workflows.push(workflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        }));\n      }\n      function updateWorkflow() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        workflows[workflowIndex] = Object.assign(Object.assign(Object.assign({}, workflows[workflowIndex]), body), {\n          id: workflowId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflows[workflowIndex]), {\n          employee: employees.find(e => e.id === workflows[workflowIndex].employeeId)\n        }));\n      }\n      function updateWorkflowStatus() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        workflow.status = body.status;\n        workflow.lastModifiedDate = new Date().toISOString();\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employees.find(e => e.id === workflow.employeeId)\n        }));\n      }\n      function deleteWorkflow() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflowId = idFromUrl();\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok();\n      }\n      function deleteWorkflowItem() {\n        if (!isAuthenticated()) return unauthorized();\n        const itemId = idFromUrl();\n        const workflow = workflows.find(x => {\n          var _a;\n          return (_a = x.items) === null || _a === void 0 ? void 0 : _a.some(item => item.id === itemId);\n        });\n        if (workflow) {\n          workflow.items = workflow.items.filter(item => item.id !== itemId);\n          localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        }\n        return ok();\n      }\n      function newWorkflowId() {\n        return workflows.length ? Math.max(...workflows.map(x => parseInt(x.id))) + 1 : 1;\n      }\n      // Helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        }));\n      }\n      function error(message) {\n        return throwError(() => ({\n          error: {\n            message\n          }\n        }));\n      }\n      function unauthorized() {\n        return throwError(() => ({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }));\n      }\n      function notFound() {\n        return throwError(() => ({\n          status: 404,\n          error: {\n            message: 'Not Found'\n          }\n        }));\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status,\n          isVerified\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status,\n          isVerified\n        };\n      }\n      function isAuthenticated() {\n        return !!currentAccount();\n      }\n      function isAdmin() {\n        var _a;\n        return ((_a = currentAccount()) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n      }\n      function currentAccount() {\n        var _a;\n        // Check if the authorization header exists and has a JWT token\n        if (!((_a = headers.get('Authorization')) === null || _a === void 0 ? void 0 : _a.startsWith('Bearer '))) return null;\n        // Get the account from the JWT token (in a real app this would validate the token)\n        const jwtToken = JSON.parse(atob(headers.get('Authorization').split('.')[1]));\n        const account = accounts.find(x => x.id === jwtToken.id);\n        return account;\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function newRequestId() {\n        return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n      }\n      function newRequestItemId() {\n        return requestItems.length ? Math.max(...requestItems.map(x => x.id)) + 1 : 1;\n      }\n      function newAccountId() {\n        return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n      }\n      function generateJwtToken(account) {\n        // Create a JWT token that expires in 15 minutes\n        const tokenPayload = {\n          id: account.id,\n          role: account.role,\n          email: account.email,\n          exp: Math.floor(Date.now() / 1000) + 15 * 60 // 15 minutes from now\n        };\n\n        return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;\n      }\n      function generateRefreshToken() {\n        return `fake-refresh-token-${Math.floor(Math.random() * 1000000000)}`;\n      }\n      function getRefreshToken() {\n        // Check Authorization header for refresh token\n        const authHeader = headers.get('Authorization');\n        if (!(authHeader === null || authHeader === void 0 ? void 0 : authHeader.startsWith('Bearer '))) return null;\n        return authHeader.split(' ')[1];\n      }\n      function newEmployeeId() {\n        return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n      }\n      function newDepartmentId() {\n        return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","materialize","dematerialize","Role","accountsKey","accounts","JSON","parse","localStorage","getItem","employeesKey","employees","departmentsKey","departments","id","name","description","requestsKey","requests","requestItemsKey","requestItems","workflowsKey","workflows","positionsKey","positions","requestTypesKey","requestTypes","FakeBackendInterceptor","constructor","alertService","intercept","request","next","url","method","headers","body","handleRoute","pipe","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","getAccounts","match","getAccountById","getRequests","getRequestById","getMyRequests","createRequest","updateRequest","changeRequestStatus","deleteRequest","getEmployees","getEmployeeById","createEmployee","updateEmployee","deleteEmployee","transferEmployee","getDepartments","getDepartmentById","createDepartment","updateDepartment","deleteDepartment","getPositions","getPositionById","createPosition","updatePosition","deletePosition","getRequestTypes","getRequestTypeById","createRequestType","updateRequestType","deleteRequestType","getWorkflows","getWorkflowById","getWorkflowsByEmployeeId","getWorkflowsByRequestId","createWorkflow","updateWorkflow","updateWorkflowStatus","deleteWorkflow","deleteWorkflowItem","handle","email","password","account","find","x","error","isVerified","generateRefreshToken","refreshTokens","push","setItem","stringify","ok","basicDetails","jwtToken","generateJwtToken","getRefreshToken","unauthorized","includes","newRefreshToken","filter","isAuthenticated","setTimeout","info","location","origin","autoclose","newAccountId","role","Admin","status","User","dateCreated","Date","toISOString","verificationToken","getTime","toString","confirmPassword","verifyUrl","token","map","idFromUrl","currentAccount","isAdmin","filteredRequests","currentUserId","employeeId","items","item","requestId","employee","e","requestType","t","typeId","type","notFound","myRequests","newRequestId","createdDate","lastModifiedDate","Array","isArray","quantity","Error","newRequestItemId","parseInt","workflow","newWorkflowId","details","task","firstName","lastName","additionalInfo","Object","assign","itemChanges","delete","update","forEach","updatedItem","add","newItems","oldStatus","newStatus","department","d","departmentId","newEmployeeId","positionId","position","p","employeeIndex","findIndex","oldEmployee","updatedEmployee","oldDepartment","newDepartment","newDepartmentId","departmentIndex","some","newPositionId","positionIndex","newRequestTypeId","requestTypeId","requestTypeIndex","r","length","Math","max","split","pop","employeeWorkflows","requestWorkflows","workflowId","workflowIndex","itemId","message","title","get","startsWith","atob","urlParts","tokenPayload","exp","floor","now","btoa","random","authHeader","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\n\nimport { AlertService } from '@app/_services';\nimport { Role } from '@app/_models';\n\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [\n    { id: 1, name: 'HR', description: 'Human Resources' },\n    { id: 2, name: 'IT', description: 'Information Technology' },\n    { id: 3, name: 'Finance', description: 'Finance Department' },\n    { id: 4, name: 'Marketing', description: 'Marketing Department' }\n];\n\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [\n    { id: 1, name: 'Manager', description: 'Department Manager' },\n    { id: 2, name: 'Team Lead', description: 'Team Leader' },\n    { id: 3, name: 'Senior Staff', description: 'Senior Level Staff' },\n    { id: 4, name: 'Junior Staff', description: 'Junior Level Staff' }\n];\n\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [\n    { id: 1, name: 'Leave Request', description: 'Request for leave or time off' },\n    { id: 2, name: 'Equipment Request', description: 'Request for office equipment' },\n    { id: 3, name: 'Training Request', description: 'Request for training or workshops' },\n    { id: 4, name: 'Other', description: 'Other types of requests' }\n];\n\n@Injectable()\nexport class FakeBackendInterceptor implements HttpInterceptor {\n    constructor(private alertService: AlertService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { url, method, headers, body } = request;\n        const alertService = this.alertService;\n\n        return handleRoute().pipe(\n            delay(500), // Simulate server delay\n            materialize(),\n            dematerialize()\n        );\n\n        function handleRoute() {\n            switch (true) {\n                case url.endsWith('/accounts/authenticate') && method === 'POST':\n                    return authenticate();\n                case url.endsWith('/accounts/refresh-token') && method === 'POST':\n                    return refreshToken();\n                case url.endsWith('/accounts/revoke-token') && method === 'POST':\n                    return revokeToken();\n                case url.endsWith('/accounts/register') && method === 'POST':\n                    return register();\n                case url.endsWith('/accounts/verify-email') && method === 'POST':\n                    return verifyEmail();\n                case url.endsWith('/accounts') && method === 'GET':\n                    return getAccounts();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n                    return getAccountById();\n                    \n                // request routes\n                case url.endsWith('/requests') && method === 'GET':\n                    return getRequests();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n                    return getRequestById();\n                case url.endsWith('/requests/my-requests') && method === 'GET':\n                    return getMyRequests();\n                case url.endsWith('/requests') && method === 'POST':\n                    return createRequest();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n                    return updateRequest();\n                case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n                    return changeRequestStatus();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequest();\n                    \n                // employee routes\n                case url.endsWith('/employees') && method === 'GET':\n                    return getEmployees();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n                    return getEmployeeById();\n                case url.endsWith('/employees') && method === 'POST':\n                    return createEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n                    return updateEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n                    return deleteEmployee();\n                case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n                    return transferEmployee();\n\n                // department routes\n                case url.endsWith('/departments') && method === 'GET':\n                    return getDepartments();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n                    return getDepartmentById();\n                case url.endsWith('/departments') && method === 'POST':\n                    return createDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n                    return updateDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n                    return deleteDepartment();\n                    \n                // position routes\n                case url.endsWith('/positions') && method === 'GET':\n                    return getPositions();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n                    return getPositionById();\n                case url.endsWith('/positions') && method === 'POST':\n                    return createPosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n                    return updatePosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n                    return deletePosition();\n\n                // request type routes\n                case url.endsWith('/request-types') && method === 'GET':\n                    return getRequestTypes();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n                    return getRequestTypeById();\n                case url.endsWith('/request-types') && method === 'POST':\n                    return createRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n                    return updateRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequestType();\n\n                // workflow routes\n                case url.endsWith('/workflows') && method === 'GET':\n                    return getWorkflows();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n                    return getWorkflowById();\n                case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByEmployeeId();\n                case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByRequestId();\n                case url.endsWith('/workflows') && method === 'POST':\n                    return createWorkflow();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n                    return updateWorkflow();\n                case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n                    return updateWorkflowStatus();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflow();\n                case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflowItem();\n                    \n                default:\n                    return next.handle(request);\n            }\n        }\n\n        // Authentication functions\n        function authenticate() {\n            const { email, password } = body;\n            const account = accounts.find(x => x.email === email);\n        \n            if (!account) return error('Email or password is incorrect');\n            if (password !== account.password) return error('Email or password is incorrect');\n            if (!account.isVerified) return error('Please verify your email before logging in');\n\n            // Generate refresh token and save\n            const refreshToken = generateRefreshToken();\n            account.refreshTokens = account.refreshTokens || [];\n            account.refreshTokens.push(refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // Return basic details and tokens\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account),\n                refreshToken\n            });\n        }\n\n        function refreshToken() {\n            const refreshToken = getRefreshToken();\n            \n            if (!refreshToken) return unauthorized();\n\n            const account = accounts.find(x => x.refreshTokens?.includes(refreshToken));\n            \n            if (!account) return unauthorized();\n\n            // Generate new refresh token and save\n            const newRefreshToken = generateRefreshToken();\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            account.refreshTokens.push(newRefreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // Return basic details and tokens\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account),\n                refreshToken: newRefreshToken\n            });\n        }\n\n        function revokeToken() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const refreshToken = getRefreshToken();\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n\n            // revoke token and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function register() {\n            const account = body;\n\n            if (accounts.find(x => x.email === account.email)) {\n                // display email already registered message in alert\n                setTimeout(() => {\n                    alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, { autoclose: false });\n                }, 1000);\n\n                // always return ok() response to prevent email enumeration\n                return ok();\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            if (account.id === 1) {\n                // first registered account is an admin\n                account.role = Role.Admin;\n                account.status = 'Active'; // Admin accounts get active status\n            } else {\n                account.role = Role.User;\n                account.status = 'Inactive'; // User accounts get inacitve status upon creation\n            }\n            account.dateCreated = new Date().toISOString();\n            account.verificationToken = new Date().getTime().toString();\n            account.isVerified = false;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // display verification email in alert\n            setTimeout(() => {\n                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, { autoclose: false });\n            }, 1000);\n\n            return ok();\n        }\n\n        function verifyEmail() {\n            const { token } = body;\n            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n\n            if (!account) return error('Verification failed');\n\n            // set is verified flag to true if token is valid\n            account.isVerified = true;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function getAccounts() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(accounts.map(x => basicDetails(x)));\n        }\n\n        function getAccountById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let account = accounts.find(x => x.id === idFromUrl());\n\n            // user accounts can get own profile and admin accounts can get all profiles\n            if (account.id !== currentAccount().id && !isAdmin()) {\n                return unauthorized();\n            }\n\n            return ok(basicDetails(account));\n        }\n\n        // Request functions\n        function getRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            // Return all requests for admins, or filtered for regular users\n            let filteredRequests = [...requests];\n            if (!isAdmin()) {\n                const currentUserId = currentAccount().id;\n                filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n            }\n\n            return ok(filteredRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const employee = employees.find(e => e.id === request.employeeId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                return {\n                    ...request,\n                    items,\n                    employee,\n                    type: requestType\n                };\n            }));\n        }\n\n        function getRequestById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            // Check authorization\n            if (!isAdmin() && request.employeeId !== currentAccount().id) {\n                return unauthorized();\n            }\n\n            // Add related data\n            const items = requestItems.filter(item => item.requestId === request.id);\n            const employee = employees.find(e => e.id === request.employeeId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n\n            return ok({\n                ...request,\n                items,\n                employee,\n                type: requestType\n            });\n        }\n\n        function getMyRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const currentUserId = currentAccount().id;\n            const myRequests = requests.filter(x => x.employeeId === currentUserId);\n\n            return ok(myRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const employee = employees.find(e => e.id === request.employeeId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                return {\n                    ...request,\n                    items,\n                    employee,\n                    type: requestType\n                };\n            }));\n        }\n\n        function createRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            // Validate request type\n            if (!body.typeId || !requestTypes.find(t => t.id === body.typeId)) {\n                return error('Invalid request type');\n            }\n\n            const request = {\n                id: newRequestId(),\n                employeeId: currentAccount().id,\n                ...body,\n                status: 'Pending',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            // Validate and process items\n            if (body.items) {\n                if (!Array.isArray(body.items)) {\n                    return error('Items must be an array');\n                }\n\n                const items = body.items.map(item => {\n                    if (!item.name || !item.quantity) {\n                        throw new Error('Invalid item data');\n                    }\n                    return {\n                        id: newRequestItemId(),\n                        requestId: request.id,\n                        name: item.name,\n                        quantity: parseInt(item.quantity)\n                    };\n                });\n\n                requestItems.push(...items);\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n            }\n\n            // Create workflow entry for new request\n            const employee = employees.find(e => e.id === request.employeeId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: request.employeeId,\n                type: 'Request Created',\n                details: {\n                    task: `New ${requestType.name} created by ${employee.firstName} ${employee.lastName}`,\n                    additionalInfo: `Request Status: ${request.status}`\n                },\n                status: 'ForReviewing',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            delete request.items; // Remove items from main request object\n            requests.push(request);\n            workflows.push(workflow);\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok({\n                ...request,\n                items: body.items,\n                employee,\n                type: requestType\n            });\n        }\n\n        function updateRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Validate request type if changed\n            if (body.typeId && !requestTypes.find(t => t.id === body.typeId)) {\n                return error('Invalid request type');\n            }\n\n            // Update request\n            Object.assign(request, {\n                ...body,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            // Handle item changes\n            if (body.itemChanges) {\n                try {\n                    // Delete items\n                    if (body.itemChanges.delete) {\n                        requestItems = requestItems.filter(item => \n                            item.requestId !== requestId || \n                            !body.itemChanges.delete.includes(item.id)\n                        );\n                    }\n\n                    // Update items\n                    if (body.itemChanges.update) {\n                        body.itemChanges.update.forEach(updatedItem => {\n                            if (!updatedItem.name || !updatedItem.quantity) {\n                                throw new Error('Invalid item data');\n                            }\n                            const item = requestItems.find(x => x.id === updatedItem.id);\n                            if (item) {\n                                Object.assign(item, {\n                                    ...updatedItem,\n                                    quantity: parseInt(updatedItem.quantity)\n                                });\n                            }\n                        });\n                    }\n\n                    // Add new items\n                    if (body.itemChanges.add) {\n                        const newItems = body.itemChanges.add.map(item => {\n                            if (!item.name || !item.quantity) {\n                                throw new Error('Invalid item data');\n                            }\n                            return {\n                                id: newRequestItemId(),\n                                requestId: requestId,\n                                name: item.name,\n                                quantity: parseInt(item.quantity)\n                            };\n                        });\n                        requestItems.push(...newItems);\n                    }\n\n                    localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n                } catch (error) {\n                    return error('Invalid item data provided');\n                }\n            }\n\n            // Create workflow entry for updated request\n            const employee = employees.find(e => e.id === request.employeeId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: request.employeeId,\n                type: 'Request Updated',\n                details: {\n                    task: `${requestType.name} updated by ${employee.firstName} ${employee.lastName}`,\n                    additionalInfo: `Request Status: ${request.status}`\n                },\n                status: 'ForReviewing',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            workflows.push(workflow);\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok({\n                ...request,\n                items: requestItems.filter(item => item.requestId === requestId),\n                employee,\n                type: requestType\n            });\n        }\n\n        function changeRequestStatus() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            const oldStatus = request.status;\n            const newStatus = body.status;\n\n            Object.assign(request, {\n                status: newStatus,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            // Create workflow entry for status change\n            const employee = employees.find(e => e.id === request.employeeId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: request.employeeId,\n                type: 'Request Status Changed',\n                details: {\n                    task: `${requestType.name} status changed for ${employee.firstName} ${employee.lastName}`,\n                    additionalInfo: `Status changed from ${oldStatus} to ${newStatus}`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            workflows.push(workflow);\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok({\n                ...request,\n                items: requestItems.filter(item => item.requestId === request.id),\n                employee,\n                type: requestType\n            });\n        }\n\n        function deleteRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Delete request and its items\n            requests = requests.filter(x => x.id !== requestId);\n            requestItems = requestItems.filter(x => x.requestId !== requestId);\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n\n            return ok();\n        }\n\n        // Employee functions\n        function getEmployees() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(employees.map(employee => ({\n                ...employee,\n                department: departments.find(d => d.id === employee.departmentId)\n            })));\n        }\n\n        function getEmployeeById() {\n            if (!isAuthenticated()) return unauthorized();\n            const employee = employees.find(x => x.id === idFromUrl());\n            if (!employee) return notFound();\n            return ok({\n                ...employee,\n                department: departments.find(d => d.id === employee.departmentId)\n            });\n        }\n\n        function createEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employee = {\n                ...body,\n                id: newEmployeeId(),\n                status: 'Active',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate required fields\n            if (!employee.firstName || !employee.lastName || !employee.departmentId || !employee.positionId) {\n                return error('Required fields are missing');\n            }\n            \n            // Validate department exists\n            const department = departments.find(d => d.id === employee.departmentId);\n            if (!department) return error('Department not found');\n            \n            // Validate position exists\n            const position = positions.find(p => p.id === employee.positionId);\n            if (!position) return error('Position not found');\n            \n            // Create workflow entry for new employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employee.id,\n                type: 'Added',\n                details: {\n                    task: `The Employee Named ${employee.firstName} ${employee.lastName} was added`,\n                    additionalInfo: `Added to ${department.name} department as ${position.name}`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(employee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...employee,\n                department,\n                position\n            });\n        }\n\n        function updateEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const oldEmployee = employees[employeeIndex];\n            const updatedEmployee = {\n                ...oldEmployee,\n                ...body,\n                id: employeeId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate department exists if changed\n            if (body.departmentId) {\n                const department = departments.find(d => d.id === body.departmentId);\n                if (!department) return error('Department not found');\n            }\n            \n            // Validate position exists if changed\n            if (body.positionId) {\n                const position = positions.find(p => p.id === body.positionId);\n                if (!position) return error('Position not found');\n            }\n            \n            const department = departments.find(d => d.id === updatedEmployee.departmentId);\n            const position = positions.find(p => p.id === updatedEmployee.positionId);\n            \n            // Create workflow entry for updated employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Updated',\n                details: {\n                    task: `The Employee Named ${updatedEmployee.firstName} ${updatedEmployee.lastName} was updated`,\n                    additionalInfo: `Updated in ${department.name} department as ${position.name}`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees[employeeIndex] = updatedEmployee;\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...updatedEmployee,\n                department,\n                position\n            });\n        }\n\n        function deleteEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employee = employees.find(x => x.id === employeeId);\n            \n            if (!employee) return notFound();\n            \n            // Create workflow entry for deleted employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Deleted',\n                details: {\n                    task: `The Employee Named ${employee.firstName} ${employee.lastName} was deleted`,\n                    additionalInfo: `Deleted from ${departments.find(d => d.id === employee.departmentId)?.name || 'Unknown'} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees = employees.filter(x => x.id !== employeeId);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok();\n        }\n\n        function transferEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employee = employees.find(x => x.id === employeeId);\n            \n            if (!employee) return notFound();\n            \n            const oldDepartment = departments.find(d => d.id === employee.departmentId);\n            const newDepartment = departments.find(d => d.id === body.departmentId);\n            \n            if (!newDepartment) return error('New department not found');\n            \n            // Update employee's department\n            employee.departmentId = body.departmentId;\n            employee.lastModifiedDate = new Date().toISOString();\n            \n            // Create workflow entry for department transfer\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Department Transfer',\n                details: {\n                    task: `The Employee Named ${employee.firstName} ${employee.lastName} was transferred`,\n                    additionalInfo: `Transferred from ${oldDepartment?.name || 'Unknown'} to ${newDepartment.name} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...employee,\n                department: newDepartment\n            });\n        }\n\n        // Department functions\n        function getDepartments() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(departments);\n        }\n\n        function getDepartmentById() {\n            if (!isAuthenticated()) return unauthorized();\n            const department = departments.find(x => x.id === idFromUrl());\n            if (!department) return notFound();\n            return ok(department);\n        }\n\n        function createDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const department = body;\n            department.id = newDepartmentId();\n            department.createdDate = new Date().toISOString();\n            department.lastModifiedDate = new Date().toISOString();\n            \n            departments.push(department);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok(department);\n        }\n\n        function updateDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\n            \n            if (departmentIndex === -1) return notFound();\n            \n            departments[departmentIndex] = {\n                ...departments[departmentIndex],\n                ...body,\n                id: departmentId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok(departments[departmentIndex]);\n        }\n\n        function deleteDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            \n            // Check if department has employees\n            if (employees.some(e => e.departmentId === departmentId)) {\n                return error('Cannot delete department with existing employees');\n            }\n            \n            departments = departments.filter(x => x.id !== departmentId);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok();\n        }\n\n        // Position functions\n        function getPositions() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(positions);\n        }\n\n        function getPositionById() {\n            if (!isAuthenticated()) return unauthorized();\n            const position = positions.find(x => x.id === idFromUrl());\n            if (!position) return notFound();\n            return ok(position);\n        }\n\n        function createPosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const position = {\n                ...body,\n                id: newPositionId(),\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            if (!position.name || !position.description) {\n                return error('Name and description are required');\n            }\n            \n            positions.push(position);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok(position);\n        }\n\n        function updatePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            const positionIndex = positions.findIndex(x => x.id === positionId);\n            \n            if (positionIndex === -1) return notFound();\n            \n            positions[positionIndex] = {\n                ...positions[positionIndex],\n                ...body,\n                id: positionId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok(positions[positionIndex]);\n        }\n\n        function deletePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            \n            // Check if position has employees\n            if (employees.some(e => e.positionId === positionId)) {\n                return error('Cannot delete position with existing employees');\n            }\n            \n            positions = positions.filter(x => x.id !== positionId);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok();\n        }\n\n        // Request Type functions\n        function getRequestTypes() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(requestTypes);\n        }\n\n        function getRequestTypeById() {\n            if (!isAuthenticated()) return unauthorized();\n            const requestType = requestTypes.find(x => x.id === idFromUrl());\n            if (!requestType) return notFound();\n            return ok(requestType);\n        }\n\n        function createRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const requestType = {\n                ...body,\n                id: newRequestTypeId(),\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            if (!requestType.name || !requestType.description) {\n                return error('Name and description are required');\n            }\n            \n            requestTypes.push(requestType);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok(requestType);\n        }\n\n        function updateRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const requestTypeId = idFromUrl();\n            const requestTypeIndex = requestTypes.findIndex(x => x.id === requestTypeId);\n            \n            if (requestTypeIndex === -1) return notFound();\n            \n            requestTypes[requestTypeIndex] = {\n                ...requestTypes[requestTypeIndex],\n                ...body,\n                id: requestTypeId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok(requestTypes[requestTypeIndex]);\n        }\n\n        function deleteRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const requestTypeId = idFromUrl();\n            \n            // Check if request type is in use\n            if (requests.some(r => r.typeId === requestTypeId)) {\n                return error('Cannot delete request type that is in use');\n            }\n            \n            requestTypes = requestTypes.filter(x => x.id !== requestTypeId);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok();\n        }\n\n        function newPositionId() {\n            return positions.length ? Math.max(...positions.map(x => x.id)) + 1 : 1;\n        }\n\n        function newRequestTypeId() {\n            return requestTypes.length ? Math.max(...requestTypes.map(x => x.id)) + 1 : 1;\n        }\n\n        // Workflow functions\n        function getWorkflows() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(workflows.map(workflow => ({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            })));\n        }\n\n        function getWorkflowById() {\n            if (!isAuthenticated()) return unauthorized();\n            const workflow = workflows.find(x => x.id === idFromUrl());\n            if (!workflow) return notFound();\n            return ok({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            });\n        }\n\n        function getWorkflowsByEmployeeId() {\n            if (!isAuthenticated()) return unauthorized();\n            const employeeId = parseInt(url.split('/').pop());\n            const employeeWorkflows = workflows.filter(x => x.employeeId === employeeId);\n            return ok(employeeWorkflows.map(workflow => ({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            })));\n        }\n\n        function getWorkflowsByRequestId() {\n            if (!isAuthenticated()) return unauthorized();\n            const requestId = parseInt(url.split('/').pop());\n            const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n            return ok(requestWorkflows.map(workflow => ({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            })));\n        }\n\n        function createWorkflow() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const workflow = body;\n            workflow.id = newWorkflowId();\n            workflow.createdDate = new Date().toISOString();\n            workflow.lastModifiedDate = new Date().toISOString();\n            workflow.status = workflow.status || 'ForReviewing'; // Default status\n            \n            workflows.push(workflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            });\n        }\n\n        function updateWorkflow() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const workflowId = idFromUrl();\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n            \n            if (workflowIndex === -1) return notFound();\n            \n            workflows[workflowIndex] = {\n                ...workflows[workflowIndex],\n                ...body,\n                id: workflowId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflows[workflowIndex],\n                employee: employees.find(e => e.id === workflows[workflowIndex].employeeId)\n            });\n        }\n\n        function updateWorkflowStatus() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const workflowId = idFromUrl();\n            const workflow = workflows.find(x => x.id === workflowId);\n            \n            if (!workflow) return notFound();\n            \n            workflow.status = body.status;\n            workflow.lastModifiedDate = new Date().toISOString();\n            \n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employees.find(e => e.id === workflow.employeeId)\n            });\n        }\n\n        function deleteWorkflow() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const workflowId = idFromUrl();\n            workflows = workflows.filter(x => x.id !== workflowId);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok();\n        }\n\n        function deleteWorkflowItem() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const itemId = idFromUrl();\n            const workflow = workflows.find(x => x.items?.some(item => item.id === itemId));\n            \n            if (workflow) {\n                workflow.items = workflow.items.filter(item => item.id !== itemId);\n                localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            }\n            \n            return ok();\n        }\n\n        function newWorkflowId() {\n            return workflows.length ? Math.max(...workflows.map(x => parseInt(x.id))) + 1 : 1;\n        }\n\n        // Helper functions\n        function ok(body?: any) {\n            return of(new HttpResponse({ status: 200, body }));\n        }\n\n        function error(message: string) {\n            return throwError(() => ({ error: { message } }));\n        }\n\n        function unauthorized() {\n            return throwError(() => ({ status: 401, error: { message: 'Unauthorized' } }));\n        }\n\n        function notFound() {\n            return throwError(() => ({ status: 404, error: { message: 'Not Found' } }));\n        }\n\n        function basicDetails(account: any) {\n            const { id, title, firstName, lastName, email, role, status, isVerified } = account;\n            return { id, title, firstName, lastName, email, role, status, isVerified };\n        }\n\n        function isAuthenticated() {\n            return !!currentAccount();\n        }\n\n        function isAdmin() {\n            return currentAccount()?.role === Role.Admin;\n        }\n\n        function currentAccount() {\n            // Check if the authorization header exists and has a JWT token\n            if (!headers.get('Authorization')?.startsWith('Bearer ')) return null;\n\n            // Get the account from the JWT token (in a real app this would validate the token)\n            const jwtToken = JSON.parse(atob(headers.get('Authorization').split('.')[1]));\n            const account = accounts.find(x => x.id === jwtToken.id);\n            return account;\n        }\n\n        function idFromUrl() {\n            const urlParts = url.split('/');\n            return parseInt(urlParts[urlParts.length - 1]);\n        }\n\n        function newRequestId() {\n            return requests.length ? Math.max(...requests.map(x => x.id)) + 1 : 1;\n        }\n\n        function newRequestItemId() {\n            return requestItems.length ? Math.max(...requestItems.map(x => x.id)) + 1 : 1;\n        }\n\n        function newAccountId() {\n            return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n        }\n\n        function generateJwtToken(account: any) {\n            // Create a JWT token that expires in 15 minutes\n            const tokenPayload = {\n                id: account.id,\n                role: account.role,\n                email: account.email,\n                exp: Math.floor(Date.now() / 1000) + (15 * 60) // 15 minutes from now\n            };\n            return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;\n        }\n\n        function generateRefreshToken() {\n            return `fake-refresh-token-${Math.floor(Math.random() * 1000000000)}`;\n        }\n\n        function getRefreshToken() {\n            // Check Authorization header for refresh token\n            const authHeader = headers.get('Authorization');\n            if (!authHeader?.startsWith('Bearer ')) return null;\n            \n            return authHeader.split(' ')[1];\n        }\n\n        function newEmployeeId() {\n            return employees.length ? Math.max(...employees.map(x => x.id)) + 1 : 1;\n        }\n\n        function newDepartmentId() {\n            return departments.length ? Math.max(...departments.map(x => x.id)) + 1 : 1;\n        }\n    }\n}\n\nexport const fakeBackendProvider = {\n    provide: HTTP_INTERCEPTORS,\n    useClass: FakeBackendInterceptor,\n    multi: true\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}