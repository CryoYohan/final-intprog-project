{"ast":null,"code":"import { delay, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [{\n  id: 1,\n  name: 'HR',\n  description: 'Human Resources'\n}, {\n  id: 2,\n  name: 'IT',\n  description: 'Information Technology'\n}, {\n  id: 3,\n  name: 'Finance',\n  description: 'Finance Department'\n}, {\n  id: 4,\n  name: 'Marketing',\n  description: 'Marketing Department'\n}];\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [{\n  id: 1,\n  name: 'Manager',\n  description: 'Department Manager'\n}, {\n  id: 2,\n  name: 'Team Lead',\n  description: 'Team Leader'\n}, {\n  id: 3,\n  name: 'Senior Staff',\n  description: 'Senior Level Staff'\n}, {\n  id: 4,\n  name: 'Junior Staff',\n  description: 'Junior Level Staff'\n}];\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [{\n  id: 1,\n  name: 'Leave Request',\n  description: 'Request for leave or time off'\n}, {\n  id: 2,\n  name: 'Equipment Request',\n  description: 'Request for office equipment'\n}, {\n  id: 3,\n  name: 'Training Request',\n  description: 'Request for training or workshops'\n}, {\n  id: 4,\n  name: 'Other',\n  description: 'Other types of requests'\n}];\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      return handleRoute().pipe(delay(500),\n      // Simulate server delay\n      materialize(), dematerialize());\n      // Helper functions\n      function getWorkflowsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const internalId = parseInt(url.split('/').pop());\n        console.log('Looking for workflows with employeeId:', internalId);\n        const employee = employees.find(e => e.id === internalId);\n        if (!employee) {\n          console.log('Employee not found with internal id:', internalId);\n          return notFound();\n        }\n        const employeeWorkflows = workflows.filter(x => x.employeeId === employee.id);\n        console.log('Found workflows:', employeeWorkflows.length);\n        // Sort workflows in descending order\n        const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case url.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case url.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case url.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case url.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case url.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          case url.endsWith('/accounts') && method === 'POST':\n            return createAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n            return updateAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n            return deleteAccount();\n          // request routes\n          case url.endsWith('/requests') && method === 'GET':\n            return getRequests();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return getRequestById();\n          case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n            return getRequestsByEmployeeId();\n          case url.endsWith('/requests/my-requests') && method === 'GET':\n            return getMyRequests();\n          case url.endsWith('/requests') && method === 'POST':\n            return createRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return updateRequest();\n          case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n            return changeRequestStatus();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n            return deleteRequest();\n          // employee routes\n          case url.endsWith('/employees') && method === 'GET':\n            return getEmployees();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n            return getEmployeeById();\n          case url.endsWith('/employees') && method === 'POST':\n            return createEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n            return updateEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n            return deleteEmployee();\n          case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n            return transferEmployee();\n          // department routes\n          case url.endsWith('/departments') && method === 'GET':\n            return getDepartments();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n            return getDepartmentById();\n          case url.endsWith('/departments') && method === 'POST':\n            return createDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n            return updateDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n            return deleteDepartment();\n          // position routes\n          case url.endsWith('/positions') && method === 'GET':\n            return getPositions();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n            return getPositionById();\n          case url.endsWith('/positions') && method === 'POST':\n            return createPosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n            return updatePosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n            return deletePosition();\n          // request type routes\n          case url.endsWith('/request-types') && method === 'GET':\n            return getRequestTypes();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n            return getRequestTypeById();\n          case url.endsWith('/request-types') && method === 'POST':\n            return createRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n            return updateRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n            return deleteRequestType();\n          // workflow routes\n          case url.endsWith('/workflows') && method === 'GET':\n            return getWorkflows();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n            return getWorkflowById();\n          case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByEmployeeId();\n          case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByRequestId();\n          case url.endsWith('/workflows') && method === 'POST':\n            return createWorkflow();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n            return updateWorkflow();\n          case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n            return updateWorkflowStatus();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflow();\n          case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflowItem();\n          default:\n            return next.handle(request);\n        }\n      }\n      // Authentication functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) return error('Email or password is incorrect');\n        if (password !== account.password) return error('Email or password is incorrect');\n        if (!account.isVerified) return error('Please verify your email before logging in');\n        // Generate refresh token and save\n        const refreshToken = generateRefreshToken();\n        account.refreshTokens = account.refreshTokens || [];\n        account.refreshTokens.push(refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // Return basic details and tokens\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account),\n          refreshToken\n        }));\n      }\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return unauthorized();\n        const account = accounts.find(x => {\n          var _a;\n          return (_a = x.refreshTokens) === null || _a === void 0 ? void 0 : _a.includes(refreshToken);\n        });\n        if (!account) return unauthorized();\n        // Generate new refresh token and save\n        const newRefreshToken = generateRefreshToken();\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        account.refreshTokens.push(newRefreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // Return basic details and tokens\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account),\n          refreshToken: newRefreshToken\n        }));\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // display email already registered message in alert\n          setTimeout(() => {\n            alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, {\n              autoclose: false\n            });\n          }, 1000);\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // first registered account is an admin\n          account.role = Role.Admin;\n          account.status = 'Active'; // Admin accounts get active status\n        } else {\n          account.role = Role.User;\n          account.status = 'Inactive'; // User accounts get inacitve status upon creation\n        }\n\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display verification email in alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoclose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can get own profile and admin accounts can get all profiles\n        if (account.id !== currentAccount().id && !isAdmin()) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      // Request functions\n      function getRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        // Return all requests for admins, or filtered for regular users\n        let filteredRequests = [...requests];\n        if (!isAdmin()) {\n          const currentUserId = currentAccount().id;\n          filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n        }\n        return ok(filteredRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const requestEmployee = employees.find(e => e.id === request.employeeId);\n          const requestAccount = accounts.find(a => a.id === (requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.accountId));\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return {\n            id: request.id,\n            employeeId: (requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.employeeId) || '',\n            type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type || '',\n            status: request.status,\n            createdDate: request.createdDate,\n            items: items,\n            employee: {\n              id: requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.id,\n              employeeId: requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.employeeId,\n              fullName: requestAccount ? `${requestAccount.firstName} ${requestAccount.lastName}`.trim() : ''\n            }\n          };\n        }));\n      }\n      function getRequestById() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        // Check authorization\n        if (!isAdmin() && request.employeeId !== currentAccount().id) {\n          return unauthorized();\n        }\n        // Add related data\n        const items = requestItems.filter(item => item.requestId === request.id);\n        const employee = employees.find(e => e.id === request.employeeId);\n        const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        // Format employee name with proper capitalization\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: items.map(item => ({\n            id: item.id,\n            name: item.name,\n            quantity: item.quantity\n          })),\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            fullName: fullName,\n            employeeId: employee.employeeId\n          }) : null,\n          type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type\n        }));\n      }\n      function getRequestsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const internalId = parseInt(url.split('/').pop());\n        console.log('Looking for workflows with employeeId:', internalId);\n        const employee = employees.find(e => e.id === internalId);\n        if (!employee) {\n          console.log('Employee not found with internal id:', internalId);\n          return notFound();\n        }\n        const employeeWorkflows = workflows.filter(x => x.employeeId === employee.id);\n        console.log('Found workflows:', employeeWorkflows.length);\n        // Sort workflows in descending order\n        const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function getMyRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        const currentUserId = currentAccount().id;\n        const myRequests = requests.filter(x => x.employeeId === currentUserId);\n        return ok(myRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const employee = employees.find(e => e.id === request.employeeId);\n          const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return Object.assign(Object.assign({}, request), {\n            items,\n            employee: employee ? Object.assign(Object.assign({}, employee), {\n              fullName: `${(account === null || account === void 0 ? void 0 : account.firstName) || ''} ${(account === null || account === void 0 ? void 0 : account.lastName) || ''}`.trim(),\n              employeeId: employee.employeeId\n            }) : null,\n            type: requestType ? requestType.name : request.type\n          });\n        }));\n      }\n      function createRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        console.log('Received request data:', body);\n        // Find employee by employeeId if provided, otherwise use current user\n        let targetEmployee;\n        if (body.employeeId) {\n          // First try to find by internal ID\n          targetEmployee = employees.find(e => e.id === Number(body.employeeId));\n          if (!targetEmployee) {\n            // If not found, try to find by employee ID string\n            targetEmployee = employees.find(e => e.employeeId === body.employeeId);\n          }\n          if (!targetEmployee) return error('Employee not found');\n        } else {\n          const currentUser = currentAccount();\n          targetEmployee = employees.find(e => e.accountId === currentUser.id);\n          if (!targetEmployee) return error('Current user is not an employee');\n        }\n        const request = {\n          id: newRequestId(),\n          employeeId: targetEmployee.id,\n          type: body.type,\n          description: body.description || '',\n          status: 'Pending',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Validate required fields\n        if (!request.type) {\n          return error('Request type is required');\n        }\n        // Validate and process items if present\n        let requestItemsList = [];\n        if (body.items && Array.isArray(body.items)) {\n          try {\n            requestItemsList = body.items.map(item => {\n              if (!item.name || !item.quantity) {\n                throw new Error('Invalid item data');\n              }\n              return {\n                id: newRequestItemId(),\n                requestId: request.id,\n                name: item.name,\n                quantity: Number(item.quantity)\n              };\n            });\n          } catch (error) {\n            return error('Invalid item data provided');\n          }\n        }\n        // Save request and items\n        requests.push(request);\n        if (requestItemsList.length > 0) {\n          requestItems.push(...requestItemsList);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        const account = accounts.find(a => a.id === targetEmployee.accountId);\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItemsList,\n          employeeId: targetEmployee.employeeId,\n          employee: {\n            id: targetEmployee.id,\n            employeeId: targetEmployee.employeeId,\n            fullName: fullName\n          }\n        }));\n      }\n      function updateRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        console.log('Received update data:', body);\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Update basic request fields\n        Object.assign(request, {\n          type: body.type,\n          description: body.description || request.description,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Handle item changes\n        if (body.items) {\n          // Remove all existing items for this request\n          requestItems = requestItems.filter(item => item.requestId !== requestId);\n          // Add new/updated items\n          const newItems = body.items.map(item => ({\n            id: item.id || newRequestItemId(),\n            requestId: requestId,\n            name: item.name,\n            quantity: Number(item.quantity)\n          }));\n          requestItems.push(...newItems);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // Get related data for response\n        const employee = employees.find(e => e.id === request.employeeId);\n        const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === requestId),\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            fullName: fullName,\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function changeRequestStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        const newStatus = body.status;\n        Object.assign(request, {\n          status: newStatus,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // Get related data for response\n        const employee = employees.find(e => e.id === request.employeeId);\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === request.id),\n          employee: employee,\n          type: requestType.name\n        }));\n      }\n      function deleteRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Delete request and its items\n        requests = requests.filter(x => x.id !== requestId);\n        requestItems = requestItems.filter(x => x.requestId !== requestId);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        return ok();\n      }\n      // Employee functions\n      function getEmployees() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(employees.map(employee => {\n          const department = departments.find(d => d.id === employee.departmentId);\n          const account = accounts.find(a => a.id === employee.accountId);\n          return Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId,\n            fullName: account ? `${account.firstName} ${account.lastName}`.trim() : '',\n            department: department ? {\n              id: department.id,\n              name: department.name,\n              description: department.description\n            } : null\n          });\n        }));\n      }\n      function getEmployeeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employee = employees.find(x => x.id === employeeId);\n        if (!employee) return notFound();\n        // Get fresh department data\n        const department = departments.find(d => d.id === employee.departmentId);\n        if (!department) return error('Department not found');\n        const account = accounts.find(a => a.id === employee.accountId);\n        // Return complete employee data with fresh relations\n        return ok(Object.assign(Object.assign({}, employee), {\n          employeeId: employee.employeeId,\n          fullName: account ? `${account.firstName} ${account.lastName}`.trim() : '',\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function createEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        // Log the received data for debugging\n        console.log('Received employee data:', body);\n        // Validate department exists\n        const department = departments.find(d => d.id === Number(body.departmentId));\n        if (!department) return error('Department not found');\n        const employee = Object.assign(Object.assign({}, body), {\n          id: newEmployeeId(),\n          accountId: Number(body.accountId),\n          employeeId: body.employeeId,\n          departmentId: Number(body.departmentId),\n          position: body.position,\n          hireDate: body.hireDate,\n          salary: Number(body.salary),\n          status: body.status,\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Check each required field individually and log the result\n        const requiredFields = {\n          accountId: !!employee.accountId,\n          employeeId: !!employee.employeeId,\n          departmentId: !!employee.departmentId,\n          position: !!employee.position,\n          hireDate: !!employee.hireDate,\n          salary: !!employee.salary,\n          status: !!employee.status\n        };\n        console.log('Field validation results:', requiredFields);\n        // Check if any required field is missing\n        const missingFields = Object.entries(requiredFields).filter(([_, isValid]) => !isValid).map(([fieldName]) => fieldName);\n        if (missingFields.length > 0) {\n          return error(`Required fields are missing: ${missingFields.join(', ')}`);\n        }\n        // Validate account exists\n        const account = accounts.find(a => a.id === employee.accountId);\n        if (!account) return error('Account not found');\n        // Create workflow entry for new employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employee.id,\n          type: 'Added',\n          details: {\n            task: `New employee ${employee.employeeId} was added`,\n            additionalInfo: `Added to ${department.name} department as ${employee.position}`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(employee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function updateEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const oldEmployee = employees[employeeIndex];\n        const updatedEmployee = Object.assign(Object.assign(Object.assign({}, oldEmployee), body), {\n          id: employeeId,\n          accountId: body.accountId ? Number(body.accountId) : oldEmployee.accountId,\n          departmentId: body.departmentId ? Number(body.departmentId) : oldEmployee.departmentId,\n          position: body.position || oldEmployee.position,\n          salary: body.salary ? Number(body.salary) : oldEmployee.salary,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department exists if changed\n        if (body.departmentId) {\n          const department = departments.find(d => d.id === updatedEmployee.departmentId);\n          if (!department) return error('Department not found');\n        }\n        // Validate account exists if changed\n        if (body.accountId) {\n          const account = accounts.find(a => a.id === updatedEmployee.accountId);\n          if (!account) return error('Account not found');\n        }\n        const department = departments.find(d => d.id === updatedEmployee.departmentId);\n        const account = accounts.find(a => a.id === updatedEmployee.accountId);\n        // Create workflow entry for updated employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Updated',\n          details: {\n            task: `Employee ${employeeId} was updated`,\n            additionalInfo: `Updated in ${department.name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(updatedEmployee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedEmployee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function deleteEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const employee = employees[employeeIndex];\n        // Delete employee\n        employees = employees.filter(x => x.id !== employeeId);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(Object.assign(Object.assign({}, employee), {\n          status: 'Deleted'\n        }));\n      }\n      function transferEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const employee = employees[employeeIndex];\n        const newDepartmentId = body.departmentId;\n        // Validate department exists\n        const department = departments.find(d => d.id === newDepartmentId);\n        if (!department) return error('Department not found');\n        // Update employee department\n        employee.departmentId = newDepartmentId;\n        employee.lastModifiedDate = new Date().toISOString();\n        // Create workflow entry for employee transfer\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Transferred',\n          details: {\n            task: `Employee ${employeeId} was transferred to ${department.name} department`,\n            additionalInfo: `Transferred from ${employees.find(x => x.id === employee.departmentId).name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(employee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          status: 'Transferred'\n        }));\n      }\n      // Department functions\n      function getDepartments() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(departments.map(department => {\n          return Object.assign(Object.assign({}, department), {\n            id: department.id.toString(),\n            name: department.name,\n            description: department.description\n          });\n        }));\n      }\n      function getDepartmentById() {\n        if (!isAuthenticated()) return unauthorized();\n        const departmentId = idFromUrl();\n        const department = departments.find(x => x.id === departmentId);\n        if (!department) return notFound();\n        return ok(Object.assign(Object.assign({}, department), {\n          id: department.id.toString(),\n          name: department.name,\n          description: department.description\n        }));\n      }\n      function createDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const department = body;\n        // Validate department name is unique\n        if (departments.find(x => x.name === department.name)) {\n          return error('Department name already exists');\n        }\n        // Assign department id and save\n        department.id = newDepartmentId();\n        departments.push(department);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, department), {\n          id: department.id.toString()\n        }));\n      }\n      function updateDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        const oldDepartment = departments[departmentIndex];\n        const updatedDepartment = Object.assign(Object.assign(Object.assign({}, oldDepartment), body), {\n          id: departmentId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department name is unique\n        if (departments.find(x => x.name === updatedDepartment.name && x.id !== updatedDepartment.id)) {\n          return error('Department name already exists');\n        }\n        departments.push(updatedDepartment);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, updatedDepartment), {\n          id: updatedDepartment.id.toString()\n        }));\n      }\n      function deleteDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        const department = departments[departmentIndex];\n        // Delete department\n        departments = departments.filter(x => x.id !== departmentId);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, department), {\n          status: 'Deleted'\n        }));\n      }\n      // Position functions\n      function getPositions() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(positions.map(position => {\n          return Object.assign(Object.assign({}, position), {\n            id: position.id.toString(),\n            name: position.name,\n            description: position.description\n          });\n        }));\n      }\n      function getPositionById() {\n        if (!isAuthenticated()) return unauthorized();\n        const positionId = idFromUrl();\n        const position = positions.find(x => x.id === positionId);\n        if (!position) return notFound();\n        return ok(Object.assign(Object.assign({}, position), {\n          id: position.id.toString(),\n          name: position.name,\n          description: position.description\n        }));\n      }\n      function createPosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const position = body;\n        // Validate position name is unique\n        if (positions.find(x => x.name === position.name)) {\n          return error('Position name already exists');\n        }\n        // Assign position id and save\n        position.id = newPositionId();\n        positions.push(position);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, position), {\n          id: position.id.toString()\n        }));\n      }\n      function updatePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        const oldPosition = positions[positionIndex];\n        const updatedPosition = Object.assign(Object.assign(Object.assign({}, oldPosition), body), {\n          id: positionId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate position name is unique\n        if (positions.find(x => x.name === updatedPosition.name && x.id !== updatedPosition.id)) {\n          return error('Position name already exists');\n        }\n        positions.push(updatedPosition);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, updatedPosition), {\n          id: updatedPosition.id.toString()\n        }));\n      }\n      function deletePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        const position = positions[positionIndex];\n        // Delete position\n        positions = positions.filter(x => x.id !== positionId);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, position), {\n          status: 'Deleted'\n        }));\n      }\n      // Request type functions\n      function getRequestTypes() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(requestTypes.map(type => {\n          return Object.assign(Object.assign({}, type), {\n            id: type.id.toString(),\n            name: type.name,\n            description: type.description\n          });\n        }));\n      }\n      function getRequestTypeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const typeId = idFromUrl();\n        const type = requestTypes.find(x => x.id === typeId);\n        if (!type) return notFound();\n        return ok(Object.assign(Object.assign({}, type), {\n          id: type.id.toString(),\n          name: type.name,\n          description: type.description\n        }));\n      }\n      function createRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const type = body;\n        // Validate request type name is unique\n        if (requestTypes.find(x => x.name === type.name)) {\n          return error('Request type name already exists');\n        }\n        // Assign request type id and save\n        type.id = newRequestTypeId();\n        requestTypes.push(type);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, type), {\n          id: type.id.toString()\n        }));\n      }\n      function updateRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const typeId = idFromUrl();\n        const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n        if (typeIndex === -1) return notFound();\n        const oldType = requestTypes[typeIndex];\n        const updatedType = Object.assign(Object.assign(Object.assign({}, oldType), body), {\n          id: typeId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate request type name is unique\n        if (requestTypes.find(x => x.name === updatedType.name && x.id !== updatedType.id)) {\n          return error('Request type name already exists');\n        }\n        requestTypes.push(updatedType);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, updatedType), {\n          id: updatedType.id.toString()\n        }));\n      }\n      function deleteRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const typeId = idFromUrl();\n        const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n        if (typeIndex === -1) return notFound();\n        const type = requestTypes[typeIndex];\n        // Delete request type\n        requestTypes = requestTypes.filter(x => x.id !== typeId);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, type), {\n          status: 'Deleted'\n        }));\n      }\n      // Workflow functions\n      function getWorkflows() {\n        if (!isAuthenticated()) return unauthorized();\n        // Sort workflows in descending order by creation date\n        const sortedWorkflows = [...workflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function getWorkflowById() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflow = workflows.find(x => x.id === idFromUrl());\n        if (!workflow) return notFound();\n        const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n        return ok({\n          id: workflow.id.toString(),\n          type: workflow.type,\n          details: details,\n          status: workflow.status,\n          datetimecreated: workflow.datetimecreated || workflow.createdDate\n        });\n      }\n      function getWorkflowsByRequestId() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        console.log('Looking for workflows with requestId:', requestId);\n        const request = requests.find(x => x.id === requestId);\n        if (!request) {\n          console.log('Request not found with id:', requestId);\n          return notFound();\n        }\n        const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n        console.log('Found workflows:', requestWorkflows.length);\n        // Sort workflows in descending order\n        const sortedWorkflows = [...requestWorkflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function createWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        console.log('Received workflow data:', body);\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: body.employeeId,\n          type: body.type,\n          details: body.details,\n          status: body.status,\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Validate required fields\n        const requiredFields = {\n          employeeId: !!workflow.employeeId,\n          type: !!workflow.type,\n          details: !!workflow.details,\n          status: !!workflow.status\n        };\n        console.log('Field validation results:', requiredFields);\n        // Check if any required field is missing\n        const missingFields = Object.entries(requiredFields).filter(([_, isValid]) => !isValid).map(([fieldName]) => fieldName);\n        if (missingFields.length > 0) {\n          return error(`Required fields are missing: ${missingFields.join(', ')}`);\n        }\n        // Validate employee exists\n        const employee = employees.find(e => e.id === workflow.employeeId);\n        if (!employee) return error('Employee not found');\n        employees.push(workflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function updateWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        const oldWorkflow = workflows[workflowIndex];\n        const updatedWorkflow = Object.assign(Object.assign(Object.assign({}, oldWorkflow), body), {\n          id: workflowId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate employee exists\n        const employee = employees.find(e => e.id === updatedWorkflow.employeeId);\n        if (!employee) return error('Employee not found');\n        employees.push(updatedWorkflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedWorkflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function updateWorkflowStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        const newStatus = body.status;\n        Object.assign(workflow, {\n          status: newStatus,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          status: newStatus\n        }));\n      }\n      function deleteWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        const workflow = workflows[workflowIndex];\n        const employee = employees.find(e => e.id === workflow.employeeId);\n        // Delete workflow\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function deleteWorkflowItem() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        // Delete workflow item\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          status: 'Deleted'\n        }));\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();","map":{"version":3,"mappings":"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","names":["delay","materialize","dematerialize","Role","accountsKey","accounts","JSON","parse","localStorage","getItem","employeesKey","employees","departmentsKey","departments","id","name","description","requestsKey","requests","requestItemsKey","requestItems","workflowsKey","workflows","positionsKey","positions","requestTypesKey","requestTypes","FakeBackendInterceptor","constructor","alertService","intercept","request","next","url","method","headers","body","handleRoute","pipe","getWorkflowsByEmployeeId","isAuthenticated","unauthorized","internalId","parseInt","split","pop","console","log","employee","find","e","notFound","employeeWorkflows","filter","x","employeeId","length","sortedWorkflows","sort","a","b","dateA","Date","datetimecreated","createdDate","dateB","getTime","ok","map","workflow","details","task","additionalInfo","toString","type","status","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","getAccounts","match","getAccountById","createAccount","updateAccount","deleteAccount","getRequests","getRequestById","getRequestsByEmployeeId","getMyRequests","createRequest","updateRequest","changeRequestStatus","deleteRequest","getEmployees","getEmployeeById","createEmployee","updateEmployee","deleteEmployee","transferEmployee","getDepartments","getDepartmentById","createDepartment","updateDepartment","deleteDepartment","getPositions","getPositionById","createPosition","updatePosition","deletePosition","getRequestTypes","getRequestTypeById","createRequestType","updateRequestType","deleteRequestType","getWorkflows","getWorkflowById","getWorkflowsByRequestId","createWorkflow","updateWorkflow","updateWorkflowStatus","deleteWorkflow","deleteWorkflowItem","handle","email","password","account","error","isVerified","generateRefreshToken","refreshTokens","push","setItem","stringify","basicDetails","jwtToken","generateJwtToken","getRefreshToken","includes","newRefreshToken","setTimeout","info","location","origin","autoclose","newAccountId","role","Admin","User","dateCreated","toISOString","verificationToken","confirmPassword","verifyUrl","token","idFromUrl","currentAccount","isAdmin","filteredRequests","currentUserId","items","item","requestId","requestEmployee","requestAccount","accountId","requestType","t","typeId","fullName","firstName","lastName","trim","charAt","toUpperCase","slice","toLowerCase","quantity","Object","myRequests","targetEmployee","Number","currentUser","newRequestId","lastModifiedDate","requestItemsList","Array","isArray","Error","newRequestItemId","assign","newItems","newStatus","department","d","departmentId","departmentName","newEmployeeId","position","hireDate","salary","requiredFields","missingFields","entries","_","isValid","fieldName","join","newWorkflowId","employeeIndex","findIndex","oldEmployee","updatedEmployee","newDepartmentId","departmentIndex","oldDepartment","updatedDepartment","positionId","newPositionId","positionIndex","oldPosition","updatedPosition","newRequestTypeId","typeIndex","oldType","updatedType","requestWorkflows","workflowId","workflowIndex","oldWorkflow","updatedWorkflow","factory"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\n\nimport { AlertService } from '@app/_services';\nimport { Role } from '@app/_models';\n\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [\n    { id: 1, name: 'HR', description: 'Human Resources' },\n    { id: 2, name: 'IT', description: 'Information Technology' },\n    { id: 3, name: 'Finance', description: 'Finance Department' },\n    { id: 4, name: 'Marketing', description: 'Marketing Department' }\n];\n\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [\n    { id: 1, name: 'Manager', description: 'Department Manager' },\n    { id: 2, name: 'Team Lead', description: 'Team Leader' },\n    { id: 3, name: 'Senior Staff', description: 'Senior Level Staff' },\n    { id: 4, name: 'Junior Staff', description: 'Junior Level Staff' }\n];\n\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [\n    { id: 1, name: 'Leave Request', description: 'Request for leave or time off' },\n    { id: 2, name: 'Equipment Request', description: 'Request for office equipment' },\n    { id: 3, name: 'Training Request', description: 'Request for training or workshops' },\n    { id: 4, name: 'Other', description: 'Other types of requests' }\n];\n\n@Injectable()\nexport class FakeBackendInterceptor implements HttpInterceptor {\n    constructor(private alertService: AlertService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { url, method, headers, body } = request;\n        const alertService = this.alertService;\n\n        return handleRoute().pipe(\n            delay(500), // Simulate server delay\n            materialize(),\n            dematerialize()\n        );\n\n        // Helper functions\n        function getWorkflowsByEmployeeId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const internalId = parseInt(url.split('/').pop());\n            console.log('Looking for workflows with employeeId:', internalId);\n\n            const employee = employees.find(e => e.id === internalId);\n            if (!employee) {\n                console.log('Employee not found with internal id:', internalId);\n                return notFound();\n            }\n            \n            const employeeWorkflows = workflows.filter(x => x.employeeId === employee.id);\n            console.log('Found workflows:', employeeWorkflows.length);\n\n            // Sort workflows in descending order\n            const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        function handleRoute() {\n            switch (true) {\n                case url.endsWith('/accounts/authenticate') && method === 'POST':\n                    return authenticate();\n                case url.endsWith('/accounts/refresh-token') && method === 'POST':\n                    return refreshToken();\n                case url.endsWith('/accounts/revoke-token') && method === 'POST':\n                    return revokeToken();\n                case url.endsWith('/accounts/register') && method === 'POST':\n                    return register();\n                case url.endsWith('/accounts/verify-email') && method === 'POST':\n                    return verifyEmail();\n                case url.endsWith('/accounts') && method === 'GET':\n                    return getAccounts();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n                    return getAccountById();\n                case url.endsWith('/accounts') && method === 'POST':\n                    return createAccount();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n                    return updateAccount();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n                    return deleteAccount();\n                    \n                // request routes\n                case url.endsWith('/requests') && method === 'GET':\n                    return getRequests();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n                    return getRequestById();\n                case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n                    return getRequestsByEmployeeId();\n                case url.endsWith('/requests/my-requests') && method === 'GET':\n                    return getMyRequests();\n                case url.endsWith('/requests') && method === 'POST':\n                    return createRequest();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n                    return updateRequest();\n                case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n                    return changeRequestStatus();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequest();\n                    \n                // employee routes\n                case url.endsWith('/employees') && method === 'GET':\n                    return getEmployees();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n                    return getEmployeeById();\n                case url.endsWith('/employees') && method === 'POST':\n                    return createEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n                    return updateEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n                    return deleteEmployee();\n                case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n                    return transferEmployee();\n\n                // department routes\n                case url.endsWith('/departments') && method === 'GET':\n                    return getDepartments();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n                    return getDepartmentById();\n                case url.endsWith('/departments') && method === 'POST':\n                    return createDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n                    return updateDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n                    return deleteDepartment();\n                    \n                // position routes\n                case url.endsWith('/positions') && method === 'GET':\n                    return getPositions();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n                    return getPositionById();\n                case url.endsWith('/positions') && method === 'POST':\n                    return createPosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n                    return updatePosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n                    return deletePosition();\n\n                // request type routes\n                case url.endsWith('/request-types') && method === 'GET':\n                    return getRequestTypes();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n                    return getRequestTypeById();\n                case url.endsWith('/request-types') && method === 'POST':\n                    return createRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n                    return updateRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequestType();\n\n                // workflow routes\n                case url.endsWith('/workflows') && method === 'GET':\n                    return getWorkflows();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n                    return getWorkflowById();\n                case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByEmployeeId();\n                case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByRequestId();\n                case url.endsWith('/workflows') && method === 'POST':\n                    return createWorkflow();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n                    return updateWorkflow();\n                case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n                    return updateWorkflowStatus();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflow();\n                case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflowItem();\n                    \n                default:\n                    return next.handle(request);\n            }\n        }\n\n        // Authentication functions\n        function authenticate() {\n            const { email, password } = body;\n            const account = accounts.find(x => x.email === email);\n        \n            if (!account) return error('Email or password is incorrect');\n            if (password !== account.password) return error('Email or password is incorrect');\n            if (!account.isVerified) return error('Please verify your email before logging in');\n\n            // Generate refresh token and save\n            const refreshToken = generateRefreshToken();\n            account.refreshTokens = account.refreshTokens || [];\n            account.refreshTokens.push(refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // Return basic details and tokens\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account),\n                refreshToken\n            });\n        }\n\n        function refreshToken() {\n            const refreshToken = getRefreshToken();\n            \n            if (!refreshToken) return unauthorized();\n\n            const account = accounts.find(x => x.refreshTokens?.includes(refreshToken));\n            \n            if (!account) return unauthorized();\n\n            // Generate new refresh token and save\n            const newRefreshToken = generateRefreshToken();\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            account.refreshTokens.push(newRefreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // Return basic details and tokens\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account),\n                refreshToken: newRefreshToken\n            });\n        }\n\n        function revokeToken() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const refreshToken = getRefreshToken();\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n\n            // revoke token and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function register() {\n            const account = body;\n\n            if (accounts.find(x => x.email === account.email)) {\n                // display email already registered message in alert\n                setTimeout(() => {\n                    alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, { autoclose: false });\n                }, 1000);\n\n                // always return ok() response to prevent email enumeration\n                return ok();\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            if (account.id === 1) {\n                // first registered account is an admin\n                account.role = Role.Admin;\n                account.status = 'Active'; // Admin accounts get active status\n            } else {\n                account.role = Role.User;\n                account.status = 'Inactive'; // User accounts get inacitve status upon creation\n            }\n            account.dateCreated = new Date().toISOString();\n            account.verificationToken = new Date().getTime().toString();\n            account.isVerified = false;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // display verification email in alert\n            setTimeout(() => {\n                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, { autoclose: false });\n            }, 1000);\n\n            return ok();\n        }\n\n        function verifyEmail() {\n            const { token } = body;\n            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n\n            if (!account) return error('Verification failed');\n\n            // set is verified flag to true if token is valid\n            account.isVerified = true;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function getAccounts() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(accounts.map(x => basicDetails(x)));\n        }\n\n        function getAccountById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let account = accounts.find(x => x.id === idFromUrl());\n\n            // user accounts can get own profile and admin accounts can get all profiles\n            if (account.id !== currentAccount().id && !isAdmin()) {\n                return unauthorized();\n            }\n\n            return ok(basicDetails(account));\n        }\n\n        // Request functions\n        function getRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            // Return all requests for admins, or filtered for regular users\n            let filteredRequests = [...requests];\n            if (!isAdmin()) {\n                const currentUserId = currentAccount().id;\n                filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n            }\n\n            return ok(filteredRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const requestEmployee = employees.find(e => e.id === request.employeeId);\n                const requestAccount = accounts.find(a => a.id === requestEmployee?.accountId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n\n                return {\n                    id: request.id,\n                    employeeId: requestEmployee?.employeeId || '',\n                    type: requestType?.name || request.type || '',\n                    status: request.status,\n                    createdDate: request.createdDate,\n                    items: items,\n                    employee: {\n                        id: requestEmployee?.id,\n                        employeeId: requestEmployee?.employeeId,\n                        fullName: requestAccount ? `${requestAccount.firstName} ${requestAccount.lastName}`.trim() : ''\n                    }\n                };\n            }));\n        }\n\n        function getRequestById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            // Check authorization\n            if (!isAdmin() && request.employeeId !== currentAccount().id) {\n                return unauthorized();\n            }\n\n            // Add related data\n            const items = requestItems.filter(item => item.requestId === request.id);\n            const employee = employees.find(e => e.id === request.employeeId);\n            const account = accounts.find(a => a.id === employee?.accountId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n\n            // Format employee name with proper capitalization\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                items: items.map(item => ({\n                    id: item.id,\n                    name: item.name,\n                    quantity: item.quantity\n                })),\n                employee: employee ? {\n                    ...employee,\n                    fullName: fullName,\n                    employeeId: employee.employeeId\n                } : null,\n                type: requestType?.name || request.type\n            });\n        }\n\n        function getRequestsByEmployeeId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const internalId = parseInt(url.split('/').pop());\n            console.log('Looking for workflows with employeeId:', internalId);\n\n            const employee = employees.find(e => e.id === internalId);\n            if (!employee) {\n                console.log('Employee not found with internal id:', internalId);\n                return notFound();\n            }\n            \n            const employeeWorkflows = workflows.filter(x => x.employeeId === employee.id);\n            console.log('Found workflows:', employeeWorkflows.length);\n\n            // Sort workflows in descending order\n            const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        function getMyRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const currentUserId = currentAccount().id;\n            const myRequests = requests.filter(x => x.employeeId === currentUserId);\n\n            return ok(myRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const employee = employees.find(e => e.id === request.employeeId);\n                const account = accounts.find(a => a.id === employee?.accountId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                return {\n                    ...request,\n                    items,\n                    employee: employee ? {\n                        ...employee,\n                        fullName: `${account?.firstName || ''} ${account?.lastName || ''}`.trim(),\n                        employeeId: employee.employeeId\n                    } : null,\n                    type: requestType ? requestType.name : request.type\n                };\n            }));\n        }\n\n        function createRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            console.log('Received request data:', body);\n\n            // Find employee by employeeId if provided, otherwise use current user\n            let targetEmployee;\n            if (body.employeeId) {\n                // First try to find by internal ID\n                targetEmployee = employees.find(e => e.id === Number(body.employeeId));\n                if (!targetEmployee) {\n                    // If not found, try to find by employee ID string\n                    targetEmployee = employees.find(e => e.employeeId === body.employeeId);\n                }\n                if (!targetEmployee) return error('Employee not found');\n            } else {\n                const currentUser = currentAccount();\n                targetEmployee = employees.find(e => e.accountId === currentUser.id);\n                if (!targetEmployee) return error('Current user is not an employee');\n            }\n\n            const request = {\n                id: newRequestId(),\n                employeeId: targetEmployee.id,\n                type: body.type,\n                description: body.description || '',\n                status: 'Pending',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            // Validate required fields\n            if (!request.type) {\n                return error('Request type is required');\n            }\n\n            // Validate and process items if present\n            let requestItemsList = [];\n            if (body.items && Array.isArray(body.items)) {\n                try {\n                    requestItemsList = body.items.map(item => {\n                        if (!item.name || !item.quantity) {\n                            throw new Error('Invalid item data');\n                        }\n                        return {\n                            id: newRequestItemId(),\n                            requestId: request.id,\n                            name: item.name,\n                            quantity: Number(item.quantity)\n                        };\n                    });\n                } catch (error) {\n                    return error('Invalid item data provided');\n                }\n            }\n\n            // Save request and items\n            requests.push(request);\n            if (requestItemsList.length > 0) {\n                requestItems.push(...requestItemsList);\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n            }\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            const account = accounts.find(a => a.id === targetEmployee.accountId);\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                items: requestItemsList,\n                employeeId: targetEmployee.employeeId,\n                employee: {\n                    id: targetEmployee.id,\n                    employeeId: targetEmployee.employeeId,\n                    fullName: fullName\n                }\n            });\n        }\n\n        function updateRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            console.log('Received update data:', body);\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Update basic request fields\n            Object.assign(request, {\n                type: body.type,\n                description: body.description || request.description,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            // Handle item changes\n            if (body.items) {\n                // Remove all existing items for this request\n                requestItems = requestItems.filter(item => item.requestId !== requestId);\n\n                // Add new/updated items\n                const newItems = body.items.map(item => ({\n                    id: item.id || newRequestItemId(),\n                    requestId: requestId,\n                    name: item.name,\n                    quantity: Number(item.quantity)\n                }));\n\n                requestItems.push(...newItems);\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n            }\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            // Get related data for response\n            const employee = employees.find(e => e.id === request.employeeId);\n            const account = accounts.find(a => a.id === employee?.accountId);\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                items: requestItems.filter(item => item.requestId === requestId),\n                employee: employee ? {\n                    ...employee,\n                    fullName: fullName,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function changeRequestStatus() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            const newStatus = body.status;\n\n            Object.assign(request, {\n                status: newStatus,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            // Get related data for response\n            const employee = employees.find(e => e.id === request.employeeId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n\n            return ok({\n                ...request,\n                items: requestItems.filter(item => item.requestId === request.id),\n                employee: employee,\n                type: requestType.name\n            });\n        }\n\n        function deleteRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Delete request and its items\n            requests = requests.filter(x => x.id !== requestId);\n            requestItems = requestItems.filter(x => x.requestId !== requestId);\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n\n            return ok();\n        }\n\n        // Employee functions\n        function getEmployees() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(employees.map(employee => {\n                const department = departments.find(d => d.id === employee.departmentId);\n                const account = accounts.find(a => a.id === employee.accountId);\n                return {\n                    ...employee,\n                    employeeId: employee.employeeId,\n                    fullName: account ? `${account.firstName} ${account.lastName}`.trim() : '',\n                    department: department ? {\n                        id: department.id,\n                        name: department.name,\n                        description: department.description\n                    } : null\n                };\n            }));\n        }\n\n        function getEmployeeById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employee = employees.find(x => x.id === employeeId);\n            \n            if (!employee) return notFound();\n            \n            // Get fresh department data\n            const department = departments.find(d => d.id === employee.departmentId);\n            if (!department) return error('Department not found');\n            \n            const account = accounts.find(a => a.id === employee.accountId);\n            \n            // Return complete employee data with fresh relations\n            return ok({\n                ...employee,\n                employeeId: employee.employeeId,\n                fullName: account ? `${account.firstName} ${account.lastName}`.trim() : '',\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function createEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            // Log the received data for debugging\n            console.log('Received employee data:', body);\n\n            // Validate department exists\n            const department = departments.find(d => d.id === Number(body.departmentId));\n            if (!department) return error('Department not found');\n\n            const employee = {\n                ...body,\n                id: newEmployeeId(),\n                accountId: Number(body.accountId),\n                employeeId: body.employeeId,\n                departmentId: Number(body.departmentId),\n                position: body.position,\n                hireDate: body.hireDate,\n                salary: Number(body.salary),\n                status: body.status,\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Check each required field individually and log the result\n            const requiredFields = {\n                accountId: !!employee.accountId,\n                employeeId: !!employee.employeeId,\n                departmentId: !!employee.departmentId,\n                position: !!employee.position,\n                hireDate: !!employee.hireDate,\n                salary: !!employee.salary,\n                status: !!employee.status\n            };\n            \n            console.log('Field validation results:', requiredFields);\n            \n            // Check if any required field is missing\n            const missingFields = Object.entries(requiredFields)\n                .filter(([_, isValid]) => !isValid)\n                .map(([fieldName]) => fieldName);\n            \n            if (missingFields.length > 0) {\n                return error(`Required fields are missing: ${missingFields.join(', ')}`);\n            }\n\n            // Validate account exists\n            const account = accounts.find(a => a.id === employee.accountId);\n            if (!account) return error('Account not found');\n            \n            // Create workflow entry for new employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employee.id,\n                type: 'Added',\n                details: {\n                    task: `New employee ${employee.employeeId} was added`,\n                    additionalInfo: `Added to ${department.name} department as ${employee.position}`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(employee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...employee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function updateEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const oldEmployee = employees[employeeIndex];\n            const updatedEmployee = {\n                ...oldEmployee,\n                ...body,\n                id: employeeId,\n                accountId: body.accountId ? Number(body.accountId) : oldEmployee.accountId,\n                departmentId: body.departmentId ? Number(body.departmentId) : oldEmployee.departmentId,\n                position: body.position || oldEmployee.position,\n                salary: body.salary ? Number(body.salary) : oldEmployee.salary,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate department exists if changed\n            if (body.departmentId) {\n                const department = departments.find(d => d.id === updatedEmployee.departmentId);\n                if (!department) return error('Department not found');\n            }\n\n            // Validate account exists if changed\n            if (body.accountId) {\n                const account = accounts.find(a => a.id === updatedEmployee.accountId);\n                if (!account) return error('Account not found');\n            }\n            \n            const department = departments.find(d => d.id === updatedEmployee.departmentId);\n            const account = accounts.find(a => a.id === updatedEmployee.accountId);\n            \n            // Create workflow entry for updated employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Updated',\n                details: {\n                    task: `Employee ${employeeId} was updated`,\n                    additionalInfo: `Updated in ${department.name} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(updatedEmployee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...updatedEmployee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function deleteEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const employee = employees[employeeIndex];\n            \n            // Delete employee\n            employees = employees.filter(x => x.id !== employeeId);\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            \n            return ok({\n                ...employee,\n                status: 'Deleted'\n            });\n        }\n\n        function transferEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const employee = employees[employeeIndex];\n            const newDepartmentId = body.departmentId;\n            \n            // Validate department exists\n            const department = departments.find(d => d.id === newDepartmentId);\n            if (!department) return error('Department not found');\n\n            // Update employee department\n            employee.departmentId = newDepartmentId;\n            employee.lastModifiedDate = new Date().toISOString();\n            \n            // Create workflow entry for employee transfer\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Transferred',\n                details: {\n                    task: `Employee ${employeeId} was transferred to ${department.name} department`,\n                    additionalInfo: `Transferred from ${employees.find(x => x.id === employee.departmentId).name} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(employee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...employee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                status: 'Transferred'\n            });\n        }\n\n        // Department functions\n        function getDepartments() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(departments.map(department => {\n                return {\n                    ...department,\n                    id: department.id.toString(),\n                    name: department.name,\n                    description: department.description\n                };\n            }));\n        }\n\n        function getDepartmentById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            const department = departments.find(x => x.id === departmentId);\n            \n            if (!department) return notFound();\n            \n            return ok({\n                ...department,\n                id: department.id.toString(),\n                name: department.name,\n                description: department.description\n            });\n        }\n\n        function createDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const department = body;\n            \n            // Validate department name is unique\n            if (departments.find(x => x.name === department.name)) {\n                return error('Department name already exists');\n            }\n            \n            // Assign department id and save\n            department.id = newDepartmentId();\n            departments.push(department);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...department,\n                id: department.id.toString()\n            });\n        }\n\n        function updateDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\n            \n            if (departmentIndex === -1) return notFound();\n            \n            const oldDepartment = departments[departmentIndex];\n            const updatedDepartment = {\n                ...oldDepartment,\n                ...body,\n                id: departmentId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate department name is unique\n            if (departments.find(x => x.name === updatedDepartment.name && x.id !== updatedDepartment.id)) {\n                return error('Department name already exists');\n            }\n\n            departments.push(updatedDepartment);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...updatedDepartment,\n                id: updatedDepartment.id.toString()\n            });\n        }\n\n        function deleteDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const departmentId = idFromUrl();\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\n            \n            if (departmentIndex === -1) return notFound();\n            \n            const department = departments[departmentIndex];\n            \n            // Delete department\n            departments = departments.filter(x => x.id !== departmentId);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...department,\n                status: 'Deleted'\n            });\n        }\n\n        // Position functions\n        function getPositions() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(positions.map(position => {\n                return {\n                    ...position,\n                    id: position.id.toString(),\n                    name: position.name,\n                    description: position.description\n                };\n            }));\n        }\n\n        function getPositionById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            const position = positions.find(x => x.id === positionId);\n            \n            if (!position) return notFound();\n            \n            return ok({\n                ...position,\n                id: position.id.toString(),\n                name: position.name,\n                description: position.description\n            });\n        }\n\n        function createPosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const position = body;\n            \n            // Validate position name is unique\n            if (positions.find(x => x.name === position.name)) {\n                return error('Position name already exists');\n            }\n            \n            // Assign position id and save\n            position.id = newPositionId();\n            positions.push(position);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...position,\n                id: position.id.toString()\n            });\n        }\n\n        function updatePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            const positionIndex = positions.findIndex(x => x.id === positionId);\n            \n            if (positionIndex === -1) return notFound();\n            \n            const oldPosition = positions[positionIndex];\n            const updatedPosition = {\n                ...oldPosition,\n                ...body,\n                id: positionId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate position name is unique\n            if (positions.find(x => x.name === updatedPosition.name && x.id !== updatedPosition.id)) {\n                return error('Position name already exists');\n            }\n\n            positions.push(updatedPosition);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...updatedPosition,\n                id: updatedPosition.id.toString()\n            });\n        }\n\n        function deletePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const positionId = idFromUrl();\n            const positionIndex = positions.findIndex(x => x.id === positionId);\n            \n            if (positionIndex === -1) return notFound();\n            \n            const position = positions[positionIndex];\n            \n            // Delete position\n            positions = positions.filter(x => x.id !== positionId);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...position,\n                status: 'Deleted'\n            });\n        }\n\n        // Request type functions\n        function getRequestTypes() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(requestTypes.map(type => {\n                return {\n                    ...type,\n                    id: type.id.toString(),\n                    name: type.name,\n                    description: type.description\n                };\n            }));\n        }\n\n        function getRequestTypeById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const typeId = idFromUrl();\n            const type = requestTypes.find(x => x.id === typeId);\n            \n            if (!type) return notFound();\n            \n            return ok({\n                ...type,\n                id: type.id.toString(),\n                name: type.name,\n                description: type.description\n            });\n        }\n\n        function createRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const type = body;\n            \n            // Validate request type name is unique\n            if (requestTypes.find(x => x.name === type.name)) {\n                return error('Request type name already exists');\n            }\n            \n            // Assign request type id and save\n            type.id = newRequestTypeId();\n            requestTypes.push(type);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...type,\n                id: type.id.toString()\n            });\n        }\n\n        function updateRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const typeId = idFromUrl();\n            const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n            \n            if (typeIndex === -1) return notFound();\n            \n            const oldType = requestTypes[typeIndex];\n            const updatedType = {\n                ...oldType,\n                ...body,\n                id: typeId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate request type name is unique\n            if (requestTypes.find(x => x.name === updatedType.name && x.id !== updatedType.id)) {\n                return error('Request type name already exists');\n            }\n\n            requestTypes.push(updatedType);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...updatedType,\n                id: updatedType.id.toString()\n            });\n        }\n\n        function deleteRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const typeId = idFromUrl();\n            const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n            \n            if (typeIndex === -1) return notFound();\n            \n            const type = requestTypes[typeIndex];\n            \n            // Delete request type\n            requestTypes = requestTypes.filter(x => x.id !== typeId);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...type,\n                status: 'Deleted'\n            });\n        }\n\n        // Workflow functions\n        function getWorkflows() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            // Sort workflows in descending order by creation date\n            const sortedWorkflows = [...workflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        function getWorkflowById() {\n            if (!isAuthenticated()) return unauthorized();\n            const workflow = workflows.find(x => x.id === idFromUrl());\n            if (!workflow) return notFound();\n            \n            const details = typeof workflow.details === 'object' ? \n                `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                workflow.details || '';\n\n            return ok({\n                id: workflow.id.toString(),\n                type: workflow.type,\n                details: details,\n                status: workflow.status,\n                datetimecreated: workflow.datetimecreated || workflow.createdDate\n            });\n        }\n\n        function getWorkflowsByRequestId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const requestId = idFromUrl();\n            console.log('Looking for workflows with requestId:', requestId);\n\n            const request = requests.find(x => x.id === requestId);\n            if (!request) {\n                console.log('Request not found with id:', requestId);\n                return notFound();\n            }\n            \n            const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n            console.log('Found workflows:', requestWorkflows.length);\n\n            // Sort workflows in descending order\n            const sortedWorkflows = [...requestWorkflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        function createWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            console.log('Received workflow data:', body);\n\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: body.employeeId,\n                type: body.type,\n                details: body.details,\n                status: body.status,\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate required fields\n            const requiredFields = {\n                employeeId: !!workflow.employeeId,\n                type: !!workflow.type,\n                details: !!workflow.details,\n                status: !!workflow.status\n            };\n            \n            console.log('Field validation results:', requiredFields);\n            \n            // Check if any required field is missing\n            const missingFields = Object.entries(requiredFields)\n                .filter(([_, isValid]) => !isValid)\n                .map(([fieldName]) => fieldName);\n            \n            if (missingFields.length > 0) {\n                return error(`Required fields are missing: ${missingFields.join(', ')}`);\n            }\n\n            // Validate employee exists\n            const employee = employees.find(e => e.id === workflow.employeeId);\n            if (!employee) return error('Employee not found');\n            \n            employees.push(workflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function updateWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const workflowId = idFromUrl();\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n            \n            if (workflowIndex === -1) return notFound();\n            \n            const oldWorkflow = workflows[workflowIndex];\n            const updatedWorkflow = {\n                ...oldWorkflow,\n                ...body,\n                id: workflowId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate employee exists\n            const employee = employees.find(e => e.id === updatedWorkflow.employeeId);\n            if (!employee) return error('Employee not found');\n            \n            employees.push(updatedWorkflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...updatedWorkflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function updateWorkflowStatus() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflow = workflows.find(x => x.id === workflowId);\n            \n            if (!workflow) return notFound();\n            \n            const newStatus = body.status;\n\n            Object.assign(workflow, {\n                status: newStatus,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok({\n                ...workflow,\n                status: newStatus\n            });\n        }\n\n        function deleteWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n            \n            if (workflowIndex === -1) return notFound();\n            \n            const workflow = workflows[workflowIndex];\n            const employee = employees.find(e => e.id === workflow.employeeId);\n            \n            // Delete workflow\n            workflows = workflows.filter(x => x.id !== workflowId);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function deleteWorkflowItem() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflow = workflows.find(x => x.id === workflowId);\n            \n            if (!workflow) return notFound();\n            \n            // Delete workflow item\n            workflows = workflows.filter(x => x.id !== workflowId);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                status: 'Deleted'\n            });\n        }\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}