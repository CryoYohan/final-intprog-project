{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { WorkflowType } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services\";\nimport * as i4 from \"@angular/common\";\nfunction AddWorkflowComponent_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const type_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", type_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(type_r4);\n  }\n}\nfunction AddWorkflowComponent_div_12_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Type is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddWorkflowComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, AddWorkflowComponent_div_12_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.type.errors.required);\n  }\n}\nfunction AddWorkflowComponent_div_18_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Task is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddWorkflowComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtemplate(1, AddWorkflowComponent_div_18_div_1_Template, 2, 0, \"div\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r2.form.get(\"details.task\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors.required);\n  }\n}\nfunction AddWorkflowComponent_span_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 18);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nconst _c1 = function (a0) {\n  return {\n    employeeId: a0\n  };\n};\nexport let AddWorkflowComponent = /*#__PURE__*/(() => {\n  class AddWorkflowComponent {\n    constructor(formBuilder, route, router, workflowService, alertService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.workflowService = workflowService;\n      this.alertService = alertService;\n      this.loading = false;\n      this.submitted = false;\n      this.employeeId = null;\n      this.workflowTypes = Object.values(WorkflowType);\n      // Get employeeId from query params\n      this.route.queryParams.subscribe(params => {\n        this.employeeId = params['employeeId'];\n        if (!this.employeeId) {\n          this.alertService.error('Employee ID is required');\n          this.router.navigate(['/workflows']);\n        }\n      });\n    }\n    ngOnInit() {\n      this.form = this.formBuilder.group({\n        type: ['', Validators.required],\n        details: this.formBuilder.group({\n          task: ['', Validators.required],\n          additionalInfo: ['']\n        })\n      });\n    }\n    // convenience getter for easy access to form fields\n    get f() {\n      return this.form.controls;\n    }\n    onSubmit() {\n      this.submitted = true;\n      this.alertService.clear();\n      // stop here if form is invalid\n      if (this.form.invalid) {\n        return;\n      }\n      this.loading = true;\n      const workflowData = Object.assign(Object.assign({}, this.form.value), {\n        employeeId: Number(this.employeeId),\n        status: 'Pending'\n      });\n      this.workflowService.create(workflowData).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Workflow created successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['../'], {\n            relativeTo: this.route,\n            queryParams: {\n              employeeId: this.employeeId\n            }\n          });\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n  }\n  AddWorkflowComponent.ɵfac = function AddWorkflowComponent_Factory(t) {\n    return new (t || AddWorkflowComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.WorkflowService), i0.ɵɵdirectiveInject(i3.AlertService));\n  };\n  AddWorkflowComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddWorkflowComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 29,\n    vars: 15,\n    consts: [[1, \"card\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [1, \"form-label\"], [\"formControlName\", \"type\", 1, \"form-control\", 3, \"ngClass\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"formGroupName\", \"details\"], [\"type\", \"text\", \"formControlName\", \"task\", 1, \"form-control\", 3, \"ngClass\"], [\"formControlName\", \"additionalInfo\", \"rows\", \"3\", 1, \"form-control\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-1\", 4, \"ngIf\"], [\"routerLink\", \"/workflows\", 1, \"btn\", \"btn-link\", 3, \"queryParams\"], [3, \"value\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"spinner-border\", \"spinner-border-sm\", \"me-1\"]],\n    template: function AddWorkflowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"Create Workflow\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 0)(3, \"div\", 1)(4, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function AddWorkflowComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(5, \"div\", 3)(6, \"label\", 4);\n        i0.ɵɵtext(7, \"Workflow Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"select\", 5)(9, \"option\", 6);\n        i0.ɵɵtext(10, \"Select Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, AddWorkflowComponent_option_11_Template, 2, 2, \"option\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(12, AddWorkflowComponent_div_12_Template, 2, 1, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 9)(14, \"div\", 3)(15, \"label\", 4);\n        i0.ɵɵtext(16, \"Task\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"input\", 10);\n        i0.ɵɵtemplate(18, AddWorkflowComponent_div_18_Template, 2, 1, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 3)(20, \"label\", 4);\n        i0.ɵɵtext(21, \"Additional Information\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"textarea\", 11);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(23, \"div\", 3)(24, \"button\", 12);\n        i0.ɵɵtemplate(25, AddWorkflowComponent_span_25_Template, 1, 0, \"span\", 13);\n        i0.ɵɵtext(26, \" Create Workflow \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"a\", 14);\n        i0.ɵɵtext(28, \"Cancel\");\n        i0.ɵɵelementEnd()()()()();\n      }\n      if (rf & 2) {\n        let tmp_4_0;\n        let tmp_5_0;\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.submitted && ctx.f.type.errors));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.workflowTypes);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.type.errors);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx.submitted && ((tmp_4_0 = ctx.form.get(\"details.task\")) == null ? null : tmp_4_0.errors)));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ((tmp_5_0 = ctx.form.get(\"details.task\")) == null ? null : tmp_5_0.errors));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"queryParams\", i0.ɵɵpureFunction1(13, _c1, ctx.employeeId));\n      }\n    },\n    dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i2.RouterLink],\n    encapsulation: 2\n  });\n  return AddWorkflowComponent;\n})();","map":{"version":3,"mappings":"AAEA,SAAiCA,UAAU,QAAQ,gBAAgB;AACnE,SAASC,KAAK,QAAQ,gBAAgB;AAGtC,SAASC,YAAY,QAAQ,cAAc;;;;;;;;ICGvBC,kCAA0D;IAAAA,YAAQ;IAAAA,iBAAS;;;;IAAhCA,+BAAc;IAACA,eAAQ;IAARA,6BAAQ;;;;;IAGlEA,2BAAoC;IAAAA,gCAAgB;IAAAA,iBAAM;;;;;IAD9DA,+BAAiE;IAC7DA,6EAA0D;IAC9DA,iBAAM;;;;IADIA,eAA4B;IAA5BA,oDAA4B;;;;;IAU9BA,2BAAwD;IAAAA,gCAAgB;IAAAA,iBAAM;;;;;IADlFA,+BAAoF;IAChFA,6EAA8E;IAClFA,iBAAM;;;;;IADIA,eAAgD;IAAhDA,2IAAgD;;;;;IAY1DA,2BAA2E;;;;;;;;;;;;;ADzB/F,WAAaC,oBAAoB;EAA3B,MAAOA,oBAAoB;IAO7BC,YACYC,WAAwB,EACxBC,KAAqB,EACrBC,MAAc,EACdC,eAAgC,EAChCC,YAA0B;MAJ1B,gBAAW,GAAXJ,WAAW;MACX,UAAK,GAALC,KAAK;MACL,WAAM,GAANC,MAAM;MACN,oBAAe,GAAfC,eAAe;MACf,iBAAY,GAAZC,YAAY;MAVxB,YAAO,GAAG,KAAK;MACf,cAAS,GAAG,KAAK;MACjB,eAAU,GAAkB,IAAI;MAChC,kBAAa,GAAGC,MAAM,CAACC,MAAM,CAACV,YAAY,CAAC;MASvC;MACA,IAAI,CAACK,KAAK,CAACM,WAAW,CAACC,SAAS,CAACC,MAAM,IAAG;QACtC,IAAI,CAACC,UAAU,GAAGD,MAAM,CAAC,YAAY,CAAC;QACtC,IAAI,CAAC,IAAI,CAACC,UAAU,EAAE;UAClB,IAAI,CAACN,YAAY,CAACO,KAAK,CAAC,yBAAyB,CAAC;UAClD,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;;MAE5C,CAAC,CAAC;IACN;IAEAC,QAAQ;MACJ,IAAI,CAACC,IAAI,GAAG,IAAI,CAACd,WAAW,CAACe,KAAK,CAAC;QAC/BC,IAAI,EAAE,CAAC,EAAE,EAAEtB,UAAU,CAACuB,QAAQ,CAAC;QAC/BC,OAAO,EAAE,IAAI,CAAClB,WAAW,CAACe,KAAK,CAAC;UAC5BI,IAAI,EAAE,CAAC,EAAE,EAAEzB,UAAU,CAACuB,QAAQ,CAAC;UAC/BG,cAAc,EAAE,CAAC,EAAE;SACtB;OACJ,CAAC;IACN;IAEA;IACA,IAAIC,CAAC;MAAK,OAAO,IAAI,CAACP,IAAI,CAACQ,QAAQ;IAAE;IAErCC,QAAQ;MACJ,IAAI,CAACC,SAAS,GAAG,IAAI;MACrB,IAAI,CAACpB,YAAY,CAACqB,KAAK,EAAE;MAEzB;MACA,IAAI,IAAI,CAACX,IAAI,CAACY,OAAO,EAAE;QACnB;;MAGJ,IAAI,CAACC,OAAO,GAAG,IAAI;MAEnB,MAAMC,YAAY,mCACX,IAAI,CAACd,IAAI,CAACe,KAAK;QAClBnB,UAAU,EAAEoB,MAAM,CAAC,IAAI,CAACpB,UAAU,CAAC;QACnCqB,MAAM,EAAE;MAAS,EACpB;MAED,IAAI,CAAC5B,eAAe,CAAC6B,MAAM,CAACJ,YAAY,CAAC,CACpCK,IAAI,CAACtC,KAAK,EAAE,CAAC,CACba,SAAS,CAAC;QACP0B,IAAI,EAAE,MAAK;UACP,IAAI,CAAC9B,YAAY,CAAC+B,OAAO,CAAC,+BAA+B,EAAE;YAAEC,oBAAoB,EAAE;UAAI,CAAE,CAAC;UAC1F,IAAI,CAAClC,MAAM,CAACU,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE;YAC1ByB,UAAU,EAAE,IAAI,CAACpC,KAAK;YACtBM,WAAW,EAAE;cAAEG,UAAU,EAAE,IAAI,CAACA;YAAU;WAC7C,CAAC;QACN,CAAC;QACDC,KAAK,EAAEA,KAAK,IAAG;UACX,IAAI,CAACP,YAAY,CAACO,KAAK,CAACA,KAAK,CAAC;UAC9B,IAAI,CAACgB,OAAO,GAAG,KAAK;QACxB;OACH,CAAC;IACV;;;qBArES7B,oBAAoB;EAAA;;UAApBA,oBAAoB;IAAAwC;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCTjC7C,0BAAI;QAAAA,+BAAe;QAAAA,iBAAK;QAExBA,8BAAkB;QAEeA;UAAA,OAAY8C,cAAU;QAAA,EAAC;QAC5C9C,8BAAkB;QACYA,6BAAa;QAAAA,iBAAQ;QAC/CA,iCAA6G;QACxFA,4BAAW;QAAAA,iBAAS;QACrCA,6EAA2E;QAC/EA,iBAAS;QACTA,uEAEM;QACVA,iBAAM;QAENA,+BAA6B;QAEKA,qBAAI;QAAAA,iBAAQ;QACtCA,6BACqF;QACrFA,uEAEM;QACVA,iBAAM;QAENA,+BAAkB;QACYA,uCAAsB;QAAAA,iBAAQ;QACxDA,gCAAoF;QACxFA,iBAAM;QAGVA,+BAAkB;QAEVA,0EAA2E;QAC3EA,kCACJ;QAAAA,iBAAS;QACTA,8BAAyF;QAAAA,uBAAM;QAAAA,iBAAI;;;;;QAjCrGA,eAAkB;QAAlBA,oCAAkB;QAGoCA,eAAwD;QAAxDA,wFAAwD;QAE/EA,eAAgB;QAAhBA,2CAAgB;QAEvCA,eAAgC;QAAhCA,yDAAgC;QAS3BA,eAA2E;QAA3EA,kJAA2E;QAC5EA,eAAmD;QAAnDA,kHAAmD;QAYrDA,eAAoB;QAApBA,sCAAoB;QACjBA,eAAa;QAAbA,kCAAa;QAGGA,eAAwC;QAAxCA,yEAAwC;;;;;;SD5BtEC,oBAAoB;AAAA","names":["Validators","first","WorkflowType","i0","AddWorkflowComponent","constructor","formBuilder","route","router","workflowService","alertService","Object","values","queryParams","subscribe","params","employeeId","error","navigate","ngOnInit","form","group","type","required","details","task","additionalInfo","f","controls","onSubmit","submitted","clear","invalid","loading","workflowData","value","Number","status","create","pipe","next","success","keepAfterRouteChange","relativeTo","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\workflows\\add.component.ts","D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\workflows\\add.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { WorkflowService, AlertService } from '@app/_services';\r\nimport { WorkflowType } from '@app/_models';\r\n\r\n@Component({ templateUrl: 'add.component.html' })\r\nexport class AddWorkflowComponent implements OnInit {\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n    employeeId: string | null = null;\r\n    workflowTypes = Object.values(WorkflowType);\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private workflowService: WorkflowService,\r\n        private alertService: AlertService\r\n    ) {\r\n        // Get employeeId from query params\r\n        this.route.queryParams.subscribe(params => {\r\n            this.employeeId = params['employeeId'];\r\n            if (!this.employeeId) {\r\n                this.alertService.error('Employee ID is required');\r\n                this.router.navigate(['/workflows']);\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            type: ['', Validators.required],\r\n            details: this.formBuilder.group({\r\n                task: ['', Validators.required],\r\n                additionalInfo: ['']\r\n            })\r\n        });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n\r\n        const workflowData = {\r\n            ...this.form.value,\r\n            employeeId: Number(this.employeeId),\r\n            status: 'Pending'\r\n        };\r\n\r\n        this.workflowService.create(workflowData)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Workflow created successfully', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../'], { \r\n                        relativeTo: this.route,\r\n                        queryParams: { employeeId: this.employeeId }\r\n                    });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n} ","<h1>Create Workflow</h1>\r\n\r\n<div class=\"card\">\r\n    <div class=\"card-body\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"mb-3\">\r\n                <label class=\"form-label\">Workflow Type</label>\r\n                <select formControlName=\"type\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.type.errors }\">\r\n                    <option value=\"\">Select Type</option>\r\n                    <option *ngFor=\"let type of workflowTypes\" [value]=\"type\">{{type}}</option>\r\n                </select>\r\n                <div *ngIf=\"submitted && f.type.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.type.errors.required\">Type is required</div>\r\n                </div>\r\n            </div>\r\n\r\n            <div formGroupName=\"details\">\r\n                <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Task</label>\r\n                    <input type=\"text\" formControlName=\"task\" class=\"form-control\" \r\n                           [ngClass]=\"{ 'is-invalid': submitted && form.get('details.task')?.errors }\" />\r\n                    <div *ngIf=\"submitted && form.get('details.task')?.errors\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"form.get('details.task')?.errors?.required\">Task is required</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                    <label class=\"form-label\">Additional Information</label>\r\n                    <textarea formControlName=\"additionalInfo\" class=\"form-control\" rows=\"3\"></textarea>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"mb-3\">\r\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm me-1\"></span>\r\n                    Create Workflow\r\n                </button>\r\n                <a routerLink=\"/workflows\" [queryParams]=\"{employeeId: employeeId}\" class=\"btn btn-link\">Cancel</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div> "]},"metadata":{},"sourceType":"module","externalDependencies":[]}