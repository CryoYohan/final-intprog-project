{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/accounts`;\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.accountSubject = new BehaviorSubject(null);\n      this.account = this.accountSubject.asObservable();\n    }\n    get accountValue() {\n      return this.accountSubject.value;\n    }\n    login(email, password) {\n      return this.http.post(`${baseUrl}/authenticate`, {\n        email,\n        password\n      }, {\n        withCredentials: true\n      }).pipe(map(account => {\n        this.accountSubject.next(account);\n        this.startRefreshTokenTimer();\n        return account;\n      }));\n    }\n    logout() {\n      this.http.post(`${baseUrl}/revoke-token`, {}, {\n        withCredentials: true\n      }).subscribe();\n      this.stopRefreshTokenTimer();\n      this.accountSubject.next(null);\n      this.router.navigate(['/account/login']);\n    }\n    refreshToken() {\n      return this.http.post(`${baseUrl}/refresh-token`, {}, {\n        withCredentials: true\n      }).pipe(map(account => {\n        this.accountSubject.next(account);\n        this.startRefreshTokenTimer();\n        return account;\n      }));\n    }\n    register(account) {\n      return this.http.post(`${baseUrl}/register`, account, {\n        observe: 'response'\n      });\n    }\n    verifyEmail(token) {\n      return this.http.post(`${baseUrl}/verify-email`, {\n        token\n      });\n    }\n    forgotPassword(email) {\n      return this.http.post(`${baseUrl}/forgot-password`, {\n        email\n      });\n    }\n    validateResetToken(token) {\n      return this.http.post(`${baseUrl}/validate-reset-token`, {\n        token\n      });\n    }\n    resetPassword(token, password, confirmPassword) {\n      return this.http.post(`${baseUrl}/reset-password`, {\n        token,\n        password,\n        confirmPassword\n      });\n    }\n    getAll() {\n      return this.http.get(baseUrl);\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n    create(params) {\n      return this.http.post(baseUrl, params);\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params).pipe(map(account => {\n        var _a;\n        // update the current account if it was updated\n        if (account.id === ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          // publish updated account to subscribers\n          const updatedAccount = Object.assign(Object.assign({}, this.accountValue), account);\n          this.accountSubject.next(updatedAccount);\n        }\n        return account;\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`).pipe(map(x => {\n        var _a;\n        // auto logout if the logged in account deleted their own record\n        if (id === ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          this.logout();\n        }\n        return x;\n      }));\n    }\n    startRefreshTokenTimer() {\n      // parse json object from base64 encoded jwt token\n      const jwtToken = JSON.parse(atob(this.accountValue.jwtToken.split('.')[1]));\n      // set a timeout to refresh the token a minute before it expires\n      const expires = new Date(jwtToken.exp * 1000);\n      const timeout = expires.getTime() - Date.now() - 60 * 1000;\n      this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n    }\n    stopRefreshTokenTimer() {\n      clearTimeout(this.refreshTokenTimeout);\n    }\n  }\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":{"version":3,"mappings":"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","names":["BehaviorSubject","map","environment","baseUrl","apiUrl","AccountService","constructor","router","http","accountSubject","account","asObservable","accountValue","value","login","email","password","post","withCredentials","pipe","next","startRefreshTokenTimer","logout","subscribe","stopRefreshTokenTimer","navigate","refreshToken","register","observe","verifyEmail","token","forgotPassword","validateResetToken","resetPassword","confirmPassword","getAll","get","getById","id","create","params","update","put","updatedAccount","delete","x","jwtToken","JSON","parse","atob","split","expires","Date","exp","timeout","getTime","now","refreshTokenTimeout","setTimeout","clearTimeout","factory","providedIn"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\_services\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, finalize } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport { Account } from '@app/_models';\n\nconst baseUrl = `${environment.apiUrl}/accounts`;\n\n@Injectable({ providedIn: 'root' })\nexport class AccountService {\n    private accountSubject: BehaviorSubject<Account>;\n    public account: Observable<Account>;\n\n    constructor(\n        private router: Router,\n        private http: HttpClient\n    ) {\n        this.accountSubject = new BehaviorSubject<Account>(null);\n        this.account = this.accountSubject.asObservable();\n    }\n\n    public get accountValue(): Account {\n        return this.accountSubject.value;\n    }\n\n    login(email: string, password: string) {\n        return this.http.post<Account>(`${baseUrl}/authenticate`, { email, password }, { withCredentials: true })\n            .pipe(map(account => {\n                this.accountSubject.next(account);\n                this.startRefreshTokenTimer();\n                return account;\n            }));\n    }\n\n    logout() {\n        this.http.post<any>(`${baseUrl}/revoke-token`, {}, { withCredentials: true }).subscribe();\n        this.stopRefreshTokenTimer();\n        this.accountSubject.next(null);\n        this.router.navigate(['/account/login']);\n    }\n\n    refreshToken() {\n        return this.http.post<Account>(`${baseUrl}/refresh-token`, {}, { withCredentials: true })\n            .pipe(map((account) => {\n                this.accountSubject.next(account);\n                this.startRefreshTokenTimer();\n                return account;\n            }));\n    }\n\n    register(account: Account) {\n        return this.http.post(`${baseUrl}/register`, account, { observe: 'response' });\n    }\n\n    verifyEmail(token: string) {\n        return this.http.post(`${baseUrl}/verify-email`, { token });\n    }\n\n    forgotPassword(email: string) {\n        return this.http.post(`${baseUrl}/forgot-password`, { email });\n    }\n\n    validateResetToken(token: string) {\n        return this.http.post(`${baseUrl}/validate-reset-token`, { token });\n    }\n\n    resetPassword(token: string, password: string, confirmPassword: string) {\n        return this.http.post(`${baseUrl}/reset-password`, { token, password, confirmPassword });\n    }\n\n    getAll(): Observable<Account[]> {\n        return this.http.get<Account[]>(baseUrl);\n    }\n\n    getById(id: string): Observable<Account> {\n        return this.http.get<Account>(`${baseUrl}/${id}`);\n    }\n\n    create(params: any): Observable<any> {\n        return this.http.post(baseUrl, params);\n    }\n\n    update(id: string, params: any): Observable<Account> {\n        return this.http.put(`${baseUrl}/${id}`, params)\n            .pipe(map((account: Account) => {\n                // update the current account if it was updated\n                if (account.id === this.accountValue?.id) {\n                    // publish updated account to subscribers\n                    const updatedAccount = { ...this.accountValue, ...account };\n                    this.accountSubject.next(updatedAccount);\n                }\n                return account;\n            }));\n    }\n\n    delete(id: string) {\n        return this.http.delete(`${baseUrl}/${id}`)\n            .pipe(map(x => {\n                // auto logout if the logged in account deleted their own record\n                if (id === this.accountValue?.id) {\n                    this.logout();\n                }\n                return x;\n            }));\n    }\n\n    // helper methods\n    private refreshTokenTimeout: any;\n\n    private startRefreshTokenTimer() {\n        // parse json object from base64 encoded jwt token\n        const jwtToken = JSON.parse(atob(this.accountValue.jwtToken.split('.')[1]));\n\n        // set a timeout to refresh the token a minute before it expires\n        const expires = new Date(jwtToken.exp * 1000);\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\n        this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n    }\n\n    private stopRefreshTokenTimer() {\n        clearTimeout(this.refreshTokenTimeout);\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}