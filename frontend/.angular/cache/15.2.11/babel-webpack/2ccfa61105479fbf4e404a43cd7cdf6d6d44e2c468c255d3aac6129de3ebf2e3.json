{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@app/_services\";\nimport * as i4 from \"@angular/common\";\nfunction AddEditComponent_div_6_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 48);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const account_r17 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", account_r17.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate3(\" \", account_r17.id, \" - \", account_r17.firstName, \" \", account_r17.lastName, \" \");\n  }\n}\nfunction AddEditComponent_div_6_div_7_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Account is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_6_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 49);\n    i0.ɵɵtemplate(1, AddEditComponent_div_6_div_7_div_1_Template, 2, 0, \"div\", 50);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r16.f.accountId.errors.required);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nfunction AddEditComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"label\", 7);\n    i0.ɵɵtext(2, \"Account\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"select\", 47)(4, \"option\", 13);\n    i0.ɵɵtext(5, \"Select Account...\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, AddEditComponent_div_6_option_6_Template, 2, 4, \"option\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, AddEditComponent_div_6_div_7_Template, 2, 1, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c0, ctx_r0.submitted && ctx_r0.f.accountId.errors));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.availableAccounts);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.submitted && ctx_r0.f.accountId.errors);\n  }\n}\nfunction AddEditComponent_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 51);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"titlecase\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx_r1.selectedAccountName));\n  }\n}\nfunction AddEditComponent_div_13_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Employee ID is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 49);\n    i0.ɵɵtemplate(1, AddEditComponent_div_13_div_1_Template, 2, 0, \"div\", 50);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.f.employeeId.errors.required);\n  }\n}\nfunction AddEditComponent_option_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 48);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const dept_r20 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", dept_r20.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", dept_r20.name, \" \");\n  }\n}\nfunction AddEditComponent_div_22_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Department is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 49);\n    i0.ɵɵtemplate(1, AddEditComponent_div_22_div_1_Template, 2, 0, \"div\", 50);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.f.departmentId.errors.required);\n  }\n}\nfunction AddEditComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 52);\n    i0.ɵɵelement(1, \"i\", 42);\n    i0.ɵɵtext(2, \" Use the \\\"Change Department\\\" button to transfer employee to another department \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_28_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Position is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 49);\n    i0.ɵɵtemplate(1, AddEditComponent_div_28_div_1_Template, 2, 0, \"div\", 50);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.f.position.errors.required);\n  }\n}\nfunction AddEditComponent_div_34_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Hire Date is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 49);\n    i0.ɵɵtemplate(1, AddEditComponent_div_34_div_1_Template, 2, 0, \"div\", 50);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.f.hireDate.errors.required);\n  }\n}\nfunction AddEditComponent_span_53_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 53);\n  }\n}\nfunction AddEditComponent_button_55_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 54);\n    i0.ɵɵlistener(\"click\", function AddEditComponent_button_55_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r24.openChangeDepartment());\n    });\n    i0.ɵɵtext(1, \" Change Department \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_div_58_span_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 53);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    \"show\": a0\n  };\n};\nfunction AddEditComponent_div_58_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 55)(1, \"div\", 31)(2, \"div\", 32)(3, \"div\", 56)(4, \"h5\", 34);\n    i0.ɵɵtext(5, \"Confirm Delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 35);\n    i0.ɵɵlistener(\"click\", function AddEditComponent_div_58_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r27.cancelDelete());\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 36)(8, \"div\", 57);\n    i0.ɵɵelement(9, \"i\", 58);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\", 59);\n    i0.ɵɵtext(11, \"Are you sure you want to delete this employee?\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"p\", 60);\n    i0.ɵɵtext(13, \"This action cannot be undone.\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(14, \"div\", 43)(15, \"button\", 44);\n    i0.ɵɵlistener(\"click\", function AddEditComponent_div_58_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r29.cancelDelete());\n    });\n    i0.ɵɵtext(16, \"Cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"button\", 61);\n    i0.ɵɵlistener(\"click\", function AddEditComponent_div_58_Template_button_click_17_listener() {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r30 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r30.confirmDelete());\n    });\n    i0.ɵɵtemplate(18, AddEditComponent_div_58_span_18_Template, 1, 0, \"span\", 26);\n    i0.ɵɵtext(19, \" Delete Employee \");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c1, ctx_r10.showDeleteModal));\n    i0.ɵɵadvance(18);\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.loading);\n  }\n}\nfunction AddEditComponent_option_83_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 48);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const dept_r31 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", dept_r31.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", dept_r31.name, \" \");\n  }\n}\nfunction AddEditComponent_div_84_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 62);\n    i0.ɵɵtext(1, \" Please select a department \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddEditComponent_span_92_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 53);\n  }\n}\nfunction AddEditComponent_div_94_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 63);\n  }\n}\nexport let AddEditComponent = /*#__PURE__*/(() => {\n  class AddEditComponent {\n    constructor(formBuilder, route, router, accountService, employeeService, departmentService, alertService) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.accountService = accountService;\n      this.employeeService = employeeService;\n      this.departmentService = departmentService;\n      this.alertService = alertService;\n      this.loading = false;\n      this.submitted = false;\n      this.accounts = [];\n      this.availableAccounts = [];\n      this.departments = [];\n      this.selectedAccountName = '';\n      this.existingEmployeeIds = [];\n      this.showDeleteModal = false;\n      this.showDepartmentModal = false;\n      this.employeeToDelete = null;\n      this.newDepartmentId = '';\n      this.currentEmployee = null;\n    }\n    ngOnInit() {\n      this.id = this.route.snapshot.params['id'];\n      this.isAddMode = !this.id;\n      // Load all departments\n      this.departmentService.getAll().pipe(first()).subscribe(departments => {\n        this.departments = departments;\n      });\n      // Load all accounts for dropdown\n      this.accountService.getAll().pipe(first()).subscribe(accounts => {\n        this.accounts = accounts;\n        this.updateAvailableAccounts();\n      });\n      // Load existing employee IDs\n      this.employeeService.getAll().pipe(first()).subscribe(employees => {\n        this.existingEmployeeIds = employees.map(e => e.employeeId);\n      });\n      // Initialize form with appropriate disabled states\n      this.form = this.formBuilder.group({\n        accountId: [{\n          value: '',\n          disabled: !this.isAddMode\n        }, this.isAddMode ? Validators.required : []],\n        employeeId: [{\n          value: '',\n          disabled: true\n        }],\n        departmentId: [{\n          value: '',\n          disabled: !this.isAddMode\n        }, Validators.required],\n        position: ['', Validators.required],\n        hireDate: ['', Validators.required],\n        salary: [''],\n        status: ['Active']\n      });\n      if (!this.isAddMode) {\n        this.employeeService.getById(this.id).pipe(first()).subscribe({\n          next: employee => {\n            // Convert the employee to EmployeeForm type\n            this.currentEmployee = Object.assign(Object.assign({}, employee), {\n              hireDate: employee.hireDate ? new Date(employee.hireDate).toISOString().split('T')[0] : ''\n            });\n            // Use patchValue with the raw form values\n            this.form.patchValue(this.currentEmployee);\n            if (employee.account) {\n              this.selectedAccountName = `${employee.account.firstName} ${employee.account.lastName}`;\n            }\n          },\n          error: error => {\n            this.alertService.error(error);\n          }\n        });\n      } else {\n        // Generate unique employee ID for new employees\n        this.generateUniqueEmployeeId();\n      }\n      // Watch for account changes to update the name display\n      this.form.get('accountId').valueChanges.subscribe(accountId => {\n        const account = this.accounts.find(a => a.id === accountId);\n        if (account) {\n          this.selectedAccountName = `${account.firstName} ${account.lastName}`;\n        } else {\n          this.selectedAccountName = '';\n        }\n      });\n    }\n    // Load existing employee IDs to ensure uniqueness\n    loadExistingEmployeeIds() {\n      this.employeeService.getAll().pipe(first()).subscribe(employees => {\n        this.existingEmployeeIds = employees.map(e => e.employeeId);\n        if (this.isAddMode) {\n          this.generateUniqueEmployeeId();\n        }\n      });\n    }\n    // Load all accounts and filter available ones\n    loadAccounts() {\n      // First, get all employees to know which accounts are already assigned\n      this.employeeService.getAll().pipe(first()).subscribe(employees => {\n        const usedAccountIds = employees.map(e => e.accountId.toString());\n        // Then load all accounts and filter them\n        this.accountService.getAll().pipe(first()).subscribe(accounts => {\n          var _a, _b;\n          this.accounts = accounts;\n          // Filter accounts:\n          // 1. Remove admin accounts\n          // 2. Remove accounts that are already assigned to employees (except in edit mode for current account)\n          this.availableAccounts = accounts.filter(account => {\n            var _a, _b;\n            const isAdmin = account.role === Role.Admin;\n            const isAlreadyAssigned = usedAccountIds.includes(account.id);\n            const isCurrentAccount = !this.isAddMode && account.id === ((_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('accountId')) === null || _b === void 0 ? void 0 : _b.value);\n            return !isAdmin && (!isAlreadyAssigned || isCurrentAccount);\n          });\n          // If in edit mode, ensure the current account is in the list\n          if (!this.isAddMode && ((_b = (_a = this.form) === null || _a === void 0 ? void 0 : _a.get('accountId')) === null || _b === void 0 ? void 0 : _b.value)) {\n            const currentAccount = this.accounts.find(a => a.id === this.form.get('accountId').value);\n            if (currentAccount && !this.availableAccounts.some(a => a.id === currentAccount.id)) {\n              this.availableAccounts.push(currentAccount);\n            }\n          }\n          // Sort accounts by name for better UX\n          this.availableAccounts.sort((a, b) => `${a.firstName} ${a.lastName}`.localeCompare(`${b.firstName} ${b.lastName}`));\n        });\n      });\n    }\n    // Load all departments\n    loadDepartments() {\n      this.departmentService.getAll().pipe(first()).subscribe(departments => {\n        this.departments = departments;\n      });\n    }\n    // Generate a unique employee ID\n    generateUniqueEmployeeId() {\n      let newId;\n      do {\n        const prefix = 'EMP';\n        const randomNum = Math.floor(Math.random() * 10000).toString().padStart(4, '0');\n        const year = new Date().getFullYear().toString().substr(-2);\n        newId = `${prefix}${year}${randomNum}`;\n      } while (this.existingEmployeeIds.includes(newId));\n      this.form.get('employeeId').patchValue(newId);\n    }\n    // convenience getter for easy access to form fields\n    get f() {\n      return this.form.controls;\n    }\n    onSubmit() {\n      this.submitted = true;\n      this.alertService.clear();\n      if (this.form.invalid) {\n        return;\n      }\n      this.loading = true;\n      if (this.isAddMode) {\n        this.createEmployee();\n      } else {\n        this.updateEmployee();\n      }\n    }\n    createEmployee() {\n      const formData = Object.assign({}, this.form.getRawValue() // Get values from disabled fields too\n      );\n\n      this.employeeService.create(formData).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Employee added successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['/employees']);\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    updateEmployee() {\n      const formData = Object.assign({}, this.form.getRawValue() // Get values from disabled fields too\n      );\n\n      this.employeeService.update(this.id, formData).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Employee updated successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['/employees']);\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    // Delete modal methods\n    openDeleteModal(id) {\n      this.employeeToDelete = id;\n      this.showDeleteModal = true;\n    }\n    cancelDelete() {\n      this.showDeleteModal = false;\n      this.employeeToDelete = null;\n    }\n    confirmDelete() {\n      if (!this.employeeToDelete) return;\n      this.loading = true;\n      this.employeeService.delete(this.employeeToDelete).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Employee deleted successfully', {\n            keepAfterRouteChange: true\n          });\n          this.router.navigate(['/employees']);\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    // Change Department modal methods\n    openChangeDepartment() {\n      this.submitted = false;\n      this.newDepartmentId = '';\n      this.showDepartmentModal = true;\n    }\n    cancelChangeDepartment() {\n      this.showDepartmentModal = false;\n      this.newDepartmentId = '';\n      this.submitted = false;\n    }\n    confirmChangeDepartment() {\n      this.submitted = true;\n      if (!this.newDepartmentId) {\n        return;\n      }\n      this.loading = true;\n      // Convert the current employee to the correct type\n      const updateData = Object.assign(Object.assign({}, this.currentEmployee), {\n        departmentId: this.newDepartmentId,\n        hireDate: this.currentEmployee.hireDate ? new Date(this.currentEmployee.hireDate) : null\n      });\n      this.employeeService.update(this.id, updateData).pipe(first()).subscribe({\n        next: () => {\n          this.alertService.success('Department changed successfully', {\n            keepAfterRouteChange: true\n          });\n          this.loading = false;\n          this.showDepartmentModal = false;\n          // Refresh the current employee data\n          this.employeeService.getById(this.id).pipe(first()).subscribe(employee => {\n            // Convert the employee to EmployeeForm type\n            this.currentEmployee = Object.assign(Object.assign({}, employee), {\n              hireDate: employee.hireDate ? new Date(employee.hireDate).toISOString().split('T')[0] : ''\n            });\n            this.form.patchValue(this.currentEmployee);\n          });\n        },\n        error: error => {\n          this.alertService.error(error);\n          this.loading = false;\n        }\n      });\n    }\n    // Computed property to get available departments (excluding current department)\n    get availableDepartments() {\n      if (!this.currentEmployee) return this.departments;\n      return this.departments.filter(dept => {\n        var _a, _b;\n        return dept.id.toString() !== ((_b = (_a = this.currentEmployee) === null || _a === void 0 ? void 0 : _a.departmentId) === null || _b === void 0 ? void 0 : _b.toString());\n      });\n    }\n    updateAvailableAccounts() {\n      this.loadAccounts();\n    }\n  }\n  AddEditComponent.ɵfac = function AddEditComponent_Factory(t) {\n    return new (t || AddEditComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AccountService), i0.ɵɵdirectiveInject(i3.EmployeeService), i0.ɵɵdirectiveInject(i3.DepartmentService), i0.ɵɵdirectiveInject(i3.AlertService));\n  };\n  AddEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddEditComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 95,\n    vars: 47,\n    consts: [[1, \"mb-4\"], [1, \"card\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"row\"], [\"class\", \"col-md-6 mb-3\", 4, \"ngIf\"], [1, \"col-md-6\", \"mb-3\"], [1, \"form-label\"], [1, \"input-group\"], [\"type\", \"text\", \"formControlName\", \"employeeId\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"input-group-text bg-light\", 4, \"ngIf\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"formControlName\", \"departmentId\", 1, \"form-select\", 3, \"ngClass\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"text-muted small mt-1\", 4, \"ngIf\"], [\"type\", \"text\", \"formControlName\", \"position\", \"placeholder\", \"Enter position\", 1, \"form-control\", 3, \"ngClass\"], [\"type\", \"date\", \"formControlName\", \"hireDate\", 1, \"form-control\", 3, \"ngClass\"], [1, \"input-group-text\"], [\"type\", \"number\", \"formControlName\", \"salary\", \"placeholder\", \"Enter salary\", 1, \"form-control\"], [\"formControlName\", \"status\", 1, \"form-select\"], [\"value\", \"Active\"], [\"value\", \"Inactive\"], [1, \"border-top\", \"pt-3\"], [1, \"btn-group\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-1\", 4, \"ngIf\"], [\"type\", \"button\", \"class\", \"btn btn-info text-white\", 3, \"click\", 4, \"ngIf\"], [\"routerLink\", \"/employees\", 1, \"btn\", \"btn-secondary\", \"ms-2\"], [\"class\", \"modal fade\", \"id\", \"deleteModal\", \"tabindex\", \"-1\", 3, \"ngClass\", 4, \"ngIf\"], [\"tabindex\", \"-1\", \"role\", \"dialog\", 1, \"modal\"], [1, \"modal-dialog\", \"modal-dialog-centered\"], [1, \"modal-content\"], [1, \"modal-header\", \"bg-info\", \"text-white\"], [1, \"modal-title\"], [\"type\", \"button\", 1, \"btn-close\", \"btn-close-white\", 3, \"click\"], [1, \"modal-body\"], [1, \"text-muted\", \"mb-2\"], [1, \"h5\", \"mb-3\"], [1, \"form-select\", 3, \"ngModel\", \"ngClass\", \"ngModelChange\"], [\"class\", \"invalid-feedback d-block\", 4, \"ngIf\"], [1, \"text-muted\", \"small\", \"mt-2\"], [1, \"fas\", \"fa-info-circle\", \"me-1\"], [1, \"modal-footer\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-info\", \"text-white\", 3, \"disabled\", \"click\"], [\"class\", \"modal-backdrop show\", 4, \"ngIf\"], [\"formControlName\", \"accountId\", 1, \"form-select\", 3, \"ngClass\"], [3, \"value\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"input-group-text\", \"bg-light\"], [1, \"text-muted\", \"small\", \"mt-1\"], [1, \"spinner-border\", \"spinner-border-sm\", \"me-1\"], [\"type\", \"button\", 1, \"btn\", \"btn-info\", \"text-white\", 3, \"click\"], [\"id\", \"deleteModal\", \"tabindex\", \"-1\", 1, \"modal\", \"fade\", 3, \"ngClass\"], [1, \"modal-header\", \"bg-danger\", \"text-white\"], [1, \"text-center\", \"mb-3\"], [1, \"fas\", \"fa-exclamation-triangle\", \"text-danger\", 2, \"font-size\", \"3rem\"], [1, \"text-center\", \"mb-0\"], [1, \"text-center\", \"text-muted\", \"mb-0\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"], [1, \"invalid-feedback\", \"d-block\"], [1, \"modal-backdrop\", \"show\"]],\n    template: function AddEditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1)(3, \"div\", 2)(4, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function AddEditComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(5, \"div\", 4);\n        i0.ɵɵtemplate(6, AddEditComponent_div_6_Template, 8, 5, \"div\", 5);\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"label\", 7);\n        i0.ɵɵtext(9, \"Employee ID & Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 8);\n        i0.ɵɵelement(11, \"input\", 9);\n        i0.ɵɵtemplate(12, AddEditComponent_span_12_Template, 3, 3, \"span\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(13, AddEditComponent_div_13_Template, 2, 1, \"div\", 11);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"div\", 4)(15, \"div\", 6)(16, \"label\", 7);\n        i0.ɵɵtext(17, \"Department\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"select\", 12)(19, \"option\", 13);\n        i0.ɵɵtext(20, \"Select Department...\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(21, AddEditComponent_option_21_Template, 2, 2, \"option\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(22, AddEditComponent_div_22_Template, 2, 1, \"div\", 11);\n        i0.ɵɵtemplate(23, AddEditComponent_div_23_Template, 3, 0, \"div\", 15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 6)(25, \"label\", 7);\n        i0.ɵɵtext(26, \"Position\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(27, \"input\", 16);\n        i0.ɵɵtemplate(28, AddEditComponent_div_28_Template, 2, 1, \"div\", 11);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(29, \"div\", 4)(30, \"div\", 6)(31, \"label\", 7);\n        i0.ɵɵtext(32, \"Hire Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(33, \"input\", 17);\n        i0.ɵɵtemplate(34, AddEditComponent_div_34_Template, 2, 1, \"div\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"div\", 6)(36, \"label\", 7);\n        i0.ɵɵtext(37, \"Salary\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"div\", 8)(39, \"span\", 18);\n        i0.ɵɵtext(40, \"\\u20B1\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(41, \"input\", 19);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(42, \"div\", 0)(43, \"label\", 7);\n        i0.ɵɵtext(44, \"Status\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(45, \"select\", 20)(46, \"option\", 21);\n        i0.ɵɵtext(47, \"Active\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(48, \"option\", 22);\n        i0.ɵɵtext(49, \"Inactive\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(50, \"div\", 23)(51, \"div\", 24)(52, \"button\", 25);\n        i0.ɵɵtemplate(53, AddEditComponent_span_53_Template, 1, 0, \"span\", 26);\n        i0.ɵɵtext(54, \" Save Employee \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(55, AddEditComponent_button_55_Template, 2, 0, \"button\", 27);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(56, \"a\", 28);\n        i0.ɵɵtext(57, \"Cancel\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵtemplate(58, AddEditComponent_div_58_Template, 20, 4, \"div\", 29);\n        i0.ɵɵelementStart(59, \"div\", 30)(60, \"div\", 31)(61, \"div\", 32)(62, \"div\", 33)(63, \"h5\", 34);\n        i0.ɵɵtext(64, \"Change Department\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(65, \"button\", 35);\n        i0.ɵɵlistener(\"click\", function AddEditComponent_Template_button_click_65_listener() {\n          return ctx.cancelChangeDepartment();\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(66, \"div\", 36)(67, \"div\", 0)(68, \"h6\", 37);\n        i0.ɵɵtext(69, \"Employee\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(70, \"p\", 38);\n        i0.ɵɵtext(71);\n        i0.ɵɵpipe(72, \"titlecase\");\n        i0.ɵɵpipe(73, \"titlecase\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(74, \"h6\", 37);\n        i0.ɵɵtext(75, \"Current Department\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(76, \"p\", 38);\n        i0.ɵɵtext(77);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(78, \"h6\", 37);\n        i0.ɵɵtext(79, \"New Department\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(80, \"select\", 39);\n        i0.ɵɵlistener(\"ngModelChange\", function AddEditComponent_Template_select_ngModelChange_80_listener($event) {\n          return ctx.newDepartmentId = $event;\n        });\n        i0.ɵɵelementStart(81, \"option\", 13);\n        i0.ɵɵtext(82, \"Select Department...\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(83, AddEditComponent_option_83_Template, 2, 2, \"option\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(84, AddEditComponent_div_84_Template, 2, 0, \"div\", 40);\n        i0.ɵɵelementStart(85, \"div\", 41);\n        i0.ɵɵelement(86, \"i\", 42);\n        i0.ɵɵtext(87, \" Current department is excluded from selection \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(88, \"div\", 43)(89, \"button\", 44);\n        i0.ɵɵlistener(\"click\", function AddEditComponent_Template_button_click_89_listener() {\n          return ctx.cancelChangeDepartment();\n        });\n        i0.ɵɵtext(90, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(91, \"button\", 45);\n        i0.ɵɵlistener(\"click\", function AddEditComponent_Template_button_click_91_listener() {\n          return ctx.confirmChangeDepartment();\n        });\n        i0.ɵɵtemplate(92, AddEditComponent_span_92_Template, 1, 0, \"span\", 26);\n        i0.ɵɵtext(93, \" Save Changes \");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵtemplate(94, AddEditComponent_div_94_Template, 1, 0, \"div\", 46);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\"\", ctx.isAddMode ? \"Add New\" : \"Edit\", \" Employee\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isAddMode);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(37, _c0, ctx.submitted && ctx.f.employeeId.errors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectedAccountName);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.employeeId.errors);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(39, _c0, ctx.submitted && ctx.f.departmentId.errors));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.departments);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.departmentId.errors);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isAddMode);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(41, _c0, ctx.submitted && ctx.f.position.errors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.position.errors);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(43, _c0, ctx.submitted && ctx.f.hireDate.errors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.hireDate.errors);\n        i0.ɵɵadvance(18);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isAddMode);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.showDeleteModal);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"show\", ctx.showDepartmentModal)(\"d-block\", ctx.showDepartmentModal);\n        i0.ɵɵadvance(12);\n        i0.ɵɵtextInterpolate3(\"\", ctx.currentEmployee == null ? null : ctx.currentEmployee.employeeId, \" - \", i0.ɵɵpipeBind1(72, 33, ctx.currentEmployee == null ? null : ctx.currentEmployee.account == null ? null : ctx.currentEmployee.account.firstName), \" \", i0.ɵɵpipeBind1(73, 35, ctx.currentEmployee == null ? null : ctx.currentEmployee.account == null ? null : ctx.currentEmployee.account.lastName), \"\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx.currentEmployee == null ? null : ctx.currentEmployee.departmentName);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.newDepartmentId)(\"ngClass\", i0.ɵɵpureFunction1(45, _c0, ctx.submitted && !ctx.newDepartmentId));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.availableDepartments);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && !ctx.newDepartmentId);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.showDeleteModal || ctx.showDepartmentModal);\n      }\n    },\n    dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.NgModel, i2.RouterLink, i4.TitleCasePipe],\n    encapsulation: 2\n  });\n  return AddEditComponent;\n})();","map":{"version":3,"mappings":"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","names":["Validators","first","Role","i0","AddEditComponent","constructor","formBuilder","route","router","accountService","employeeService","departmentService","alertService","ngOnInit","id","snapshot","params","isAddMode","getAll","pipe","subscribe","departments","accounts","updateAvailableAccounts","employees","existingEmployeeIds","map","e","employeeId","form","group","accountId","value","disabled","required","departmentId","position","hireDate","salary","status","getById","next","employee","currentEmployee","Date","toISOString","split","patchValue","account","selectedAccountName","firstName","lastName","error","generateUniqueEmployeeId","get","valueChanges","find","a","loadExistingEmployeeIds","loadAccounts","usedAccountIds","toString","availableAccounts","filter","isAdmin","role","Admin","isAlreadyAssigned","includes","isCurrentAccount","currentAccount","some","push","sort","b","localeCompare","loadDepartments","newId","prefix","randomNum","Math","floor","random","padStart","year","getFullYear","substr","f","controls","onSubmit","submitted","clear","invalid","loading","createEmployee","updateEmployee","formData","getRawValue","create","success","keepAfterRouteChange","navigate","update","openDeleteModal","employeeToDelete","showDeleteModal","cancelDelete","confirmDelete","delete","openChangeDepartment","newDepartmentId","showDepartmentModal","cancelChangeDepartment","confirmChangeDepartment","updateData","availableDepartments","dept","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\employees\\add-edit.component.ts","D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\employees\\add-edit.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService, EmployeeService, DepartmentService } from '@app/_services';\r\nimport { Employee, Account, Department, Role } from '@app/_models';\r\n\r\n// Update Employee interface to allow string for hireDate\r\ninterface EmployeeForm extends Omit<Employee, 'hireDate'> {\r\n    hireDate: string;\r\n}\r\n\r\n@Component({ templateUrl: 'add-edit.component.html' })\r\nexport class AddEditComponent implements OnInit {\r\n    form: FormGroup;\r\n    id: string;\r\n    isAddMode: boolean;\r\n    loading = false;\r\n    submitted = false;\r\n    accounts: Account[] = [];\r\n    availableAccounts: Account[] = [];\r\n    departments: Department[] = [];\r\n    selectedAccountName: string = '';\r\n    existingEmployeeIds: string[] = [];\r\n    showDeleteModal = false;\r\n    showDepartmentModal = false;\r\n    employeeToDelete: string = null;\r\n    newDepartmentId: string = '';\r\n    currentEmployee: EmployeeForm = null;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private employeeService: EmployeeService,\r\n        private departmentService: DepartmentService,\r\n        private alertService: AlertService\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.id = this.route.snapshot.params['id'];\r\n        this.isAddMode = !this.id;\r\n\r\n        // Load all departments\r\n        this.departmentService.getAll()\r\n            .pipe(first())\r\n            .subscribe(departments => {\r\n                this.departments = departments;\r\n            });\r\n\r\n        // Load all accounts for dropdown\r\n        this.accountService.getAll()\r\n            .pipe(first())\r\n            .subscribe(accounts => {\r\n                this.accounts = accounts;\r\n                this.updateAvailableAccounts();\r\n            });\r\n\r\n        // Load existing employee IDs\r\n        this.employeeService.getAll()\r\n            .pipe(first())\r\n            .subscribe(employees => {\r\n                this.existingEmployeeIds = employees.map(e => e.employeeId);\r\n            });\r\n\r\n        // Initialize form with appropriate disabled states\r\n        this.form = this.formBuilder.group({\r\n            accountId: [{ value: '', disabled: !this.isAddMode }, this.isAddMode ? Validators.required : []],\r\n            employeeId: [{ value: '', disabled: true }], // Always disabled\r\n            departmentId: [{ value: '', disabled: !this.isAddMode }, Validators.required], // Disabled in edit mode\r\n            position: ['', Validators.required],\r\n            hireDate: ['', Validators.required],\r\n            salary: [''],\r\n            status: ['Active']\r\n        });\r\n\r\n        if (!this.isAddMode) {\r\n            this.employeeService.getById(this.id)\r\n                .pipe(first())\r\n                .subscribe({\r\n                    next: (employee) => {\r\n                        // Convert the employee to EmployeeForm type\r\n                        this.currentEmployee = {\r\n                            ...employee,\r\n                            hireDate: employee.hireDate ? new Date(employee.hireDate).toISOString().split('T')[0] : ''\r\n                        };\r\n                        // Use patchValue with the raw form values\r\n                        this.form.patchValue(this.currentEmployee);\r\n                        if (employee.account) {\r\n                            this.selectedAccountName = `${employee.account.firstName} ${employee.account.lastName}`;\r\n                        }\r\n                    },\r\n                    error: error => {\r\n                        this.alertService.error(error);\r\n                    }\r\n                });\r\n        } else {\r\n            // Generate unique employee ID for new employees\r\n            this.generateUniqueEmployeeId();\r\n        }\r\n\r\n        // Watch for account changes to update the name display\r\n        this.form.get('accountId').valueChanges.subscribe(accountId => {\r\n            const account = this.accounts.find(a => a.id === accountId);\r\n            if (account) {\r\n                this.selectedAccountName = `${account.firstName} ${account.lastName}`;\r\n            } else {\r\n                this.selectedAccountName = '';\r\n            }\r\n        });\r\n    }\r\n\r\n    // Load existing employee IDs to ensure uniqueness\r\n    private loadExistingEmployeeIds() {\r\n        this.employeeService.getAll()\r\n            .pipe(first())\r\n            .subscribe(employees => {\r\n                this.existingEmployeeIds = employees.map(e => e.employeeId);\r\n                if (this.isAddMode) {\r\n                    this.generateUniqueEmployeeId();\r\n                }\r\n            });\r\n    }\r\n\r\n    // Load all accounts and filter available ones\r\n    private loadAccounts() {\r\n        // First, get all employees to know which accounts are already assigned\r\n        this.employeeService.getAll()\r\n            .pipe(first())\r\n            .subscribe(employees => {\r\n                const usedAccountIds = employees.map(e => e.accountId.toString());\r\n                \r\n                // Then load all accounts and filter them\r\n                this.accountService.getAll()\r\n                    .pipe(first())\r\n                    .subscribe(accounts => {\r\n                        this.accounts = accounts;\r\n                        \r\n                        // Filter accounts:\r\n                        // 1. Remove admin accounts\r\n                        // 2. Remove accounts that are already assigned to employees (except in edit mode for current account)\r\n                        this.availableAccounts = accounts.filter(account => {\r\n                            const isAdmin = account.role === Role.Admin;\r\n                            const isAlreadyAssigned = usedAccountIds.includes(account.id);\r\n                            const isCurrentAccount = !this.isAddMode && account.id === this.form?.get('accountId')?.value;\r\n                            \r\n                            return !isAdmin && (!isAlreadyAssigned || isCurrentAccount);\r\n                        });\r\n\r\n                        // If in edit mode, ensure the current account is in the list\r\n                        if (!this.isAddMode && this.form?.get('accountId')?.value) {\r\n                            const currentAccount = this.accounts.find(a => a.id === this.form.get('accountId').value);\r\n                            if (currentAccount && !this.availableAccounts.some(a => a.id === currentAccount.id)) {\r\n                                this.availableAccounts.push(currentAccount);\r\n                            }\r\n                        }\r\n\r\n                        // Sort accounts by name for better UX\r\n                        this.availableAccounts.sort((a, b) => \r\n                            `${a.firstName} ${a.lastName}`.localeCompare(`${b.firstName} ${b.lastName}`)\r\n                        );\r\n                    });\r\n            });\r\n    }\r\n\r\n    // Load all departments\r\n    private loadDepartments() {\r\n        this.departmentService.getAll()\r\n            .pipe(first())\r\n            .subscribe(departments => {\r\n                this.departments = departments;\r\n            });\r\n    }\r\n\r\n    // Generate a unique employee ID\r\n    private generateUniqueEmployeeId() {\r\n        let newId: string;\r\n        do {\r\n            const prefix = 'EMP';\r\n            const randomNum = Math.floor(Math.random() * 10000).toString().padStart(4, '0');\r\n            const year = new Date().getFullYear().toString().substr(-2);\r\n            newId = `${prefix}${year}${randomNum}`;\r\n        } while (this.existingEmployeeIds.includes(newId));\r\n\r\n        this.form.get('employeeId').patchValue(newId);\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n        this.alertService.clear();\r\n\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        if (this.isAddMode) {\r\n            this.createEmployee();\r\n        } else {\r\n            this.updateEmployee();\r\n        }\r\n    }\r\n\r\n    private createEmployee() {\r\n        const formData = {\r\n            ...this.form.getRawValue() // Get values from disabled fields too\r\n        };\r\n        \r\n        this.employeeService.create(formData)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Employee added successfully', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['/employees']);\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    private updateEmployee() {\r\n        const formData = {\r\n            ...this.form.getRawValue() // Get values from disabled fields too\r\n        };\r\n        \r\n        this.employeeService.update(this.id, formData)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Employee updated successfully', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['/employees']);\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    // Delete modal methods\r\n    openDeleteModal(id: string) {\r\n        this.employeeToDelete = id;\r\n        this.showDeleteModal = true;\r\n    }\r\n\r\n    cancelDelete() {\r\n        this.showDeleteModal = false;\r\n        this.employeeToDelete = null;\r\n    }\r\n\r\n    confirmDelete() {\r\n        if (!this.employeeToDelete) return;\r\n        \r\n        this.loading = true;\r\n        this.employeeService.delete(this.employeeToDelete)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Employee deleted successfully', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['/employees']);\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    // Change Department modal methods\r\n    openChangeDepartment() {\r\n        this.submitted = false;\r\n        this.newDepartmentId = '';\r\n        this.showDepartmentModal = true;\r\n    }\r\n\r\n    cancelChangeDepartment() {\r\n        this.showDepartmentModal = false;\r\n        this.newDepartmentId = '';\r\n        this.submitted = false;\r\n    }\r\n\r\n    confirmChangeDepartment() {\r\n        this.submitted = true;\r\n\r\n        if (!this.newDepartmentId) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n\r\n        // Convert the current employee to the correct type\r\n        const updateData = {\r\n            ...this.currentEmployee,\r\n            departmentId: this.newDepartmentId,\r\n            hireDate: this.currentEmployee.hireDate ? new Date(this.currentEmployee.hireDate) : null\r\n        };\r\n\r\n        this.employeeService.update(this.id, updateData)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Department changed successfully', { keepAfterRouteChange: true });\r\n                    this.loading = false;\r\n                    this.showDepartmentModal = false;\r\n                    // Refresh the current employee data\r\n                    this.employeeService.getById(this.id)\r\n                        .pipe(first())\r\n                        .subscribe(employee => {\r\n                            // Convert the employee to EmployeeForm type\r\n                            this.currentEmployee = {\r\n                                ...employee,\r\n                                hireDate: employee.hireDate ? new Date(employee.hireDate).toISOString().split('T')[0] : ''\r\n                            };\r\n                            this.form.patchValue(this.currentEmployee);\r\n                        });\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(error);\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    // Computed property to get available departments (excluding current department)\r\n    get availableDepartments(): Department[] {\r\n        if (!this.currentEmployee) return this.departments;\r\n        return this.departments.filter(dept => dept.id.toString() !== this.currentEmployee?.departmentId?.toString());\r\n    }\r\n\r\n    private updateAvailableAccounts() {\r\n        this.loadAccounts();\r\n    }\r\n} ","<h1 class=\"mb-4\">{{isAddMode ? 'Add New' : 'Edit'}} Employee</h1>\r\n<div class=\"card\">\r\n    <div class=\"card-body\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"row\">\r\n                <div class=\"col-md-6 mb-3\" *ngIf=\"isAddMode\">\r\n                    <label class=\"form-label\">Account</label>\r\n                    <select formControlName=\"accountId\" class=\"form-select\" [ngClass]=\"{ 'is-invalid': submitted && f.accountId.errors }\">\r\n                        <option value=\"\">Select Account...</option>\r\n                        <option *ngFor=\"let account of availableAccounts\" [value]=\"account.id\">\r\n                            {{account.id}} - {{account.firstName}} {{account.lastName}}\r\n                        </option>\r\n                    </select>\r\n                    <div *ngIf=\"submitted && f.accountId.errors\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"f.accountId.errors.required\">Account is required</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"col-md-6 mb-3\">\r\n                    <label class=\"form-label\">Employee ID & Name</label>\r\n                    <div class=\"input-group\">\r\n                        <input type=\"text\" formControlName=\"employeeId\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.employeeId.errors }\" />\r\n                        <span class=\"input-group-text bg-light\" *ngIf=\"selectedAccountName\">{{selectedAccountName | titlecase}}</span>\r\n                    </div>\r\n                    <div *ngIf=\"submitted && f.employeeId.errors\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"f.employeeId.errors.required\">Employee ID is required</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-md-6 mb-3\">\r\n                    <label class=\"form-label\">Department</label>\r\n                    <select formControlName=\"departmentId\" class=\"form-select\" [ngClass]=\"{ 'is-invalid': submitted && f.departmentId.errors }\">\r\n                        <option value=\"\">Select Department...</option>\r\n                        <option *ngFor=\"let dept of departments\" [value]=\"dept.id\">\r\n                            {{dept.name}}\r\n                        </option>\r\n                    </select>\r\n                    <div *ngIf=\"submitted && f.departmentId.errors\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"f.departmentId.errors.required\">Department is required</div>\r\n                    </div>\r\n                    <div *ngIf=\"!isAddMode\" class=\"text-muted small mt-1\">\r\n                        <i class=\"fas fa-info-circle me-1\"></i>\r\n                        Use the \"Change Department\" button to transfer employee to another department\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"col-md-6 mb-3\">\r\n                    <label class=\"form-label\">Position</label>\r\n                    <input type=\"text\" formControlName=\"position\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.position.errors }\" placeholder=\"Enter position\" />\r\n                    <div *ngIf=\"submitted && f.position.errors\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"f.position.errors.required\">Position is required</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-md-6 mb-3\">\r\n                    <label class=\"form-label\">Hire Date</label>\r\n                    <input type=\"date\" formControlName=\"hireDate\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.hireDate.errors }\" />\r\n                    <div *ngIf=\"submitted && f.hireDate.errors\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"f.hireDate.errors.required\">Hire Date is required</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"col-md-6 mb-3\">\r\n                    <label class=\"form-label\">Salary</label>\r\n                    <div class=\"input-group\">\r\n                        <span class=\"input-group-text\">₱</span>\r\n                        <input type=\"number\" formControlName=\"salary\" class=\"form-control\" placeholder=\"Enter salary\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"mb-4\">\r\n                <label class=\"form-label\">Status</label>\r\n                <select formControlName=\"status\" class=\"form-select\">\r\n                    <option value=\"Active\">Active</option>\r\n                    <option value=\"Inactive\">Inactive</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div class=\"border-top pt-3\">\r\n                <div class=\"btn-group\">\r\n                    <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                        <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm me-1\"></span>\r\n                        Save Employee\r\n                    </button>\r\n                    <button *ngIf=\"!isAddMode\" type=\"button\" class=\"btn btn-info text-white\" (click)=\"openChangeDepartment()\">\r\n                        Change Department\r\n                    </button>\r\n                </div>\r\n                <a routerLink=\"/employees\" class=\"btn btn-secondary ms-2\">Cancel</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n\r\n<!-- Delete Confirmation Modal -->\r\n<div class=\"modal fade\" id=\"deleteModal\" tabindex=\"-1\" [ngClass]=\"{'show': showDeleteModal}\" *ngIf=\"showDeleteModal\">\r\n    <div class=\"modal-dialog modal-dialog-centered\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header bg-danger text-white\">\r\n                <h5 class=\"modal-title\">Confirm Delete</h5>\r\n                <button type=\"button\" class=\"btn-close btn-close-white\" (click)=\"cancelDelete()\"></button>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <div class=\"text-center mb-3\">\r\n                    <i class=\"fas fa-exclamation-triangle text-danger\" style=\"font-size: 3rem;\"></i>\r\n                </div>\r\n                <p class=\"text-center mb-0\">Are you sure you want to delete this employee?</p>\r\n                <p class=\"text-center text-muted mb-0\">This action cannot be undone.</p>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancelDelete()\">Cancel</button>\r\n                <button type=\"button\" class=\"btn btn-danger\" (click)=\"confirmDelete()\">\r\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm me-1\"></span>\r\n                    Delete Employee\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- Change Department Modal -->\r\n<div class=\"modal\" [class.show]=\"showDepartmentModal\" [class.d-block]=\"showDepartmentModal\" tabindex=\"-1\" role=\"dialog\">\r\n    <div class=\"modal-dialog modal-dialog-centered\">\r\n        <div class=\"modal-content\">\r\n            <div class=\"modal-header bg-info text-white\">\r\n                <h5 class=\"modal-title\">Change Department</h5>\r\n                <button type=\"button\" class=\"btn-close btn-close-white\" (click)=\"cancelChangeDepartment()\"></button>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <div class=\"mb-4\">\r\n                    <h6 class=\"text-muted mb-2\">Employee</h6>\r\n                    <p class=\"h5 mb-3\">{{currentEmployee?.employeeId}} - {{currentEmployee?.account?.firstName | titlecase}} {{currentEmployee?.account?.lastName | titlecase}}</p>\r\n                    \r\n                    <h6 class=\"text-muted mb-2\">Current Department</h6>\r\n                    <p class=\"h5 mb-3\">{{currentEmployee?.departmentName}}</p>\r\n\r\n                    <h6 class=\"text-muted mb-2\">New Department</h6>\r\n                    <select [(ngModel)]=\"newDepartmentId\" class=\"form-select\" [ngClass]=\"{ 'is-invalid': submitted && !newDepartmentId }\">\r\n                        <option value=\"\">Select Department...</option>\r\n                        <option *ngFor=\"let dept of availableDepartments\" [value]=\"dept.id\">\r\n                            {{dept.name}}\r\n                        </option>\r\n                    </select>\r\n                    <div *ngIf=\"submitted && !newDepartmentId\" class=\"invalid-feedback d-block\">\r\n                        Please select a department\r\n                    </div>\r\n                    <div class=\"text-muted small mt-2\">\r\n                        <i class=\"fas fa-info-circle me-1\"></i>\r\n                        Current department is excluded from selection\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-secondary\" (click)=\"cancelChangeDepartment()\">Cancel</button>\r\n                <button type=\"button\" class=\"btn btn-info text-white\" (click)=\"confirmChangeDepartment()\" [disabled]=\"loading\">\r\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm me-1\"></span>\r\n                    Save Changes\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<!-- Modal Backdrop -->\r\n<div class=\"modal-backdrop show\" *ngIf=\"showDeleteModal || showDepartmentModal\"></div> "]},"metadata":{},"sourceType":"module","externalDependencies":[]}