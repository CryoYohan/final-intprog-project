{"ast":null,"code":"import { HttpResponse } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [{\n  id: 1,\n  name: 'HR',\n  description: 'Human Resources'\n}, {\n  id: 2,\n  name: 'IT',\n  description: 'Information Technology'\n}, {\n  id: 3,\n  name: 'Finance',\n  description: 'Finance Department'\n}, {\n  id: 4,\n  name: 'Marketing',\n  description: 'Marketing Department'\n}];\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [{\n  id: 1,\n  name: 'Manager',\n  description: 'Department Manager'\n}, {\n  id: 2,\n  name: 'Team Lead',\n  description: 'Team Leader'\n}, {\n  id: 3,\n  name: 'Senior Staff',\n  description: 'Senior Level Staff'\n}, {\n  id: 4,\n  name: 'Junior Staff',\n  description: 'Junior Level Staff'\n}];\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [{\n  id: 1,\n  name: 'Leave Request',\n  description: 'Request for leave or time off'\n}, {\n  id: 2,\n  name: 'Equipment Request',\n  description: 'Request for office equipment'\n}, {\n  id: 3,\n  name: 'Training Request',\n  description: 'Request for training or workshops'\n}, {\n  id: 4,\n  name: 'Other',\n  description: 'Other types of requests'\n}];\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    constructor(alertService) {\n      this.alertService = alertService;\n    }\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      const alertService = this.alertService;\n      // Helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        }));\n      }\n      function error(message) {\n        return throwError(() => ({\n          error: {\n            message\n          }\n        }));\n      }\n      function unauthorized() {\n        return throwError(() => ({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        }));\n      }\n      function notFound() {\n        return throwError(() => ({\n          status: 404,\n          error: {\n            message: 'Not Found'\n          }\n        }));\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status,\n          isVerified\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status,\n          isVerified\n        };\n      }\n      function isAuthenticated() {\n        return !!currentAccount();\n      }\n      function isAdmin() {\n        var _a;\n        return ((_a = currentAccount()) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n      }\n      function currentAccount() {\n        var _a;\n        if (!((_a = headers.get('Authorization')) === null || _a === void 0 ? void 0 : _a.startsWith('Bearer '))) return null;\n        const jwtToken = JSON.parse(atob(headers.get('Authorization').split('.')[1]));\n        return accounts.find(x => x.id === jwtToken.id);\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function getWorkflowsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const internalId = parseInt(url.split('/').pop());\n        console.log('Looking for workflows with employeeId:', internalId);\n        const employee = employees.find(e => e.id === internalId);\n        if (!employee) {\n          console.log('Employee not found with internal id:', internalId);\n          return notFound();\n        }\n        const employeeWorkflows = workflows.filter(x => x.employeeId === employee.id);\n        console.log('Found workflows:', employeeWorkflows.length);\n        // Sort workflows in descending order\n        const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      return handleRoute().pipe(delay(500), materialize(), dematerialize());\n      function handleRoute() {\n        switch (true) {\n          case url.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case url.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case url.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case url.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case url.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case url.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          case url.endsWith('/accounts') && method === 'POST':\n            return createAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n            return updateAccount();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n            return deleteAccount();\n          // request routes\n          case url.endsWith('/requests') && method === 'GET':\n            return getRequests();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return getRequestById();\n          case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n            return getRequestsByEmployeeId();\n          case url.endsWith('/requests/my-requests') && method === 'GET':\n            return getMyRequests();\n          case url.endsWith('/requests') && method === 'POST':\n            return createRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return updateRequest();\n          case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n            return changeRequestStatus();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n            return deleteRequest();\n          // employee routes\n          case url.endsWith('/employees') && method === 'GET':\n            return getEmployees();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n            return getEmployeeById();\n          case url.endsWith('/employees') && method === 'POST':\n            return createEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n            return updateEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n            return deleteEmployee();\n          case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n            return transferEmployee();\n          // department routes\n          case url.endsWith('/departments') && method === 'GET':\n            return getDepartments();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n            return getDepartmentById();\n          case url.endsWith('/departments') && method === 'POST':\n            return createDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n            return updateDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n            return deleteDepartment();\n          // position routes\n          case url.endsWith('/positions') && method === 'GET':\n            return getPositions();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n            return getPositionById();\n          case url.endsWith('/positions') && method === 'POST':\n            return createPosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n            return updatePosition();\n          case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n            return deletePosition();\n          // request type routes\n          case url.endsWith('/request-types') && method === 'GET':\n            return getRequestTypes();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n            return getRequestTypeById();\n          case url.endsWith('/request-types') && method === 'POST':\n            return createRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n            return updateRequestType();\n          case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n            return deleteRequestType();\n          // workflow routes\n          case url.endsWith('/workflows') && method === 'GET':\n            return getWorkflows();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n            return getWorkflowById();\n          case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByEmployeeId();\n          case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByRequestId();\n          case url.endsWith('/workflows') && method === 'POST':\n            return createWorkflow();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n            return updateWorkflow();\n          case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n            return updateWorkflowStatus();\n          case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflow();\n          case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n            return deleteWorkflowItem();\n          default:\n            return next.handle(request);\n        }\n      }\n      // Authentication functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) return error('Email or password is incorrect');\n        if (password !== account.password) return error('Email or password is incorrect');\n        if (!account.isVerified) return error('Please verify your email before logging in');\n        // Generate refresh token and save\n        const refreshToken = generateRefreshToken();\n        account.refreshTokens = account.refreshTokens || [];\n        account.refreshTokens.push(refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // Return basic details and tokens\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account),\n          refreshToken\n        }));\n      }\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return unauthorized();\n        const account = accounts.find(x => {\n          var _a;\n          return (_a = x.refreshTokens) === null || _a === void 0 ? void 0 : _a.includes(refreshToken);\n        });\n        if (!account) return unauthorized();\n        // Generate new refresh token and save\n        const newRefreshToken = generateRefreshToken();\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        account.refreshTokens.push(newRefreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // Return basic details and tokens\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account),\n          refreshToken: newRefreshToken\n        }));\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // display email already registered message in alert\n          setTimeout(() => {\n            alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, {\n              autoclose: false\n            });\n          }, 1000);\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n        // assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // first registered account is an admin\n          account.role = Role.Admin;\n          account.status = 'Active'; // Admin accounts get active status\n        } else {\n          account.role = Role.User;\n          account.status = 'Inactive'; // User accounts get inacitve status upon creation\n        }\n\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        // display verification email in alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n          alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, {\n            autoclose: false\n          });\n        }, 1000);\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        let account = accounts.find(x => x.id === idFromUrl());\n        // user accounts can get own profile and admin accounts can get all profiles\n        if (account.id !== currentAccount().id && !isAdmin()) {\n          return unauthorized();\n        }\n        return ok(basicDetails(account));\n      }\n      // Request functions\n      function getRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        // Return all requests for admins, or filtered for regular users\n        let filteredRequests = [...requests];\n        if (!isAdmin()) {\n          const currentUserId = currentAccount().id;\n          filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n        }\n        return ok(filteredRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const requestEmployee = employees.find(e => e.id === request.employeeId);\n          const requestAccount = accounts.find(a => a.id === (requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.accountId));\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return {\n            id: request.id,\n            employeeId: (requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.employeeId) || '',\n            type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type || '',\n            status: request.status,\n            createdDate: request.createdDate,\n            items: items,\n            employee: {\n              id: requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.id,\n              employeeId: requestEmployee === null || requestEmployee === void 0 ? void 0 : requestEmployee.employeeId,\n              fullName: requestAccount ? `${requestAccount.firstName} ${requestAccount.lastName}`.trim() : ''\n            }\n          };\n        }));\n      }\n      function getRequestById() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        // Check authorization\n        if (!isAdmin() && request.employeeId !== currentAccount().id) {\n          return unauthorized();\n        }\n        // Add related data\n        const items = requestItems.filter(item => item.requestId === request.id);\n        const employee = employees.find(e => e.id === request.employeeId);\n        const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        // Format employee name with proper capitalization\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: items.map(item => ({\n            id: item.id,\n            name: item.name,\n            quantity: item.quantity\n          })),\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            fullName: fullName,\n            employeeId: employee.employeeId\n          }) : null,\n          type: (requestType === null || requestType === void 0 ? void 0 : requestType.name) || request.type\n        }));\n      }\n      function getRequestsByEmployeeId() {\n        if (!isAuthenticated()) return unauthorized();\n        const internalId = parseInt(url.split('/').pop());\n        console.log('Looking for workflows with employeeId:', internalId);\n        const employee = employees.find(e => e.id === internalId);\n        if (!employee) {\n          console.log('Employee not found with internal id:', internalId);\n          return notFound();\n        }\n        const employeeWorkflows = workflows.filter(x => x.employeeId === employee.id);\n        console.log('Found workflows:', employeeWorkflows.length);\n        // Sort workflows in descending order\n        const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function getMyRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        const currentUserId = currentAccount().id;\n        const myRequests = requests.filter(x => x.employeeId === currentUserId);\n        return ok(myRequests.map(request => {\n          const items = requestItems.filter(item => item.requestId === request.id);\n          const employee = employees.find(e => e.id === request.employeeId);\n          const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n          const requestType = requestTypes.find(t => t.id === request.typeId);\n          return Object.assign(Object.assign({}, request), {\n            items,\n            employee: employee ? Object.assign(Object.assign({}, employee), {\n              fullName: `${(account === null || account === void 0 ? void 0 : account.firstName) || ''} ${(account === null || account === void 0 ? void 0 : account.lastName) || ''}`.trim(),\n              employeeId: employee.employeeId\n            }) : null,\n            type: requestType ? requestType.name : request.type\n          });\n        }));\n      }\n      function createRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        console.log('Received request data:', body);\n        // Find employee by employeeId if provided, otherwise use current user\n        let targetEmployee;\n        if (body.employeeId) {\n          // First try to find by internal ID\n          targetEmployee = employees.find(e => e.id === Number(body.employeeId));\n          if (!targetEmployee) {\n            // If not found, try to find by employee ID string\n            targetEmployee = employees.find(e => e.employeeId === body.employeeId);\n          }\n          if (!targetEmployee) return error('Employee not found');\n        } else {\n          const currentUser = currentAccount();\n          targetEmployee = employees.find(e => e.accountId === currentUser.id);\n          if (!targetEmployee) return error('Current user is not an employee');\n        }\n        const request = {\n          id: newRequestId(),\n          employeeId: targetEmployee.id,\n          type: body.type,\n          description: body.description || '',\n          status: 'Pending',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Validate required fields\n        if (!request.type) {\n          return error('Request type is required');\n        }\n        // Validate and process items if present\n        let requestItemsList = [];\n        if (body.items && Array.isArray(body.items)) {\n          try {\n            requestItemsList = body.items.map(item => {\n              if (!item.name || !item.quantity) {\n                throw new Error('Invalid item data');\n              }\n              return {\n                id: newRequestItemId(),\n                requestId: request.id,\n                name: item.name,\n                quantity: Number(item.quantity)\n              };\n            });\n          } catch (error) {\n            return error('Invalid item data provided');\n          }\n        }\n        // Save request and items\n        requests.push(request);\n        if (requestItemsList.length > 0) {\n          requestItems.push(...requestItemsList);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        const account = accounts.find(a => a.id === targetEmployee.accountId);\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItemsList,\n          employeeId: targetEmployee.employeeId,\n          employee: {\n            id: targetEmployee.id,\n            employeeId: targetEmployee.employeeId,\n            fullName: fullName\n          }\n        }));\n      }\n      function updateRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        console.log('Received update data:', body);\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Update basic request fields\n        Object.assign(request, {\n          type: body.type,\n          description: body.description || request.description,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Handle item changes\n        if (body.items) {\n          // Remove all existing items for this request\n          requestItems = requestItems.filter(item => item.requestId !== requestId);\n          // Add new/updated items\n          const newItems = body.items.map(item => ({\n            id: item.id || newRequestItemId(),\n            requestId: requestId,\n            name: item.name,\n            quantity: Number(item.quantity)\n          }));\n          requestItems.push(...newItems);\n          localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        }\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // Get related data for response\n        const employee = employees.find(e => e.id === request.employeeId);\n        const account = accounts.find(a => a.id === (employee === null || employee === void 0 ? void 0 : employee.accountId));\n        const firstName = (account === null || account === void 0 ? void 0 : account.firstName) ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n        const lastName = (account === null || account === void 0 ? void 0 : account.lastName) ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === requestId),\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            fullName: fullName,\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function changeRequestStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        const newStatus = body.status;\n        Object.assign(request, {\n          status: newStatus,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        // Get related data for response\n        const employee = employees.find(e => e.id === request.employeeId);\n        const requestType = requestTypes.find(t => t.id === request.typeId);\n        return ok(Object.assign(Object.assign({}, request), {\n          items: requestItems.filter(item => item.requestId === request.id),\n          employee: employee,\n          type: requestType.name\n        }));\n      }\n      function deleteRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        const request = requests.find(x => x.id === requestId);\n        if (!request) return notFound();\n        if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n        // Delete request and its items\n        requests = requests.filter(x => x.id !== requestId);\n        requestItems = requestItems.filter(x => x.requestId !== requestId);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n        return ok();\n      }\n      // Employee functions\n      function getEmployees() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(employees.map(employee => {\n          const department = departments.find(d => d.id === employee.departmentId);\n          const account = accounts.find(a => a.id === employee.accountId);\n          return Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId,\n            fullName: account ? `${account.firstName} ${account.lastName}`.trim() : '',\n            department: department ? {\n              id: department.id,\n              name: department.name,\n              description: department.description\n            } : null\n          });\n        }));\n      }\n      function getEmployeeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employee = employees.find(x => x.id === employeeId);\n        if (!employee) return notFound();\n        // Get fresh department data\n        const department = departments.find(d => d.id === employee.departmentId);\n        if (!department) return error('Department not found');\n        const account = accounts.find(a => a.id === employee.accountId);\n        // Return complete employee data with fresh relations\n        return ok(Object.assign(Object.assign({}, employee), {\n          employeeId: employee.employeeId,\n          fullName: account ? `${account.firstName} ${account.lastName}`.trim() : '',\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function createEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        // Log the received data for debugging\n        console.log('Received employee data:', body);\n        // Validate department exists\n        const department = departments.find(d => d.id === Number(body.departmentId));\n        if (!department) return error('Department not found');\n        const employee = Object.assign(Object.assign({}, body), {\n          id: newEmployeeId(),\n          accountId: Number(body.accountId),\n          employeeId: body.employeeId,\n          departmentId: Number(body.departmentId),\n          position: body.position,\n          hireDate: body.hireDate,\n          salary: Number(body.salary),\n          status: body.status,\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Check each required field individually and log the result\n        const requiredFields = {\n          accountId: !!employee.accountId,\n          employeeId: !!employee.employeeId,\n          departmentId: !!employee.departmentId,\n          position: !!employee.position,\n          hireDate: !!employee.hireDate,\n          salary: !!employee.salary,\n          status: !!employee.status\n        };\n        console.log('Field validation results:', requiredFields);\n        // Check if any required field is missing\n        const missingFields = Object.entries(requiredFields).filter(([_, isValid]) => !isValid).map(([fieldName]) => fieldName);\n        if (missingFields.length > 0) {\n          return error(`Required fields are missing: ${missingFields.join(', ')}`);\n        }\n        // Validate account exists\n        const account = accounts.find(a => a.id === employee.accountId);\n        if (!account) return error('Account not found');\n        // Create workflow entry for new employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employee.id,\n          type: 'Added',\n          details: {\n            task: `New employee ${employee.employeeId} was added`,\n            additionalInfo: `Added to ${department.name} department as ${employee.position}`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(employee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function updateEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const oldEmployee = employees[employeeIndex];\n        const updatedEmployee = Object.assign(Object.assign(Object.assign({}, oldEmployee), body), {\n          id: employeeId,\n          accountId: body.accountId ? Number(body.accountId) : oldEmployee.accountId,\n          departmentId: body.departmentId ? Number(body.departmentId) : oldEmployee.departmentId,\n          position: body.position || oldEmployee.position,\n          salary: body.salary ? Number(body.salary) : oldEmployee.salary,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department exists if changed\n        if (body.departmentId) {\n          const department = departments.find(d => d.id === updatedEmployee.departmentId);\n          if (!department) return error('Department not found');\n        }\n        // Validate account exists if changed\n        if (body.accountId) {\n          const account = accounts.find(a => a.id === updatedEmployee.accountId);\n          if (!account) return error('Account not found');\n        }\n        const department = departments.find(d => d.id === updatedEmployee.departmentId);\n        const account = accounts.find(a => a.id === updatedEmployee.accountId);\n        // Create workflow entry for updated employee\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Updated',\n          details: {\n            task: `Employee ${employeeId} was updated`,\n            additionalInfo: `Updated in ${department.name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(updatedEmployee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedEmployee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          account: basicDetails(account)\n        }));\n      }\n      function deleteEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const employee = employees[employeeIndex];\n        // Delete employee\n        employees = employees.filter(x => x.id !== employeeId);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(Object.assign(Object.assign({}, employee), {\n          status: 'Deleted'\n        }));\n      }\n      function transferEmployee() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeIndex = employees.findIndex(x => x.id === employeeId);\n        if (employeeIndex === -1) return notFound();\n        const employee = employees[employeeIndex];\n        const newDepartmentId = body.departmentId;\n        // Validate department exists\n        const department = departments.find(d => d.id === newDepartmentId);\n        if (!department) return error('Department not found');\n        // Update employee department\n        employee.departmentId = newDepartmentId;\n        employee.lastModifiedDate = new Date().toISOString();\n        // Create workflow entry for employee transfer\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: employeeId,\n          type: 'Transferred',\n          details: {\n            task: `Employee ${employeeId} was transferred to ${department.name} department`,\n            additionalInfo: `Transferred from ${employees.find(x => x.id === employee.departmentId).name} department`\n          },\n          status: 'Completed',\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        employees.push(employee);\n        workflows.push(workflow);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, employee), {\n          departmentName: department.name,\n          department: {\n            id: department.id,\n            name: department.name,\n            description: department.description\n          },\n          status: 'Transferred'\n        }));\n      }\n      // Department functions\n      function getDepartments() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(departments.map(department => {\n          return Object.assign(Object.assign({}, department), {\n            id: department.id.toString(),\n            name: department.name,\n            description: department.description\n          });\n        }));\n      }\n      function getDepartmentById() {\n        if (!isAuthenticated()) return unauthorized();\n        const departmentId = idFromUrl();\n        const department = departments.find(x => x.id === departmentId);\n        if (!department) return notFound();\n        return ok(Object.assign(Object.assign({}, department), {\n          id: department.id.toString(),\n          name: department.name,\n          description: department.description\n        }));\n      }\n      function createDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const department = body;\n        // Validate department name is unique\n        if (departments.find(x => x.name === department.name)) {\n          return error('Department name already exists');\n        }\n        // Assign department id and save\n        department.id = newDepartmentId();\n        departments.push(department);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, department), {\n          id: department.id.toString()\n        }));\n      }\n      function updateDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        const oldDepartment = departments[departmentIndex];\n        const updatedDepartment = Object.assign(Object.assign(Object.assign({}, oldDepartment), body), {\n          id: departmentId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate department name is unique\n        if (departments.find(x => x.name === updatedDepartment.name && x.id !== updatedDepartment.id)) {\n          return error('Department name already exists');\n        }\n        departments.push(updatedDepartment);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, updatedDepartment), {\n          id: updatedDepartment.id.toString()\n        }));\n      }\n      function deleteDepartment() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const departmentId = idFromUrl();\n        const departmentIndex = departments.findIndex(x => x.id === departmentId);\n        if (departmentIndex === -1) return notFound();\n        const department = departments[departmentIndex];\n        // Delete department\n        departments = departments.filter(x => x.id !== departmentId);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(Object.assign(Object.assign({}, department), {\n          status: 'Deleted'\n        }));\n      }\n      // Position functions\n      function getPositions() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(positions.map(position => {\n          return Object.assign(Object.assign({}, position), {\n            id: position.id.toString(),\n            name: position.name,\n            description: position.description\n          });\n        }));\n      }\n      function getPositionById() {\n        if (!isAuthenticated()) return unauthorized();\n        const positionId = idFromUrl();\n        const position = positions.find(x => x.id === positionId);\n        if (!position) return notFound();\n        return ok(Object.assign(Object.assign({}, position), {\n          id: position.id.toString(),\n          name: position.name,\n          description: position.description\n        }));\n      }\n      function createPosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const position = body;\n        // Validate position name is unique\n        if (positions.find(x => x.name === position.name)) {\n          return error('Position name already exists');\n        }\n        // Assign position id and save\n        position.id = newPositionId();\n        positions.push(position);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, position), {\n          id: position.id.toString()\n        }));\n      }\n      function updatePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        const oldPosition = positions[positionIndex];\n        const updatedPosition = Object.assign(Object.assign(Object.assign({}, oldPosition), body), {\n          id: positionId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate position name is unique\n        if (positions.find(x => x.name === updatedPosition.name && x.id !== updatedPosition.id)) {\n          return error('Position name already exists');\n        }\n        positions.push(updatedPosition);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, updatedPosition), {\n          id: updatedPosition.id.toString()\n        }));\n      }\n      function deletePosition() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const positionId = idFromUrl();\n        const positionIndex = positions.findIndex(x => x.id === positionId);\n        if (positionIndex === -1) return notFound();\n        const position = positions[positionIndex];\n        // Delete position\n        positions = positions.filter(x => x.id !== positionId);\n        localStorage.setItem(positionsKey, JSON.stringify(positions));\n        return ok(Object.assign(Object.assign({}, position), {\n          status: 'Deleted'\n        }));\n      }\n      // Request type functions\n      function getRequestTypes() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(requestTypes.map(type => {\n          return Object.assign(Object.assign({}, type), {\n            id: type.id.toString(),\n            name: type.name,\n            description: type.description\n          });\n        }));\n      }\n      function getRequestTypeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const typeId = idFromUrl();\n        const type = requestTypes.find(x => x.id === typeId);\n        if (!type) return notFound();\n        return ok(Object.assign(Object.assign({}, type), {\n          id: type.id.toString(),\n          name: type.name,\n          description: type.description\n        }));\n      }\n      function createRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const type = body;\n        // Validate request type name is unique\n        if (requestTypes.find(x => x.name === type.name)) {\n          return error('Request type name already exists');\n        }\n        // Assign request type id and save\n        type.id = newRequestTypeId();\n        requestTypes.push(type);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, type), {\n          id: type.id.toString()\n        }));\n      }\n      function updateRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const typeId = idFromUrl();\n        const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n        if (typeIndex === -1) return notFound();\n        const oldType = requestTypes[typeIndex];\n        const updatedType = Object.assign(Object.assign(Object.assign({}, oldType), body), {\n          id: typeId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate request type name is unique\n        if (requestTypes.find(x => x.name === updatedType.name && x.id !== updatedType.id)) {\n          return error('Request type name already exists');\n        }\n        requestTypes.push(updatedType);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, updatedType), {\n          id: updatedType.id.toString()\n        }));\n      }\n      function deleteRequestType() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const typeId = idFromUrl();\n        const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n        if (typeIndex === -1) return notFound();\n        const type = requestTypes[typeIndex];\n        // Delete request type\n        requestTypes = requestTypes.filter(x => x.id !== typeId);\n        localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n        return ok(Object.assign(Object.assign({}, type), {\n          status: 'Deleted'\n        }));\n      }\n      // Workflow functions\n      function getWorkflows() {\n        if (!isAuthenticated()) return unauthorized();\n        // Sort workflows in descending order by creation date\n        const sortedWorkflows = [...workflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function getWorkflowById() {\n        if (!isAuthenticated()) return unauthorized();\n        const workflow = workflows.find(x => x.id === idFromUrl());\n        if (!workflow) return notFound();\n        const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n        return ok({\n          id: workflow.id.toString(),\n          type: workflow.type,\n          details: details,\n          status: workflow.status,\n          datetimecreated: workflow.datetimecreated || workflow.createdDate\n        });\n      }\n      function getWorkflowsByRequestId() {\n        if (!isAuthenticated()) return unauthorized();\n        const requestId = idFromUrl();\n        console.log('Looking for workflows with requestId:', requestId);\n        const request = requests.find(x => x.id === requestId);\n        if (!request) {\n          console.log('Request not found with id:', requestId);\n          return notFound();\n        }\n        const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n        console.log('Found workflows:', requestWorkflows.length);\n        // Sort workflows in descending order\n        const sortedWorkflows = [...requestWorkflows].sort((a, b) => {\n          const dateA = new Date(a.datetimecreated || a.createdDate);\n          const dateB = new Date(b.datetimecreated || b.createdDate);\n          return dateB.getTime() - dateA.getTime();\n        });\n        return ok(sortedWorkflows.map(workflow => {\n          const details = typeof workflow.details === 'object' ? `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` : workflow.details || '';\n          return {\n            id: workflow.id.toString(),\n            type: workflow.type,\n            details: details,\n            status: workflow.status,\n            datetimecreated: workflow.datetimecreated || workflow.createdDate\n          };\n        }));\n      }\n      function createWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        console.log('Received workflow data:', body);\n        const workflow = {\n          id: newWorkflowId(),\n          employeeId: body.employeeId,\n          type: body.type,\n          details: body.details,\n          status: body.status,\n          createdDate: new Date().toISOString(),\n          lastModifiedDate: new Date().toISOString()\n        };\n        // Validate required fields\n        const requiredFields = {\n          employeeId: !!workflow.employeeId,\n          type: !!workflow.type,\n          details: !!workflow.details,\n          status: !!workflow.status\n        };\n        console.log('Field validation results:', requiredFields);\n        // Check if any required field is missing\n        const missingFields = Object.entries(requiredFields).filter(([_, isValid]) => !isValid).map(([fieldName]) => fieldName);\n        if (missingFields.length > 0) {\n          return error(`Required fields are missing: ${missingFields.join(', ')}`);\n        }\n        // Validate employee exists\n        const employee = employees.find(e => e.id === workflow.employeeId);\n        if (!employee) return error('Employee not found');\n        employees.push(workflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function updateWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        const oldWorkflow = workflows[workflowIndex];\n        const updatedWorkflow = Object.assign(Object.assign(Object.assign({}, oldWorkflow), body), {\n          id: workflowId,\n          lastModifiedDate: new Date().toISOString()\n        });\n        // Validate employee exists\n        const employee = employees.find(e => e.id === updatedWorkflow.employeeId);\n        if (!employee) return error('Employee not found');\n        employees.push(updatedWorkflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, updatedWorkflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function updateWorkflowStatus() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        const newStatus = body.status;\n        Object.assign(workflow, {\n          status: newStatus,\n          lastModifiedDate: new Date().toISOString()\n        });\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          status: newStatus\n        }));\n      }\n      function deleteWorkflow() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n        if (workflowIndex === -1) return notFound();\n        const workflow = workflows[workflowIndex];\n        const employee = employees.find(e => e.id === workflow.employeeId);\n        // Delete workflow\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          employee: employee ? Object.assign(Object.assign({}, employee), {\n            employeeId: employee.employeeId\n          }) : null\n        }));\n      }\n      function deleteWorkflowItem() {\n        if (!isAuthenticated() || !isAdmin()) return unauthorized();\n        const workflowId = idFromUrl();\n        const workflow = workflows.find(x => x.id === workflowId);\n        if (!workflow) return notFound();\n        // Delete workflow item\n        workflows = workflows.filter(x => x.id !== workflowId);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(Object.assign(Object.assign({}, workflow), {\n          status: 'Deleted'\n        }));\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)(i0.ɵɵinject(i1.AlertService));\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();","map":{"version":3,"mappings":"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","names":["HttpResponse","of","throwError","delay","materialize","dematerialize","Role","accountsKey","accounts","JSON","parse","localStorage","getItem","employeesKey","employees","departmentsKey","departments","id","name","description","requestsKey","requests","requestItemsKey","requestItems","workflowsKey","workflows","positionsKey","positions","requestTypesKey","requestTypes","FakeBackendInterceptor","constructor","alertService","intercept","request","next","url","method","headers","body","ok","status","error","message","unauthorized","notFound","basicDetails","account","title","firstName","lastName","email","role","isVerified","isAuthenticated","currentAccount","isAdmin","Admin","get","startsWith","jwtToken","atob","split","find","x","idFromUrl","urlParts","parseInt","length","getWorkflowsByEmployeeId","internalId","pop","console","log","employee","e","employeeWorkflows","filter","employeeId","sortedWorkflows","sort","a","b","dateA","Date","datetimecreated","createdDate","dateB","getTime","map","workflow","details","task","additionalInfo","toString","type","handleRoute","pipe","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","getAccounts","match","getAccountById","createAccount","updateAccount","deleteAccount","getRequests","getRequestById","getRequestsByEmployeeId","getMyRequests","createRequest","updateRequest","changeRequestStatus","deleteRequest","getEmployees","getEmployeeById","createEmployee","updateEmployee","deleteEmployee","transferEmployee","getDepartments","getDepartmentById","createDepartment","updateDepartment","deleteDepartment","getPositions","getPositionById","createPosition","updatePosition","deletePosition","getRequestTypes","getRequestTypeById","createRequestType","updateRequestType","deleteRequestType","getWorkflows","getWorkflowById","getWorkflowsByRequestId","createWorkflow","updateWorkflow","updateWorkflowStatus","deleteWorkflow","deleteWorkflowItem","handle","password","generateRefreshToken","refreshTokens","push","setItem","stringify","generateJwtToken","getRefreshToken","includes","newRefreshToken","setTimeout","info","location","origin","autoclose","newAccountId","User","dateCreated","toISOString","verificationToken","confirmPassword","verifyUrl","token","filteredRequests","currentUserId","items","item","requestId","requestEmployee","requestAccount","accountId","requestType","t","typeId","fullName","trim","charAt","toUpperCase","slice","toLowerCase","quantity","Object","myRequests","targetEmployee","Number","currentUser","newRequestId","lastModifiedDate","requestItemsList","Array","isArray","Error","newRequestItemId","assign","newItems","newStatus","department","d","departmentId","departmentName","newEmployeeId","position","hireDate","salary","requiredFields","missingFields","entries","_","isValid","fieldName","join","newWorkflowId","employeeIndex","findIndex","oldEmployee","updatedEmployee","newDepartmentId","departmentIndex","oldDepartment","updatedDepartment","positionId","newPositionId","positionIndex","oldPosition","updatedPosition","newRequestTypeId","typeIndex","oldType","updatedType","requestWorkflows","workflowId","workflowIndex","oldWorkflow","updatedWorkflow","factory"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\n\nimport { AlertService } from '@app/_services';\nimport { Role } from '@app/_models';\n\n// array in local storage for accounts\nconst accountsKey = 'request-management-accounts';\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\n\n// array in local storage for employees\nconst employeesKey = 'request-management-employees';\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\n\n// array in local storage for departments\nconst departmentsKey = 'request-management-departments';\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [\n    { id: 1, name: 'HR', description: 'Human Resources' },\n    { id: 2, name: 'IT', description: 'Information Technology' },\n    { id: 3, name: 'Finance', description: 'Finance Department' },\n    { id: 4, name: 'Marketing', description: 'Marketing Department' }\n];\n\n// array in local storage for requests and their items\nconst requestsKey = 'request-management-requests';\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\n\n// array in local storage for request items\nconst requestItemsKey = 'request-management-items';\nlet requestItems = JSON.parse(localStorage.getItem(requestItemsKey)) || [];\n\n// array in local storage for workflows\nconst workflowsKey = 'request-management-workflows';\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n\n// array in local storage for employee positions\nconst positionsKey = 'request-management-positions';\nlet positions = JSON.parse(localStorage.getItem(positionsKey)) || [\n    { id: 1, name: 'Manager', description: 'Department Manager' },\n    { id: 2, name: 'Team Lead', description: 'Team Leader' },\n    { id: 3, name: 'Senior Staff', description: 'Senior Level Staff' },\n    { id: 4, name: 'Junior Staff', description: 'Junior Level Staff' }\n];\n\n// array in local storage for request types\nconst requestTypesKey = 'request-management-request-types';\nlet requestTypes = JSON.parse(localStorage.getItem(requestTypesKey)) || [\n    { id: 1, name: 'Leave Request', description: 'Request for leave or time off' },\n    { id: 2, name: 'Equipment Request', description: 'Request for office equipment' },\n    { id: 3, name: 'Training Request', description: 'Request for training or workshops' },\n    { id: 4, name: 'Other', description: 'Other types of requests' }\n];\n\n@Injectable()\nexport class FakeBackendInterceptor implements HttpInterceptor {\n    constructor(private alertService: AlertService) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { url, method, headers, body } = request;\n        const alertService = this.alertService;\n\n        // Helper functions\n        function ok(body?: any) {\n            return of(new HttpResponse({ status: 200, body }));\n        }\n\n        function error(message: string) {\n            return throwError(() => ({ error: { message } }));\n        }\n\n        function unauthorized() {\n            return throwError(() => ({ status: 401, error: { message: 'Unauthorized' } }));\n        }\n\n        function notFound() {\n            return throwError(() => ({ status: 404, error: { message: 'Not Found' } }));\n        }\n\n        function basicDetails(account: any) {\n            const { id, title, firstName, lastName, email, role, status, isVerified } = account;\n            return { id, title, firstName, lastName, email, role, status, isVerified };\n        }\n\n        function isAuthenticated() {\n            return !!currentAccount();\n        }\n\n        function isAdmin() {\n            return currentAccount()?.role === Role.Admin;\n        }\n\n        function currentAccount() {\n            if (!headers.get('Authorization')?.startsWith('Bearer ')) return null;\n            const jwtToken = JSON.parse(atob(headers.get('Authorization').split('.')[1]));\n            return accounts.find(x => x.id === jwtToken.id);\n        }\n\n        function idFromUrl() {\n            const urlParts = url.split('/');\n            return parseInt(urlParts[urlParts.length - 1]);\n        }\n\n        function getWorkflowsByEmployeeId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const internalId = parseInt(url.split('/').pop());\n            console.log('Looking for workflows with employeeId:', internalId);\n\n            const employee = employees.find(e => e.id === internalId);\n            if (!employee) {\n                console.log('Employee not found with internal id:', internalId);\n                return notFound();\n            }\n            \n            const employeeWorkflows = workflows.filter(x => x.employeeId === employee.id);\n            console.log('Found workflows:', employeeWorkflows.length);\n\n            // Sort workflows in descending order\n            const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        return handleRoute().pipe(\n            delay(500),\n            materialize(),\n            dematerialize()\n        );\n\n        function handleRoute() {\n            switch (true) {\n                case url.endsWith('/accounts/authenticate') && method === 'POST':\n                    return authenticate();\n                case url.endsWith('/accounts/refresh-token') && method === 'POST':\n                    return refreshToken();\n                case url.endsWith('/accounts/revoke-token') && method === 'POST':\n                    return revokeToken();\n                case url.endsWith('/accounts/register') && method === 'POST':\n                    return register();\n                case url.endsWith('/accounts/verify-email') && method === 'POST':\n                    return verifyEmail();\n                case url.endsWith('/accounts') && method === 'GET':\n                    return getAccounts();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n                    return getAccountById();\n                case url.endsWith('/accounts') && method === 'POST':\n                    return createAccount();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'PUT':\n                    return updateAccount();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'DELETE':\n                    return deleteAccount();\n                    \n                // request routes\n                case url.endsWith('/requests') && method === 'GET':\n                    return getRequests();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n                    return getRequestById();\n                case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n                    return getRequestsByEmployeeId();\n                case url.endsWith('/requests/my-requests') && method === 'GET':\n                    return getMyRequests();\n                case url.endsWith('/requests') && method === 'POST':\n                    return createRequest();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n                    return updateRequest();\n                case url.match(/\\/requests\\/\\d+\\/status$/) && method === 'PUT':\n                    return changeRequestStatus();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequest();\n                    \n                // employee routes\n                case url.endsWith('/employees') && method === 'GET':\n                    return getEmployees();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n                    return getEmployeeById();\n                case url.endsWith('/employees') && method === 'POST':\n                    return createEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n                    return updateEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n                    return deleteEmployee();\n                case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'PUT':\n                    return transferEmployee();\n\n                // department routes\n                case url.endsWith('/departments') && method === 'GET':\n                    return getDepartments();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n                    return getDepartmentById();\n                case url.endsWith('/departments') && method === 'POST':\n                    return createDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n                    return updateDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n                    return deleteDepartment();\n                    \n                // position routes\n                case url.endsWith('/positions') && method === 'GET':\n                    return getPositions();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'GET':\n                    return getPositionById();\n                case url.endsWith('/positions') && method === 'POST':\n                    return createPosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'PUT':\n                    return updatePosition();\n                case url.match(/\\/positions\\/\\d+$/) && method === 'DELETE':\n                    return deletePosition();\n\n                // request type routes\n                case url.endsWith('/request-types') && method === 'GET':\n                    return getRequestTypes();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'GET':\n                    return getRequestTypeById();\n                case url.endsWith('/request-types') && method === 'POST':\n                    return createRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'PUT':\n                    return updateRequestType();\n                case url.match(/\\/request-types\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequestType();\n\n                // workflow routes\n                case url.endsWith('/workflows') && method === 'GET':\n                    return getWorkflows();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'GET':\n                    return getWorkflowById();\n                case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByEmployeeId();\n                case url.match(/\\/workflows\\/request\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByRequestId();\n                case url.endsWith('/workflows') && method === 'POST':\n                    return createWorkflow();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'PUT':\n                    return updateWorkflow();\n                case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n                    return updateWorkflowStatus();\n                case url.match(/\\/workflows\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflow();\n                case url.match(/\\/workflows\\/items\\/\\d+$/) && method === 'DELETE':\n                    return deleteWorkflowItem();\n                    \n                default:\n                    return next.handle(request);\n            }\n        }\n\n        // Authentication functions\n        function authenticate() {\n            const { email, password } = body;\n            const account = accounts.find(x => x.email === email);\n        \n            if (!account) return error('Email or password is incorrect');\n            if (password !== account.password) return error('Email or password is incorrect');\n            if (!account.isVerified) return error('Please verify your email before logging in');\n\n            // Generate refresh token and save\n            const refreshToken = generateRefreshToken();\n            account.refreshTokens = account.refreshTokens || [];\n            account.refreshTokens.push(refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // Return basic details and tokens\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account),\n                refreshToken\n            });\n        }\n\n        function refreshToken() {\n            const refreshToken = getRefreshToken();\n            \n            if (!refreshToken) return unauthorized();\n\n            const account = accounts.find(x => x.refreshTokens?.includes(refreshToken));\n            \n            if (!account) return unauthorized();\n\n            // Generate new refresh token and save\n            const newRefreshToken = generateRefreshToken();\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            account.refreshTokens.push(newRefreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // Return basic details and tokens\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account),\n                refreshToken: newRefreshToken\n            });\n        }\n\n        function revokeToken() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const refreshToken = getRefreshToken();\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n\n            // revoke token and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function register() {\n            const account = body;\n\n            if (accounts.find(x => x.email === account.email)) {\n                // display email already registered message in alert\n                setTimeout(() => {\n                    alertService.info(`\n                        <h4>Email Already Registered</h4>\n                        <p>Your email ${account.email} is already registered.</p>\n                        <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                        <div>\n                        <strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.\n                        </div>\n                    `, { autoclose: false });\n                }, 1000);\n\n                // always return ok() response to prevent email enumeration\n                return ok();\n            }\n\n            // assign account id and a few other properties then save\n            account.id = newAccountId();\n            if (account.id === 1) {\n                // first registered account is an admin\n                account.role = Role.Admin;\n                account.status = 'Active'; // Admin accounts get active status\n            } else {\n                account.role = Role.User;\n                account.status = 'Inactive'; // User accounts get inacitve status upon creation\n            }\n            account.dateCreated = new Date().toISOString();\n            account.verificationToken = new Date().getTime().toString();\n            account.isVerified = false;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            // display verification email in alert\n            setTimeout(() => {\n                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;\n                alertService.info(`\n                    <h4>Verification Email</h4>\n                    <p>Thanks for registering!</p>\n                    <p>Please click the below link to verify your email address:</p>\n                    <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                    <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an API. A real backend would send a real email.</div>\n                `, { autoclose: false });\n            }, 1000);\n\n            return ok();\n        }\n\n        function verifyEmail() {\n            const { token } = body;\n            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n\n            if (!account) return error('Verification failed');\n\n            // set is verified flag to true if token is valid\n            account.isVerified = true;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function getAccounts() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(accounts.map(x => basicDetails(x)));\n        }\n\n        function getAccountById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            let account = accounts.find(x => x.id === idFromUrl());\n\n            // user accounts can get own profile and admin accounts can get all profiles\n            if (account.id !== currentAccount().id && !isAdmin()) {\n                return unauthorized();\n            }\n\n            return ok(basicDetails(account));\n        }\n\n        // Request functions\n        function getRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            // Return all requests for admins, or filtered for regular users\n            let filteredRequests = [...requests];\n            if (!isAdmin()) {\n                const currentUserId = currentAccount().id;\n                filteredRequests = requests.filter(x => x.employeeId === currentUserId);\n            }\n\n            return ok(filteredRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const requestEmployee = employees.find(e => e.id === request.employeeId);\n                const requestAccount = accounts.find(a => a.id === requestEmployee?.accountId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n\n                return {\n                    id: request.id,\n                    employeeId: requestEmployee?.employeeId || '',\n                    type: requestType?.name || request.type || '',\n                    status: request.status,\n                    createdDate: request.createdDate,\n                    items: items,\n                    employee: {\n                        id: requestEmployee?.id,\n                        employeeId: requestEmployee?.employeeId,\n                        fullName: requestAccount ? `${requestAccount.firstName} ${requestAccount.lastName}`.trim() : ''\n                    }\n                };\n            }));\n        }\n\n        function getRequestById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            // Check authorization\n            if (!isAdmin() && request.employeeId !== currentAccount().id) {\n                return unauthorized();\n            }\n\n            // Add related data\n            const items = requestItems.filter(item => item.requestId === request.id);\n            const employee = employees.find(e => e.id === request.employeeId);\n            const account = accounts.find(a => a.id === employee?.accountId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n\n            // Format employee name with proper capitalization\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                items: items.map(item => ({\n                    id: item.id,\n                    name: item.name,\n                    quantity: item.quantity\n                })),\n                employee: employee ? {\n                    ...employee,\n                    fullName: fullName,\n                    employeeId: employee.employeeId\n                } : null,\n                type: requestType?.name || request.type\n            });\n        }\n\n        function getRequestsByEmployeeId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const internalId = parseInt(url.split('/').pop());\n            console.log('Looking for workflows with employeeId:', internalId);\n\n            const employee = employees.find(e => e.id === internalId);\n            if (!employee) {\n                console.log('Employee not found with internal id:', internalId);\n                return notFound();\n            }\n            \n            const employeeWorkflows = workflows.filter(x => x.employeeId === employee.id);\n            console.log('Found workflows:', employeeWorkflows.length);\n\n            // Sort workflows in descending order\n            const sortedWorkflows = [...employeeWorkflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        function getMyRequests() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const currentUserId = currentAccount().id;\n            const myRequests = requests.filter(x => x.employeeId === currentUserId);\n\n            return ok(myRequests.map(request => {\n                const items = requestItems.filter(item => item.requestId === request.id);\n                const employee = employees.find(e => e.id === request.employeeId);\n                const account = accounts.find(a => a.id === employee?.accountId);\n                const requestType = requestTypes.find(t => t.id === request.typeId);\n                return {\n                    ...request,\n                    items,\n                    employee: employee ? {\n                        ...employee,\n                        fullName: `${account?.firstName || ''} ${account?.lastName || ''}`.trim(),\n                        employeeId: employee.employeeId\n                    } : null,\n                    type: requestType ? requestType.name : request.type\n                };\n            }));\n        }\n\n        function createRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            console.log('Received request data:', body);\n\n            // Find employee by employeeId if provided, otherwise use current user\n            let targetEmployee;\n            if (body.employeeId) {\n                // First try to find by internal ID\n                targetEmployee = employees.find(e => e.id === Number(body.employeeId));\n                if (!targetEmployee) {\n                    // If not found, try to find by employee ID string\n                    targetEmployee = employees.find(e => e.employeeId === body.employeeId);\n                }\n                if (!targetEmployee) return error('Employee not found');\n            } else {\n                const currentUser = currentAccount();\n                targetEmployee = employees.find(e => e.accountId === currentUser.id);\n                if (!targetEmployee) return error('Current user is not an employee');\n            }\n\n            const request = {\n                id: newRequestId(),\n                employeeId: targetEmployee.id,\n                type: body.type,\n                description: body.description || '',\n                status: 'Pending',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n\n            // Validate required fields\n            if (!request.type) {\n                return error('Request type is required');\n            }\n\n            // Validate and process items if present\n            let requestItemsList = [];\n            if (body.items && Array.isArray(body.items)) {\n                try {\n                    requestItemsList = body.items.map(item => {\n                        if (!item.name || !item.quantity) {\n                            throw new Error('Invalid item data');\n                        }\n                        return {\n                            id: newRequestItemId(),\n                            requestId: request.id,\n                            name: item.name,\n                            quantity: Number(item.quantity)\n                        };\n                    });\n                } catch (error) {\n                    return error('Invalid item data provided');\n                }\n            }\n\n            // Save request and items\n            requests.push(request);\n            if (requestItemsList.length > 0) {\n                requestItems.push(...requestItemsList);\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n            }\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            const account = accounts.find(a => a.id === targetEmployee.accountId);\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                items: requestItemsList,\n                employeeId: targetEmployee.employeeId,\n                employee: {\n                    id: targetEmployee.id,\n                    employeeId: targetEmployee.employeeId,\n                    fullName: fullName\n                }\n            });\n        }\n\n        function updateRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            console.log('Received update data:', body);\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Update basic request fields\n            Object.assign(request, {\n                type: body.type,\n                description: body.description || request.description,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            // Handle item changes\n            if (body.items) {\n                // Remove all existing items for this request\n                requestItems = requestItems.filter(item => item.requestId !== requestId);\n\n                // Add new/updated items\n                const newItems = body.items.map(item => ({\n                    id: item.id || newRequestItemId(),\n                    requestId: requestId,\n                    name: item.name,\n                    quantity: Number(item.quantity)\n                }));\n\n                requestItems.push(...newItems);\n                localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n            }\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            // Get related data for response\n            const employee = employees.find(e => e.id === request.employeeId);\n            const account = accounts.find(a => a.id === employee?.accountId);\n            const firstName = account?.firstName ? account.firstName.charAt(0).toUpperCase() + account.firstName.slice(1).toLowerCase() : '';\n            const lastName = account?.lastName ? account.lastName.charAt(0).toUpperCase() + account.lastName.slice(1).toLowerCase() : '';\n            const fullName = `${firstName} ${lastName}`.trim();\n\n            return ok({\n                ...request,\n                items: requestItems.filter(item => item.requestId === requestId),\n                employee: employee ? {\n                    ...employee,\n                    fullName: fullName,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function changeRequestStatus() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            const newStatus = body.status;\n\n            Object.assign(request, {\n                status: newStatus,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            // Get related data for response\n            const employee = employees.find(e => e.id === request.employeeId);\n            const requestType = requestTypes.find(t => t.id === request.typeId);\n\n            return ok({\n                ...request,\n                items: requestItems.filter(item => item.requestId === request.id),\n                employee: employee,\n                type: requestType.name\n            });\n        }\n\n        function deleteRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const requestId = idFromUrl();\n            const request = requests.find(x => x.id === requestId);\n\n            if (!request) return notFound();\n            if (request.employeeId !== currentAccount().id && !isAdmin()) return unauthorized();\n\n            // Delete request and its items\n            requests = requests.filter(x => x.id !== requestId);\n            requestItems = requestItems.filter(x => x.requestId !== requestId);\n\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n            localStorage.setItem(requestItemsKey, JSON.stringify(requestItems));\n\n            return ok();\n        }\n\n        // Employee functions\n        function getEmployees() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(employees.map(employee => {\n                const department = departments.find(d => d.id === employee.departmentId);\n                const account = accounts.find(a => a.id === employee.accountId);\n                return {\n                    ...employee,\n                    employeeId: employee.employeeId,\n                    fullName: account ? `${account.firstName} ${account.lastName}`.trim() : '',\n                    department: department ? {\n                        id: department.id,\n                        name: department.name,\n                        description: department.description\n                    } : null\n                };\n            }));\n        }\n\n        function getEmployeeById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employee = employees.find(x => x.id === employeeId);\n            \n            if (!employee) return notFound();\n            \n            // Get fresh department data\n            const department = departments.find(d => d.id === employee.departmentId);\n            if (!department) return error('Department not found');\n            \n            const account = accounts.find(a => a.id === employee.accountId);\n            \n            // Return complete employee data with fresh relations\n            return ok({\n                ...employee,\n                employeeId: employee.employeeId,\n                fullName: account ? `${account.firstName} ${account.lastName}`.trim() : '',\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function createEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            // Log the received data for debugging\n            console.log('Received employee data:', body);\n\n            // Validate department exists\n            const department = departments.find(d => d.id === Number(body.departmentId));\n            if (!department) return error('Department not found');\n\n            const employee = {\n                ...body,\n                id: newEmployeeId(),\n                accountId: Number(body.accountId),\n                employeeId: body.employeeId,\n                departmentId: Number(body.departmentId),\n                position: body.position,\n                hireDate: body.hireDate,\n                salary: Number(body.salary),\n                status: body.status,\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Check each required field individually and log the result\n            const requiredFields = {\n                accountId: !!employee.accountId,\n                employeeId: !!employee.employeeId,\n                departmentId: !!employee.departmentId,\n                position: !!employee.position,\n                hireDate: !!employee.hireDate,\n                salary: !!employee.salary,\n                status: !!employee.status\n            };\n            \n            console.log('Field validation results:', requiredFields);\n            \n            // Check if any required field is missing\n            const missingFields = Object.entries(requiredFields)\n                .filter(([_, isValid]) => !isValid)\n                .map(([fieldName]) => fieldName);\n            \n            if (missingFields.length > 0) {\n                return error(`Required fields are missing: ${missingFields.join(', ')}`);\n            }\n\n            // Validate account exists\n            const account = accounts.find(a => a.id === employee.accountId);\n            if (!account) return error('Account not found');\n            \n            // Create workflow entry for new employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employee.id,\n                type: 'Added',\n                details: {\n                    task: `New employee ${employee.employeeId} was added`,\n                    additionalInfo: `Added to ${department.name} department as ${employee.position}`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(employee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...employee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function updateEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const oldEmployee = employees[employeeIndex];\n            const updatedEmployee = {\n                ...oldEmployee,\n                ...body,\n                id: employeeId,\n                accountId: body.accountId ? Number(body.accountId) : oldEmployee.accountId,\n                departmentId: body.departmentId ? Number(body.departmentId) : oldEmployee.departmentId,\n                position: body.position || oldEmployee.position,\n                salary: body.salary ? Number(body.salary) : oldEmployee.salary,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate department exists if changed\n            if (body.departmentId) {\n                const department = departments.find(d => d.id === updatedEmployee.departmentId);\n                if (!department) return error('Department not found');\n            }\n\n            // Validate account exists if changed\n            if (body.accountId) {\n                const account = accounts.find(a => a.id === updatedEmployee.accountId);\n                if (!account) return error('Account not found');\n            }\n            \n            const department = departments.find(d => d.id === updatedEmployee.departmentId);\n            const account = accounts.find(a => a.id === updatedEmployee.accountId);\n            \n            // Create workflow entry for updated employee\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Updated',\n                details: {\n                    task: `Employee ${employeeId} was updated`,\n                    additionalInfo: `Updated in ${department.name} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(updatedEmployee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...updatedEmployee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                account: basicDetails(account)\n            });\n        }\n\n        function deleteEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const employee = employees[employeeIndex];\n            \n            // Delete employee\n            employees = employees.filter(x => x.id !== employeeId);\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            \n            return ok({\n                ...employee,\n                status: 'Deleted'\n            });\n        }\n\n        function transferEmployee() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const employeeId = idFromUrl();\n            const employeeIndex = employees.findIndex(x => x.id === employeeId);\n            \n            if (employeeIndex === -1) return notFound();\n            \n            const employee = employees[employeeIndex];\n            const newDepartmentId = body.departmentId;\n            \n            // Validate department exists\n            const department = departments.find(d => d.id === newDepartmentId);\n            if (!department) return error('Department not found');\n\n            // Update employee department\n            employee.departmentId = newDepartmentId;\n            employee.lastModifiedDate = new Date().toISOString();\n            \n            // Create workflow entry for employee transfer\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: employeeId,\n                type: 'Transferred',\n                details: {\n                    task: `Employee ${employeeId} was transferred to ${department.name} department`,\n                    additionalInfo: `Transferred from ${employees.find(x => x.id === employee.departmentId).name} department`\n                },\n                status: 'Completed',\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            employees.push(employee);\n            workflows.push(workflow);\n            \n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...employee,\n                departmentName: department.name,\n                department: {\n                    id: department.id,\n                    name: department.name,\n                    description: department.description\n                },\n                status: 'Transferred'\n            });\n        }\n\n        // Department functions\n        function getDepartments() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(departments.map(department => {\n                return {\n                    ...department,\n                    id: department.id.toString(),\n                    name: department.name,\n                    description: department.description\n                };\n            }));\n        }\n\n        function getDepartmentById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            const department = departments.find(x => x.id === departmentId);\n            \n            if (!department) return notFound();\n            \n            return ok({\n                ...department,\n                id: department.id.toString(),\n                name: department.name,\n                description: department.description\n            });\n        }\n\n        function createDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const department = body;\n            \n            // Validate department name is unique\n            if (departments.find(x => x.name === department.name)) {\n                return error('Department name already exists');\n            }\n            \n            // Assign department id and save\n            department.id = newDepartmentId();\n            departments.push(department);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...department,\n                id: department.id.toString()\n            });\n        }\n\n        function updateDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const departmentId = idFromUrl();\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\n            \n            if (departmentIndex === -1) return notFound();\n            \n            const oldDepartment = departments[departmentIndex];\n            const updatedDepartment = {\n                ...oldDepartment,\n                ...body,\n                id: departmentId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate department name is unique\n            if (departments.find(x => x.name === updatedDepartment.name && x.id !== updatedDepartment.id)) {\n                return error('Department name already exists');\n            }\n\n            departments.push(updatedDepartment);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...updatedDepartment,\n                id: updatedDepartment.id.toString()\n            });\n        }\n\n        function deleteDepartment() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const departmentId = idFromUrl();\n            const departmentIndex = departments.findIndex(x => x.id === departmentId);\n            \n            if (departmentIndex === -1) return notFound();\n            \n            const department = departments[departmentIndex];\n            \n            // Delete department\n            departments = departments.filter(x => x.id !== departmentId);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n            \n            return ok({\n                ...department,\n                status: 'Deleted'\n            });\n        }\n\n        // Position functions\n        function getPositions() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(positions.map(position => {\n                return {\n                    ...position,\n                    id: position.id.toString(),\n                    name: position.name,\n                    description: position.description\n                };\n            }));\n        }\n\n        function getPositionById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            const position = positions.find(x => x.id === positionId);\n            \n            if (!position) return notFound();\n            \n            return ok({\n                ...position,\n                id: position.id.toString(),\n                name: position.name,\n                description: position.description\n            });\n        }\n\n        function createPosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const position = body;\n            \n            // Validate position name is unique\n            if (positions.find(x => x.name === position.name)) {\n                return error('Position name already exists');\n            }\n            \n            // Assign position id and save\n            position.id = newPositionId();\n            positions.push(position);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...position,\n                id: position.id.toString()\n            });\n        }\n\n        function updatePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const positionId = idFromUrl();\n            const positionIndex = positions.findIndex(x => x.id === positionId);\n            \n            if (positionIndex === -1) return notFound();\n            \n            const oldPosition = positions[positionIndex];\n            const updatedPosition = {\n                ...oldPosition,\n                ...body,\n                id: positionId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate position name is unique\n            if (positions.find(x => x.name === updatedPosition.name && x.id !== updatedPosition.id)) {\n                return error('Position name already exists');\n            }\n\n            positions.push(updatedPosition);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...updatedPosition,\n                id: updatedPosition.id.toString()\n            });\n        }\n\n        function deletePosition() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const positionId = idFromUrl();\n            const positionIndex = positions.findIndex(x => x.id === positionId);\n            \n            if (positionIndex === -1) return notFound();\n            \n            const position = positions[positionIndex];\n            \n            // Delete position\n            positions = positions.filter(x => x.id !== positionId);\n            localStorage.setItem(positionsKey, JSON.stringify(positions));\n            \n            return ok({\n                ...position,\n                status: 'Deleted'\n            });\n        }\n\n        // Request type functions\n        function getRequestTypes() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            return ok(requestTypes.map(type => {\n                return {\n                    ...type,\n                    id: type.id.toString(),\n                    name: type.name,\n                    description: type.description\n                };\n            }));\n        }\n\n        function getRequestTypeById() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const typeId = idFromUrl();\n            const type = requestTypes.find(x => x.id === typeId);\n            \n            if (!type) return notFound();\n            \n            return ok({\n                ...type,\n                id: type.id.toString(),\n                name: type.name,\n                description: type.description\n            });\n        }\n\n        function createRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const type = body;\n            \n            // Validate request type name is unique\n            if (requestTypes.find(x => x.name === type.name)) {\n                return error('Request type name already exists');\n            }\n            \n            // Assign request type id and save\n            type.id = newRequestTypeId();\n            requestTypes.push(type);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...type,\n                id: type.id.toString()\n            });\n        }\n\n        function updateRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const typeId = idFromUrl();\n            const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n            \n            if (typeIndex === -1) return notFound();\n            \n            const oldType = requestTypes[typeIndex];\n            const updatedType = {\n                ...oldType,\n                ...body,\n                id: typeId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate request type name is unique\n            if (requestTypes.find(x => x.name === updatedType.name && x.id !== updatedType.id)) {\n                return error('Request type name already exists');\n            }\n\n            requestTypes.push(updatedType);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...updatedType,\n                id: updatedType.id.toString()\n            });\n        }\n\n        function deleteRequestType() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const typeId = idFromUrl();\n            const typeIndex = requestTypes.findIndex(x => x.id === typeId);\n            \n            if (typeIndex === -1) return notFound();\n            \n            const type = requestTypes[typeIndex];\n            \n            // Delete request type\n            requestTypes = requestTypes.filter(x => x.id !== typeId);\n            localStorage.setItem(requestTypesKey, JSON.stringify(requestTypes));\n            \n            return ok({\n                ...type,\n                status: 'Deleted'\n            });\n        }\n\n        // Workflow functions\n        function getWorkflows() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            // Sort workflows in descending order by creation date\n            const sortedWorkflows = [...workflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        function getWorkflowById() {\n            if (!isAuthenticated()) return unauthorized();\n            const workflow = workflows.find(x => x.id === idFromUrl());\n            if (!workflow) return notFound();\n            \n            const details = typeof workflow.details === 'object' ? \n                `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                workflow.details || '';\n\n            return ok({\n                id: workflow.id.toString(),\n                type: workflow.type,\n                details: details,\n                status: workflow.status,\n                datetimecreated: workflow.datetimecreated || workflow.createdDate\n            });\n        }\n\n        function getWorkflowsByRequestId() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const requestId = idFromUrl();\n            console.log('Looking for workflows with requestId:', requestId);\n\n            const request = requests.find(x => x.id === requestId);\n            if (!request) {\n                console.log('Request not found with id:', requestId);\n                return notFound();\n            }\n            \n            const requestWorkflows = workflows.filter(x => x.requestId === requestId);\n            console.log('Found workflows:', requestWorkflows.length);\n\n            // Sort workflows in descending order\n            const sortedWorkflows = [...requestWorkflows].sort((a, b) => {\n                const dateA = new Date(a.datetimecreated || a.createdDate);\n                const dateB = new Date(b.datetimecreated || b.createdDate);\n                return dateB.getTime() - dateA.getTime();\n            });\n\n            return ok(sortedWorkflows.map(workflow => {\n                const details = typeof workflow.details === 'object' ? \n                    `${workflow.details.task}${workflow.details.additionalInfo ? ` - ${workflow.details.additionalInfo}` : ''}` :\n                    workflow.details || '';\n\n                return {\n                    id: workflow.id.toString(),\n                    type: workflow.type,\n                    details: details,\n                    status: workflow.status,\n                    datetimecreated: workflow.datetimecreated || workflow.createdDate\n                };\n            }));\n        }\n\n        function createWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            console.log('Received workflow data:', body);\n\n            const workflow = {\n                id: newWorkflowId(),\n                employeeId: body.employeeId,\n                type: body.type,\n                details: body.details,\n                status: body.status,\n                createdDate: new Date().toISOString(),\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate required fields\n            const requiredFields = {\n                employeeId: !!workflow.employeeId,\n                type: !!workflow.type,\n                details: !!workflow.details,\n                status: !!workflow.status\n            };\n            \n            console.log('Field validation results:', requiredFields);\n            \n            // Check if any required field is missing\n            const missingFields = Object.entries(requiredFields)\n                .filter(([_, isValid]) => !isValid)\n                .map(([fieldName]) => fieldName);\n            \n            if (missingFields.length > 0) {\n                return error(`Required fields are missing: ${missingFields.join(', ')}`);\n            }\n\n            // Validate employee exists\n            const employee = employees.find(e => e.id === workflow.employeeId);\n            if (!employee) return error('Employee not found');\n            \n            employees.push(workflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function updateWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n            \n            const workflowId = idFromUrl();\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n            \n            if (workflowIndex === -1) return notFound();\n            \n            const oldWorkflow = workflows[workflowIndex];\n            const updatedWorkflow = {\n                ...oldWorkflow,\n                ...body,\n                id: workflowId,\n                lastModifiedDate: new Date().toISOString()\n            };\n            \n            // Validate employee exists\n            const employee = employees.find(e => e.id === updatedWorkflow.employeeId);\n            if (!employee) return error('Employee not found');\n            \n            employees.push(updatedWorkflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...updatedWorkflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function updateWorkflowStatus() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflow = workflows.find(x => x.id === workflowId);\n            \n            if (!workflow) return notFound();\n            \n            const newStatus = body.status;\n\n            Object.assign(workflow, {\n                status: newStatus,\n                lastModifiedDate: new Date().toISOString()\n            });\n\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok({\n                ...workflow,\n                status: newStatus\n            });\n        }\n\n        function deleteWorkflow() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflowIndex = workflows.findIndex(x => x.id === workflowId);\n            \n            if (workflowIndex === -1) return notFound();\n            \n            const workflow = workflows[workflowIndex];\n            const employee = employees.find(e => e.id === workflow.employeeId);\n            \n            // Delete workflow\n            workflows = workflows.filter(x => x.id !== workflowId);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                employee: employee ? {\n                    ...employee,\n                    employeeId: employee.employeeId\n                } : null\n            });\n        }\n\n        function deleteWorkflowItem() {\n            if (!isAuthenticated() || !isAdmin()) return unauthorized();\n\n            const workflowId = idFromUrl();\n            const workflow = workflows.find(x => x.id === workflowId);\n            \n            if (!workflow) return notFound();\n            \n            // Delete workflow item\n            workflows = workflows.filter(x => x.id !== workflowId);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n            \n            return ok({\n                ...workflow,\n                status: 'Deleted'\n            });\n        }\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}