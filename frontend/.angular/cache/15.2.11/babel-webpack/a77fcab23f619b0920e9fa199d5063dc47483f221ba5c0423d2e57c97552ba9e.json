{"ast":null,"code":"import { HttpResponse, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\n// arrays in local storage for data persistence\nconst accountsKey = 'request-management-accounts';\nconst employeesKey = 'request-management-employees';\nconst departmentsKey = 'request-management-departments';\nconst requestsKey = 'request-management-requests';\nconst workflowsKey = 'request-management-workflows';\n// retrieve data from local storage\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [];\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\nexport let FakeBackendInterceptor = /*#__PURE__*/(() => {\n  class FakeBackendInterceptor {\n    intercept(request, next) {\n      const {\n        url,\n        method,\n        headers,\n        body\n      } = request;\n      return handleRoute();\n      function handleRoute() {\n        switch (true) {\n          // accounts\n          case url.endsWith('/accounts/authenticate') && method === 'POST':\n            return authenticate();\n          case url.endsWith('/accounts/refresh-token') && method === 'POST':\n            return refreshToken();\n          case url.endsWith('/accounts/revoke-token') && method === 'POST':\n            return revokeToken();\n          case url.endsWith('/accounts/register') && method === 'POST':\n            return register();\n          case url.endsWith('/accounts/verify-email') && method === 'POST':\n            return verifyEmail();\n          case url.endsWith('/accounts') && method === 'GET':\n            return getAccounts();\n          case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n            return getAccountById();\n          // employees\n          case url.endsWith('/employees') && method === 'POST':\n            return createEmployee();\n          case url.endsWith('/employees') && method === 'GET':\n            return getEmployees();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n            return getEmployeeById();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n            return updateEmployee();\n          case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n            return deleteEmployee();\n          case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'POST':\n            return transferEmployee();\n          // departments\n          case url.endsWith('/departments') && method === 'POST':\n            return createDepartment();\n          case url.endsWith('/departments') && method === 'GET':\n            return getDepartments();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n            return getDepartmentById();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n            return updateDepartment();\n          case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n            return deleteDepartment();\n          // requests\n          case url.endsWith('/requests') && method === 'POST':\n            return createRequest();\n          case url.endsWith('/requests') && method === 'GET':\n            return getRequests();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n            return getRequestById();\n          case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n            return getRequestsByEmployee();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n            return updateRequest();\n          case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n            return deleteRequest();\n          // workflows\n          case url.endsWith('/workflows') && method === 'POST':\n            return createWorkflow();\n          case url.endsWith('/workflows') && method === 'GET':\n            return getWorkflows();\n          case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n            return getWorkflowsByEmployee();\n          case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n            return updateWorkflowStatus();\n          case url.endsWith('/workflows/onboarding') && method === 'POST':\n            return initiateOnboarding();\n          default:\n            // pass through any requests not handled above\n            return next.handle(request);\n        }\n      }\n      // route functions\n      function authenticate() {\n        const {\n          email,\n          password\n        } = body;\n        const account = accounts.find(x => x.email === email);\n        if (!account) return error('Email or password is incorrect');\n        if (password !== account.password) return error('Email or password is incorrect');\n        if (!account.isVerified) return error('Please verify your email before logging in');\n        if (account.status === 'Inactive') return error('Account is inactive');\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) return unauthorized();\n        const account = accounts.find(x => {\n          var _a;\n          return (_a = x.refreshTokens) === null || _a === void 0 ? void 0 : _a.includes(refreshToken);\n        });\n        if (!account) return unauthorized();\n        // replace old refresh token with a new one\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        account.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok(Object.assign(Object.assign({}, basicDetails(account)), {\n          jwtToken: generateJwtToken(account)\n        }));\n      }\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n        const refreshToken = getRefreshToken();\n        const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n        // revoke token and save\n        account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function register() {\n        const account = body;\n        if (accounts.find(x => x.email === account.email)) {\n          // Return ok response to prevent email enumeration\n          return ok();\n        }\n        // Assign account id and a few other properties then save\n        account.id = newAccountId();\n        if (account.id === 1) {\n          // First registered account is an admin\n          account.role = Role.Admin;\n          account.status = 'Active';\n        } else {\n          account.role = Role.User;\n          account.status = 'Inactive';\n        }\n        account.dateCreated = new Date().toISOString();\n        account.verificationToken = new Date().getTime().toString();\n        account.isVerified = false;\n        account.refreshTokens = [];\n        delete account.confirmPassword;\n        accounts.push(account);\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function verifyEmail() {\n        const {\n          token\n        } = body;\n        const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n        if (!account) return error('Verification failed');\n        // Set is verified flag to true if token is valid\n        account.isVerified = true;\n        localStorage.setItem(accountsKey, JSON.stringify(accounts));\n        return ok();\n      }\n      function getAccounts() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(accounts.map(x => basicDetails(x)));\n      }\n      function getAccountById() {\n        if (!isAuthenticated()) return unauthorized();\n        const account = accounts.find(x => x.id === idFromUrl());\n        return account ? ok(basicDetails(account)) : notFound();\n      }\n      function getEmployees() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(employees.map(x => {\n          const account = accounts.find(a => a.id === x.accountId);\n          const department = departments.find(d => d.id === x.departmentId);\n          return Object.assign(Object.assign({}, x), {\n            account: basicDetails(account),\n            departmentName: department === null || department === void 0 ? void 0 : department.name\n          });\n        }));\n      }\n      function getEmployeeById() {\n        if (!isAuthenticated()) return unauthorized();\n        const employee = employees.find(x => x.id === idFromUrl());\n        if (!employee) return notFound();\n        const account = accounts.find(x => x.id === employee.accountId);\n        const department = departments.find(x => x.id === employee.departmentId);\n        return ok(Object.assign(Object.assign({}, employee), {\n          account: basicDetails(account),\n          departmentName: department === null || department === void 0 ? void 0 : department.name\n        }));\n      }\n      function createEmployee() {\n        if (!isAdmin()) return unauthorized();\n        const employee = body;\n        employee.id = newId(employees);\n        employees.push(employee);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(employee);\n      }\n      function updateEmployee() {\n        if (!isAdmin()) return unauthorized();\n        const employee = employees.find(x => x.id === idFromUrl());\n        if (!employee) return notFound();\n        Object.assign(employee, body);\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(employee);\n      }\n      function deleteEmployee() {\n        if (!isAdmin()) return unauthorized();\n        employees = employees.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok();\n      }\n      function transferEmployee() {\n        if (!isAdmin()) return unauthorized();\n        const employee = employees.find(x => x.id === idFromUrl());\n        if (!employee) return notFound();\n        const {\n          departmentId\n        } = body;\n        if (!departments.find(x => x.id === departmentId)) return error('Department not found');\n        employee.departmentId = departmentId;\n        localStorage.setItem(employeesKey, JSON.stringify(employees));\n        return ok(employee);\n      }\n      function getDepartments() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(departments);\n      }\n      function createDepartment() {\n        if (!isAdmin()) return unauthorized();\n        const department = body;\n        department.id = newId(departments);\n        departments.push(department);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(department);\n      }\n      function updateDepartment() {\n        if (!isAdmin()) return unauthorized();\n        const department = departments.find(x => x.id === idFromUrl());\n        if (!department) return notFound();\n        Object.assign(department, body);\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok(department);\n      }\n      function deleteDepartment() {\n        if (!isAdmin()) return unauthorized();\n        departments = departments.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(departmentsKey, JSON.stringify(departments));\n        return ok();\n      }\n      function getRequests() {\n        if (!isAuthenticated()) return unauthorized();\n        if (!isAdmin() && !isModerator()) {\n          // Regular users can only see their own requests\n          const employee = employees.find(x => x.accountId === currentAccount().id);\n          return ok(requests.filter(x => x.employeeId === (employee === null || employee === void 0 ? void 0 : employee.id)));\n        }\n        return ok(requests);\n      }\n      function getRequestsByEmployee() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = idFromUrl();\n        const employeeRequests = requests.filter(x => x.employeeId === employeeId);\n        if (!isAdmin() && !isModerator() && !isOwnEmployee(employeeId)) {\n          return unauthorized();\n        }\n        return ok(employeeRequests);\n      }\n      function createRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = body;\n        request.id = newId(requests);\n        request.status = 'Pending';\n        request.createdDate = new Date().toISOString();\n        requests.push(request);\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        return ok(request);\n      }\n      function updateRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        if (!isAdmin() && !isModerator() && !isOwnRequest(request.id)) {\n          return unauthorized();\n        }\n        Object.assign(request, body);\n        request.lastModifiedDate = new Date().toISOString();\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        return ok(request);\n      }\n      function deleteRequest() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        if (!isAdmin() && !isOwnRequest(request.id)) {\n          return unauthorized();\n        }\n        requests = requests.filter(x => x.id !== idFromUrl());\n        localStorage.setItem(requestsKey, JSON.stringify(requests));\n        return ok();\n      }\n      function getWorkflows() {\n        if (!isAuthenticated()) return unauthorized();\n        return ok(workflows);\n      }\n      function getWorkflowsByEmployee() {\n        if (!isAuthenticated()) return unauthorized();\n        const employeeId = idFromUrl();\n        return ok(workflows.filter(x => x.employeeId === employeeId));\n      }\n      function createWorkflow() {\n        if (!isAdmin()) return unauthorized();\n        const workflow = body;\n        workflow.id = newId(workflows);\n        workflow.createdDate = new Date().toISOString();\n        workflows.push(workflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(workflow);\n      }\n      function updateWorkflowStatus() {\n        if (!isAdmin()) return unauthorized();\n        const workflow = workflows.find(x => x.id === idFromUrl());\n        if (!workflow) return notFound();\n        workflow.status = body.status;\n        workflow.lastModifiedDate = new Date().toISOString();\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(workflow);\n      }\n      function initiateOnboarding() {\n        if (!isAdmin()) return unauthorized();\n        const workflow = Object.assign(Object.assign({\n          id: newId(workflows),\n          type: 'Onboarding',\n          status: 'Pending'\n        }, body), {\n          createdDate: new Date().toISOString()\n        });\n        workflows.push(workflow);\n        localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n        return ok(workflow);\n      }\n      function getRequestById() {\n        if (!isAuthenticated()) return unauthorized();\n        const request = requests.find(x => x.id === idFromUrl());\n        if (!request) return notFound();\n        if (!isAdmin() && !isModerator() && !isOwnRequest(request.id)) {\n          return unauthorized();\n        }\n        return ok(request);\n      }\n      function getDepartmentById() {\n        if (!isAuthenticated()) return unauthorized();\n        const department = departments.find(x => x.id === idFromUrl());\n        return department ? ok(department) : notFound();\n      }\n      // helper functions\n      function ok(body) {\n        return of(new HttpResponse({\n          status: 200,\n          body\n        })).pipe(delay(500)); // delay observable to simulate server api call\n      }\n\n      function error(message) {\n        return throwError(() => ({\n          error: {\n            message\n          }\n        })).pipe(materialize(), delay(500), dematerialize());\n      }\n      function unauthorized() {\n        return throwError(() => ({\n          status: 401,\n          error: {\n            message: 'Unauthorized'\n          }\n        })).pipe(materialize(), delay(500), dematerialize());\n      }\n      function notFound() {\n        return throwError(() => ({\n          status: 404,\n          error: {\n            message: 'Not Found'\n          }\n        })).pipe(materialize(), delay(500), dematerialize());\n      }\n      function basicDetails(account) {\n        const {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status\n        } = account;\n        return {\n          id,\n          title,\n          firstName,\n          lastName,\n          email,\n          role,\n          status\n        };\n      }\n      function isAuthenticated() {\n        return !!currentAccount();\n      }\n      function isAdmin() {\n        var _a;\n        return ((_a = currentAccount()) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n      }\n      function isModerator() {\n        var _a;\n        return ((_a = currentAccount()) === null || _a === void 0 ? void 0 : _a.role) === Role.Moderator;\n      }\n      function currentAccount() {\n        var _a;\n        if (!((_a = headers.get('Authorization')) === null || _a === void 0 ? void 0 : _a.startsWith('Bearer '))) return null;\n        const token = headers.get('Authorization').split('.')[1];\n        const tokenData = JSON.parse(atob(token));\n        return accounts.find(x => x.id === tokenData.id);\n      }\n      function idFromUrl() {\n        const urlParts = url.split('/');\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n      function newId(items) {\n        return items.length ? Math.max(...items.map(x => x.id)) + 1 : 1;\n      }\n      function generateJwtToken(account) {\n        const token = {\n          id: account.id,\n          role: account.role,\n          email: account.email\n        };\n        return `fake-jwt-token.${btoa(JSON.stringify(token))}`;\n      }\n      function generateRefreshToken() {\n        return `fake-refresh-token-${Math.floor(Math.random() * 1000000000)}`;\n      }\n      function getRefreshToken() {\n        var _a;\n        return (_a = headers.get('Authorization')) === null || _a === void 0 ? void 0 : _a.split(' ')[1];\n      }\n      function isOwnEmployee(employeeId) {\n        const employee = employees.find(x => x.id === employeeId);\n        return (employee === null || employee === void 0 ? void 0 : employee.accountId) === currentAccount().id;\n      }\n      function isOwnRequest(requestId) {\n        const request = requests.find(x => x.id === requestId);\n        const employee = employees.find(x => x.accountId === currentAccount().id);\n        return (request === null || request === void 0 ? void 0 : request.employeeId) === (employee === null || employee === void 0 ? void 0 : employee.id);\n      }\n      function newAccountId() {\n        return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n      }\n    }\n  }\n  FakeBackendInterceptor.ɵfac = function FakeBackendInterceptor_Factory(t) {\n    return new (t || FakeBackendInterceptor)();\n  };\n  FakeBackendInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FakeBackendInterceptor,\n    factory: FakeBackendInterceptor.ɵfac\n  });\n  return FakeBackendInterceptor;\n})();\nexport const fakeBackendProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: FakeBackendInterceptor,\n  multi: true\n};","map":{"version":3,"mappings":"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","names":["HttpResponse","HTTP_INTERCEPTORS","of","throwError","delay","materialize","dematerialize","Role","accountsKey","employeesKey","departmentsKey","requestsKey","workflowsKey","accounts","JSON","parse","localStorage","getItem","employees","departments","requests","workflows","FakeBackendInterceptor","intercept","request","next","url","method","headers","body","handleRoute","endsWith","authenticate","refreshToken","revokeToken","register","verifyEmail","getAccounts","match","getAccountById","createEmployee","getEmployees","getEmployeeById","updateEmployee","deleteEmployee","transferEmployee","createDepartment","getDepartments","getDepartmentById","updateDepartment","deleteDepartment","createRequest","getRequests","getRequestById","getRequestsByEmployee","updateRequest","deleteRequest","createWorkflow","getWorkflows","getWorkflowsByEmployee","updateWorkflowStatus","initiateOnboarding","handle","email","password","account","find","x","error","isVerified","status","ok","basicDetails","jwtToken","generateJwtToken","getRefreshToken","unauthorized","refreshTokens","includes","filter","push","generateRefreshToken","setItem","stringify","isAuthenticated","id","newAccountId","role","Admin","User","dateCreated","Date","toISOString","verificationToken","getTime","toString","confirmPassword","token","map","idFromUrl","notFound","a","accountId","department","d","departmentId","departmentName","name","employee","isAdmin","newId","Object","assign","isModerator","currentAccount","employeeId","employeeRequests","isOwnEmployee","createdDate","isOwnRequest","lastModifiedDate","workflow","type","pipe","message","title","firstName","lastName","Moderator","get","startsWith","split","tokenData","atob","urlParts","parseInt","length","items","Math","max","btoa","floor","random","requestId","factory","fakeBackendProvider","provide","useClass","multi"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project6\\frontend\\src\\app\\_helpers\\fake-backend.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { delay, materialize, dematerialize } from 'rxjs/operators';\n\nimport { Role } from '@app/_models';\n\n// arrays in local storage for data persistence\nconst accountsKey = 'request-management-accounts';\nconst employeesKey = 'request-management-employees';\nconst departmentsKey = 'request-management-departments';\nconst requestsKey = 'request-management-requests';\nconst workflowsKey = 'request-management-workflows';\n\n// retrieve data from local storage\nlet accounts = JSON.parse(localStorage.getItem(accountsKey)) || [];\nlet employees = JSON.parse(localStorage.getItem(employeesKey)) || [];\nlet departments = JSON.parse(localStorage.getItem(departmentsKey)) || [];\nlet requests = JSON.parse(localStorage.getItem(requestsKey)) || [];\nlet workflows = JSON.parse(localStorage.getItem(workflowsKey)) || [];\n\n@Injectable()\nexport class FakeBackendInterceptor implements HttpInterceptor {\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        const { url, method, headers, body } = request;\n\n        return handleRoute();\n\n        function handleRoute() {\n            switch (true) {\n                // accounts\n                case url.endsWith('/accounts/authenticate') && method === 'POST':\n                    return authenticate();\n                case url.endsWith('/accounts/refresh-token') && method === 'POST':\n                    return refreshToken();\n                case url.endsWith('/accounts/revoke-token') && method === 'POST':\n                    return revokeToken();\n                case url.endsWith('/accounts/register') && method === 'POST':\n                    return register();\n                case url.endsWith('/accounts/verify-email') && method === 'POST':\n                    return verifyEmail();\n                case url.endsWith('/accounts') && method === 'GET':\n                    return getAccounts();\n                case url.match(/\\/accounts\\/\\d+$/) && method === 'GET':\n                    return getAccountById();\n\n                // employees\n                case url.endsWith('/employees') && method === 'POST':\n                    return createEmployee();\n                case url.endsWith('/employees') && method === 'GET':\n                    return getEmployees();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'GET':\n                    return getEmployeeById();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'PUT':\n                    return updateEmployee();\n                case url.match(/\\/employees\\/\\d+$/) && method === 'DELETE':\n                    return deleteEmployee();\n                case url.match(/\\/employees\\/\\d+\\/transfer$/) && method === 'POST':\n                    return transferEmployee();\n\n                // departments\n                case url.endsWith('/departments') && method === 'POST':\n                    return createDepartment();\n                case url.endsWith('/departments') && method === 'GET':\n                    return getDepartments();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'GET':\n                    return getDepartmentById();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'PUT':\n                    return updateDepartment();\n                case url.match(/\\/departments\\/\\d+$/) && method === 'DELETE':\n                    return deleteDepartment();\n\n                // requests\n                case url.endsWith('/requests') && method === 'POST':\n                    return createRequest();\n                case url.endsWith('/requests') && method === 'GET':\n                    return getRequests();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'GET':\n                    return getRequestById();\n                case url.match(/\\/requests\\/employee\\/\\d+$/) && method === 'GET':\n                    return getRequestsByEmployee();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'PUT':\n                    return updateRequest();\n                case url.match(/\\/requests\\/\\d+$/) && method === 'DELETE':\n                    return deleteRequest();\n\n                // workflows\n                case url.endsWith('/workflows') && method === 'POST':\n                    return createWorkflow();\n                case url.endsWith('/workflows') && method === 'GET':\n                    return getWorkflows();\n                case url.match(/\\/workflows\\/employee\\/\\d+$/) && method === 'GET':\n                    return getWorkflowsByEmployee();\n                case url.match(/\\/workflows\\/\\d+\\/status$/) && method === 'PUT':\n                    return updateWorkflowStatus();\n                case url.endsWith('/workflows/onboarding') && method === 'POST':\n                    return initiateOnboarding();\n\n                default:\n                    // pass through any requests not handled above\n                    return next.handle(request);\n            }\n        }\n\n        // route functions\n\n        function authenticate() {\n            const { email, password } = body;\n            const account = accounts.find(x => x.email === email);\n        \n            if (!account) return error('Email or password is incorrect');\n            if (password !== account.password) return error('Email or password is incorrect');\n            if (!account.isVerified) return error('Please verify your email before logging in');\n            if (account.status === 'Inactive') return error('Account is inactive');\n        \n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account)\n            });\n        }\n\n        function refreshToken() {\n            const refreshToken = getRefreshToken();\n            \n            if (!refreshToken) return unauthorized();\n\n            const account = accounts.find(x => x.refreshTokens?.includes(refreshToken));\n            if (!account) return unauthorized();\n\n            // replace old refresh token with a new one\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            account.refreshTokens.push(generateRefreshToken());\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok({\n                ...basicDetails(account),\n                jwtToken: generateJwtToken(account)\n            });\n        }\n\n        function revokeToken() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const refreshToken = getRefreshToken();\n            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));\n\n            // revoke token and save\n            account.refreshTokens = account.refreshTokens.filter(x => x !== refreshToken);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function register() {\n            const account = body;\n\n            if (accounts.find(x => x.email === account.email)) {\n                // Return ok response to prevent email enumeration\n                return ok();\n            }\n\n            // Assign account id and a few other properties then save\n            account.id = newAccountId();\n            if (account.id === 1) {\n                // First registered account is an admin\n                account.role = Role.Admin;\n                account.status = 'Active';\n            } else {\n                account.role = Role.User;\n                account.status = 'Inactive';\n            }\n            account.dateCreated = new Date().toISOString();\n            account.verificationToken = new Date().getTime().toString();\n            account.isVerified = false;\n            account.refreshTokens = [];\n            delete account.confirmPassword;\n            accounts.push(account);\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function verifyEmail() {\n            const { token } = body;\n            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);\n\n            if (!account) return error('Verification failed');\n\n            // Set is verified flag to true if token is valid\n            account.isVerified = true;\n            localStorage.setItem(accountsKey, JSON.stringify(accounts));\n\n            return ok();\n        }\n\n        function getAccounts() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(accounts.map(x => basicDetails(x)));\n        }\n\n        function getAccountById() {\n            if (!isAuthenticated()) return unauthorized();\n            const account = accounts.find(x => x.id === idFromUrl());\n            return account ? ok(basicDetails(account)) : notFound();\n        }\n\n        function getEmployees() {\n            if (!isAuthenticated()) return unauthorized();\n\n            return ok(employees.map(x => {\n                const account = accounts.find(a => a.id === x.accountId);\n                const department = departments.find(d => d.id === x.departmentId);\n                return {\n                    ...x,\n                    account: basicDetails(account),\n                    departmentName: department?.name\n                };\n            }));\n        }\n\n        function getEmployeeById() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const employee = employees.find(x => x.id === idFromUrl());\n            if (!employee) return notFound();\n\n            const account = accounts.find(x => x.id === employee.accountId);\n            const department = departments.find(x => x.id === employee.departmentId);\n\n            return ok({\n                ...employee,\n                account: basicDetails(account),\n                departmentName: department?.name\n            });\n        }\n\n        function createEmployee() {\n            if (!isAdmin()) return unauthorized();\n\n            const employee = body;\n            employee.id = newId(employees);\n            employees.push(employee);\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n\n            return ok(employee);\n        }\n\n        function updateEmployee() {\n            if (!isAdmin()) return unauthorized();\n\n            const employee = employees.find(x => x.id === idFromUrl());\n            if (!employee) return notFound();\n\n            Object.assign(employee, body);\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n\n            return ok(employee);\n        }\n\n        function deleteEmployee() {\n            if (!isAdmin()) return unauthorized();\n\n            employees = employees.filter(x => x.id !== idFromUrl());\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n\n            return ok();\n        }\n\n        function transferEmployee() {\n            if (!isAdmin()) return unauthorized();\n\n            const employee = employees.find(x => x.id === idFromUrl());\n            if (!employee) return notFound();\n\n            const { departmentId } = body;\n            if (!departments.find(x => x.id === departmentId)) return error('Department not found');\n\n            employee.departmentId = departmentId;\n            localStorage.setItem(employeesKey, JSON.stringify(employees));\n\n            return ok(employee);\n        }\n\n        function getDepartments() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(departments);\n        }\n\n        function createDepartment() {\n            if (!isAdmin()) return unauthorized();\n\n            const department = body;\n            department.id = newId(departments);\n            departments.push(department);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n\n            return ok(department);\n        }\n\n        function updateDepartment() {\n            if (!isAdmin()) return unauthorized();\n\n            const department = departments.find(x => x.id === idFromUrl());\n            if (!department) return notFound();\n\n            Object.assign(department, body);\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n\n            return ok(department);\n        }\n\n        function deleteDepartment() {\n            if (!isAdmin()) return unauthorized();\n\n            departments = departments.filter(x => x.id !== idFromUrl());\n            localStorage.setItem(departmentsKey, JSON.stringify(departments));\n\n            return ok();\n        }\n\n        function getRequests() {\n            if (!isAuthenticated()) return unauthorized();\n            if (!isAdmin() && !isModerator()) {\n                // Regular users can only see their own requests\n                const employee = employees.find(x => x.accountId === currentAccount().id);\n                return ok(requests.filter(x => x.employeeId === employee?.id));\n            }\n            return ok(requests);\n        }\n\n        function getRequestsByEmployee() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            const employeeRequests = requests.filter(x => x.employeeId === employeeId);\n            \n            if (!isAdmin() && !isModerator() && !isOwnEmployee(employeeId)) {\n                return unauthorized();\n            }\n            \n            return ok(employeeRequests);\n        }\n\n        function createRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const request = body;\n            request.id = newId(requests);\n            request.status = 'Pending';\n            request.createdDate = new Date().toISOString();\n            requests.push(request);\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            return ok(request);\n        }\n\n        function updateRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            if (!isAdmin() && !isModerator() && !isOwnRequest(request.id)) {\n                return unauthorized();\n            }\n\n            Object.assign(request, body);\n            request.lastModifiedDate = new Date().toISOString();\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            return ok(request);\n        }\n\n        function deleteRequest() {\n            if (!isAuthenticated()) return unauthorized();\n\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n\n            if (!isAdmin() && !isOwnRequest(request.id)) {\n                return unauthorized();\n            }\n\n            requests = requests.filter(x => x.id !== idFromUrl());\n            localStorage.setItem(requestsKey, JSON.stringify(requests));\n\n            return ok();\n        }\n\n        function getWorkflows() {\n            if (!isAuthenticated()) return unauthorized();\n            return ok(workflows);\n        }\n\n        function getWorkflowsByEmployee() {\n            if (!isAuthenticated()) return unauthorized();\n            \n            const employeeId = idFromUrl();\n            return ok(workflows.filter(x => x.employeeId === employeeId));\n        }\n\n        function createWorkflow() {\n            if (!isAdmin()) return unauthorized();\n\n            const workflow = body;\n            workflow.id = newId(workflows);\n            workflow.createdDate = new Date().toISOString();\n            workflows.push(workflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok(workflow);\n        }\n\n        function updateWorkflowStatus() {\n            if (!isAdmin()) return unauthorized();\n\n            const workflow = workflows.find(x => x.id === idFromUrl());\n            if (!workflow) return notFound();\n\n            workflow.status = body.status;\n            workflow.lastModifiedDate = new Date().toISOString();\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok(workflow);\n        }\n\n        function initiateOnboarding() {\n            if (!isAdmin()) return unauthorized();\n\n            const workflow = {\n                id: newId(workflows),\n                type: 'Onboarding',\n                status: 'Pending',\n                ...body,\n                createdDate: new Date().toISOString()\n            };\n            workflows.push(workflow);\n            localStorage.setItem(workflowsKey, JSON.stringify(workflows));\n\n            return ok(workflow);\n        }\n\n        function getRequestById() {\n            if (!isAuthenticated()) return unauthorized();\n            const request = requests.find(x => x.id === idFromUrl());\n            if (!request) return notFound();\n            \n            if (!isAdmin() && !isModerator() && !isOwnRequest(request.id)) {\n                return unauthorized();\n            }\n            \n            return ok(request);\n        }\n\n        function getDepartmentById() {\n            if (!isAuthenticated()) return unauthorized();\n            const department = departments.find(x => x.id === idFromUrl());\n            return department ? ok(department) : notFound();\n        }\n\n        // helper functions\n\n        function ok(body?: any) {\n            return of(new HttpResponse({ status: 200, body }))\n                .pipe(delay(500)); // delay observable to simulate server api call\n        }\n\n        function error(message: string) {\n            return throwError(() => ({ error: { message } }))\n                .pipe(materialize(), delay(500), dematerialize());\n        }\n\n        function unauthorized() {\n            return throwError(() => ({ status: 401, error: { message: 'Unauthorized' } }))\n                .pipe(materialize(), delay(500), dematerialize());\n        }\n\n        function notFound() {\n            return throwError(() => ({ status: 404, error: { message: 'Not Found' } }))\n                .pipe(materialize(), delay(500), dematerialize());\n        }\n\n        function basicDetails(account: any) {\n            const { id, title, firstName, lastName, email, role, status } = account;\n            return { id, title, firstName, lastName, email, role, status };\n        }\n\n        function isAuthenticated() {\n            return !!currentAccount();\n        }\n\n        function isAdmin() {\n            return currentAccount()?.role === Role.Admin;\n        }\n\n        function isModerator() {\n            return currentAccount()?.role === Role.Moderator;\n        }\n\n        function currentAccount() {\n            if (!headers.get('Authorization')?.startsWith('Bearer ')) return null;\n            const token = headers.get('Authorization').split('.')[1];\n            const tokenData = JSON.parse(atob(token));\n            return accounts.find(x => x.id === tokenData.id);\n        }\n\n        function idFromUrl() {\n            const urlParts = url.split('/');\n            return parseInt(urlParts[urlParts.length - 1]);\n        }\n\n        function newId(items: any[]) {\n            return items.length ? Math.max(...items.map(x => x.id)) + 1 : 1;\n        }\n\n        function generateJwtToken(account: any) {\n            const token = {\n                id: account.id,\n                role: account.role,\n                email: account.email\n            };\n            return `fake-jwt-token.${btoa(JSON.stringify(token))}`;\n        }\n\n        function generateRefreshToken() {\n            return `fake-refresh-token-${Math.floor(Math.random() * 1000000000)}`;\n        }\n\n        function getRefreshToken() {\n            return headers.get('Authorization')?.split(' ')[1];\n        }\n\n        function isOwnEmployee(employeeId: number) {\n            const employee = employees.find(x => x.id === employeeId);\n            return employee?.accountId === currentAccount().id;\n        }\n\n        function isOwnRequest(requestId: number) {\n            const request = requests.find(x => x.id === requestId);\n            const employee = employees.find(x => x.accountId === currentAccount().id);\n            return request?.employeeId === employee?.id;\n        }\n\n        function newAccountId() {\n            return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;\n        }\n    }\n}\n\nexport const fakeBackendProvider = {\n    provide: HTTP_INTERCEPTORS,\n    useClass: FakeBackendInterceptor,\n    multi: true\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}