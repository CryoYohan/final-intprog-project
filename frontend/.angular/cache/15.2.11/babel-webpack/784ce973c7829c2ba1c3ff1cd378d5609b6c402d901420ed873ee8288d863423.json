{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { map, finalize, catchError } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport { Role } from '@app/_models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/accounts`;\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.refreshingToken = false;\n      this.TOKEN_REFRESH_THRESHOLD = 5 * 60 * 1000; // 5 minutes in milliseconds\n      this.accountSubject = new BehaviorSubject(null);\n      this.account = this.accountSubject.asObservable();\n      this.loadStoredAccount();\n    }\n    loadStoredAccount() {\n      try {\n        const storedAccount = localStorage.getItem('account');\n        if (storedAccount) {\n          const account = JSON.parse(storedAccount);\n          this.accountSubject.next(account);\n          // Always start the refresh timer when loading stored account\n          this.startRefreshTokenTimer();\n        }\n      } catch (error) {\n        console.error('Error loading stored account:', error);\n        localStorage.removeItem('account');\n      }\n    }\n    isTokenValid(account) {\n      if (!account || !account.jwtToken) return false;\n      try {\n        const token = account.jwtToken;\n        const tokenData = JSON.parse(atob(token.split('.')[1]));\n        const expirationTime = tokenData.exp * 1000; // Convert to milliseconds\n        // Check if token is expired or about to expire\n        return Date.now() < expirationTime - this.TOKEN_REFRESH_THRESHOLD;\n      } catch (_a) {\n        return false;\n      }\n    }\n    get accountValue() {\n      return this.accountSubject.value;\n    }\n    get userValue() {\n      return this.accountValue;\n    }\n    get isAdmin() {\n      var _a;\n      return ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.role) === Role.Admin;\n    }\n    login(email, password) {\n      return this.http.post(`${baseUrl}/authenticate`, {\n        email,\n        password\n      }, {\n        withCredentials: true\n      }).pipe(map(account => {\n        this.storeAccount(account);\n        this.startRefreshTokenTimer();\n        return account;\n      }), catchError(error => {\n        console.error('Login error:', error);\n        return throwError(() => error);\n      }));\n    }\n    storeAccount(account) {\n      localStorage.setItem('account', JSON.stringify(account));\n      this.accountSubject.next(account);\n    }\n    logout() {\n      return this.http.post(`${baseUrl}/revoke-token`, {}, {\n        withCredentials: true\n      }).pipe(finalize(() => {\n        this.clearAccountData();\n      }));\n    }\n    clearAccountData() {\n      localStorage.removeItem('account');\n      this.stopRefreshTokenTimer();\n      this.accountSubject.next(null);\n      // Remove the automatic navigation to prevent routing loops\n    }\n\n    refreshToken() {\n      var _a;\n      const refreshToken = (_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.refreshToken;\n      if (!refreshToken) {\n        console.log('No refresh token available');\n        return throwError(() => new Error('No refresh token available'));\n      }\n      return this.http.post(`${environment.apiUrl}/refresh-token`, {\n        refreshToken\n      }).pipe(map(response => {\n        if (response.jwtToken) {\n          // Update stored account with new tokens\n          const account = Object.assign(Object.assign({}, this.accountValue), response);\n          this.accountSubject.next(account);\n          this.startRefreshTokenTimer();\n          return account;\n        }\n        return this.accountValue;\n      }), catchError(error => {\n        console.error('Token refresh failed:', error);\n        this.logout();\n        return throwError(() => error);\n      }));\n    }\n    register(account) {\n      return this.http.post(`${baseUrl}/register`, account, {\n        observe: 'response'\n      });\n    }\n    verifyEmail(token) {\n      return this.http.post(`${baseUrl}/verify-email`, {\n        token\n      });\n    }\n    forgotPassword(email) {\n      return this.http.post(`${baseUrl}/forgot-password`, {\n        email\n      });\n    }\n    validateResetToken(token) {\n      return this.http.post(`${baseUrl}/validate-reset-token`, {\n        token\n      });\n    }\n    resetPassword(token, password, confirmPassword) {\n      return this.http.post(`${baseUrl}/reset-password`, {\n        token,\n        password,\n        confirmPassword\n      });\n    }\n    getAll() {\n      return this.http.get(baseUrl);\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n    create(params) {\n      return this.http.post(baseUrl, params);\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params).pipe(map(account => {\n        var _a;\n        // update the current account if it was updated\n        if (account.id === ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          // publish updated account to subscribers\n          account = Object.assign(Object.assign({}, this.accountValue), account);\n          this.accountSubject.next(account);\n        }\n        return account;\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`).pipe(map(x => {\n        var _a;\n        // auto logout if the logged in account was deleted\n        if (id === ((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          this.logout();\n        }\n        return x;\n      }));\n    }\n    startRefreshTokenTimer() {\n      var _a;\n      // Clear any existing timer\n      this.stopRefreshTokenTimer();\n      // Set new timer - refresh token 1 minute before it expires\n      const jwtToken = JSON.parse(atob((_a = this.accountValue) === null || _a === void 0 ? void 0 : _a.jwtToken.split('.')[1]));\n      const expires = new Date(jwtToken.exp * 1000);\n      const timeout = expires.getTime() - Date.now() - 60 * 1000;\n      this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n    }\n    stopRefreshTokenTimer() {\n      if (this.refreshTokenTimeout) {\n        clearTimeout(this.refreshTokenTimeout);\n      }\n    }\n  }\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":{"version":3,"mappings":"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","names":["BehaviorSubject","throwError","map","finalize","catchError","environment","Role","baseUrl","apiUrl","AccountService","constructor","router","http","accountSubject","account","asObservable","loadStoredAccount","storedAccount","localStorage","getItem","JSON","parse","next","startRefreshTokenTimer","error","console","removeItem","isTokenValid","jwtToken","token","tokenData","atob","split","expirationTime","exp","Date","now","TOKEN_REFRESH_THRESHOLD","accountValue","value","userValue","isAdmin","role","Admin","login","email","password","post","withCredentials","pipe","storeAccount","setItem","stringify","logout","clearAccountData","stopRefreshTokenTimer","refreshToken","log","Error","response","register","observe","verifyEmail","forgotPassword","validateResetToken","resetPassword","confirmPassword","getAll","get","getById","id","create","params","update","put","delete","x","expires","timeout","getTime","refreshTokenTimeout","setTimeout","subscribe","clearTimeout","factory","providedIn"],"sourceRoot":"","sources":["D:\\JiM\\School\\3rd Year\\2nd Semester\\SUBJECTS\\IT-INTPROG32\\Coding (INTPROG32)\\Final\\project7\\frontend\\src\\app\\_services\\account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient, HttpResponse, HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { map, finalize, catchError } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport { Account, Role, RegistrationResponse } from '@app/_models';\n\nconst baseUrl = `${environment.apiUrl}/accounts`;\n\n@Injectable({ providedIn: 'root' })\nexport class AccountService {\n    private accountSubject: BehaviorSubject<Account | null>;\n    public account: Observable<Account | null>;\n    private refreshTokenTimeout: any;\n    private refreshingToken = false;\n    private readonly TOKEN_REFRESH_THRESHOLD = 5 * 60 * 1000; // 5 minutes in milliseconds\n\n    constructor(\n        private router: Router,\n        private http: HttpClient\n    ) {\n        this.accountSubject = new BehaviorSubject<Account | null>(null);\n        this.account = this.accountSubject.asObservable();\n        this.loadStoredAccount();\n    }\n\n    private loadStoredAccount() {\n        try {\n            const storedAccount = localStorage.getItem('account');\n            if (storedAccount) {\n                const account = JSON.parse(storedAccount);\n                this.accountSubject.next(account);\n                // Always start the refresh timer when loading stored account\n                this.startRefreshTokenTimer();\n            }\n        } catch (error) {\n            console.error('Error loading stored account:', error);\n            localStorage.removeItem('account');\n        }\n    }\n\n    public isTokenValid(account: Account): boolean {\n        if (!account || !account.jwtToken) return false;\n        \n        try {\n            const token = account.jwtToken;\n            const tokenData = JSON.parse(atob(token.split('.')[1]));\n            const expirationTime = tokenData.exp * 1000; // Convert to milliseconds\n            \n            // Check if token is expired or about to expire\n            return Date.now() < (expirationTime - this.TOKEN_REFRESH_THRESHOLD);\n        } catch {\n            return false;\n        }\n    }\n\n    public get accountValue() {\n        return this.accountSubject.value;\n    }\n\n    public get userValue() {\n        return this.accountValue;\n    }\n\n    public get isAdmin() {\n        return this.accountValue?.role === Role.Admin;\n    }\n\n    login(email: string, password: string) {\n        return this.http.post<Account>(`${baseUrl}/authenticate`, { email, password }, { withCredentials: true })\n            .pipe(\n                map(account => {\n                    this.storeAccount(account);\n                    this.startRefreshTokenTimer();\n                    return account;\n                }),\n                catchError(error => {\n                    console.error('Login error:', error);\n                    return throwError(() => error);\n                })\n            );\n    }\n\n    private storeAccount(account: Account) {\n        localStorage.setItem('account', JSON.stringify(account));\n        this.accountSubject.next(account);\n    }\n\n    logout() {\n        return this.http.post<any>(`${baseUrl}/revoke-token`, {}, { withCredentials: true })\n            .pipe(\n                finalize(() => {\n                    this.clearAccountData();\n                })\n            );\n    }\n\n    public clearAccountData() {\n        localStorage.removeItem('account');\n        this.stopRefreshTokenTimer();\n        this.accountSubject.next(null);\n        // Remove the automatic navigation to prevent routing loops\n    }\n\n    refreshToken() {\n        const refreshToken = this.accountValue?.refreshToken;\n        if (!refreshToken) {\n            console.log('No refresh token available');\n            return throwError(() => new Error('No refresh token available'));\n        }\n\n        return this.http.post<any>(`${environment.apiUrl}/refresh-token`, { refreshToken })\n            .pipe(\n                map(response => {\n                    if (response.jwtToken) {\n                        // Update stored account with new tokens\n                        const account = { ...this.accountValue, ...response };\n                        this.accountSubject.next(account);\n                        this.startRefreshTokenTimer();\n                        return account;\n                    }\n                    return this.accountValue;\n                }),\n                catchError(error => {\n                    console.error('Token refresh failed:', error);\n                    this.logout();\n                    return throwError(() => error);\n                })\n            );\n    }\n\n    register(account: Account): Observable<HttpResponse<RegistrationResponse>> {\n        return this.http.post<RegistrationResponse>(`${baseUrl}/register`, account, { observe: 'response' });\n    }\n\n    verifyEmail(token: string) {\n        return this.http.post(`${baseUrl}/verify-email`, { token });\n    }\n\n    forgotPassword(email: string) {\n        return this.http.post(`${baseUrl}/forgot-password`, { email });\n    }\n\n    validateResetToken(token: string) {\n        return this.http.post(`${baseUrl}/validate-reset-token`, { token });\n    }\n\n    resetPassword(token: string, password: string, confirmPassword: string) {\n        return this.http.post(`${baseUrl}/reset-password`, { token, password, confirmPassword });\n    }\n\n    getAll() {\n        return this.http.get<Account[]>(baseUrl);\n    }\n\n    getById(id: string) {\n        return this.http.get<Account>(`${baseUrl}/${id}`);\n    }\n\n    create(params: any) {\n        return this.http.post(baseUrl, params);\n    }\n\n    update(id: string, params: any) {\n        return this.http.put(`${baseUrl}/${id}`, params)\n            .pipe(map((account: any) => {\n                // update the current account if it was updated\n                if (account.id === this.accountValue?.id) {\n                    // publish updated account to subscribers\n                    account = { ...this.accountValue, ...account };\n                    this.accountSubject.next(account);\n                }\n                return account;\n            }));\n    }\n\n    delete(id: string) {\n        return this.http.delete(`${baseUrl}/${id}`)\n            .pipe(map(x => {\n                // auto logout if the logged in account was deleted\n                if (id === this.accountValue?.id) {\n                    this.logout();\n                }\n                return x;\n            }));\n    }\n\n    private startRefreshTokenTimer() {\n        // Clear any existing timer\n        this.stopRefreshTokenTimer();\n\n        // Set new timer - refresh token 1 minute before it expires\n        const jwtToken = JSON.parse(atob(this.accountValue?.jwtToken.split('.')[1]));\n        const expires = new Date(jwtToken.exp * 1000);\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\n        this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);\n    }\n\n    private stopRefreshTokenTimer() {\n        if (this.refreshTokenTimeout) {\n            clearTimeout(this.refreshTokenTimeout);\n        }\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}